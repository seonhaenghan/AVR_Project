
RC_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000d4c  00000de0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000083  00800114  00800114  00000df4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c1a  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc6  00000000  00000000  00002c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001041  00000000  00000000  00003c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000508  00000000  00000000  00004c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000093a  00000000  00000000  00005190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f6  00000000  00000000  00005aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  000063c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c3       	rjmp	.+1778   	; 0x708 <__vector_5>
  16:	00 00       	nop
  18:	c4 c3       	rjmp	.+1928   	; 0x7a2 <__vector_6>
  1a:	00 00       	nop
  1c:	0f c4       	rjmp	.+2078   	; 0x83c <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	10 c2       	rjmp	.+1056   	; 0x45a <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	c3 c0       	rjmp	.+390    	; 0x1c8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	ca c2       	rjmp	.+1428   	; 0x5de <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1b c3       	rjmp	.+1590   	; 0x6b0 <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e4       	ldi	r30, 0x4C	; 76
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 39       	cpi	r26, 0x97	; 151
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b2 d1       	rcall	.+868    	; 0x428 <main>
  c4:	41 c6       	rjmp	.+3202   	; 0xd48 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_BUTTON>:
  c8:	84 b3       	in	r24, 0x14	; 20
  ca:	8f 77       	andi	r24, 0x7F	; 127
  cc:	84 bb       	out	0x14, r24	; 20
  ce:	08 95       	ret

000000d0 <get_BUTTON1>:
  d0:	83 b3       	in	r24, 0x13	; 19
  d2:	80 78       	andi	r24, 0x80	; 128
  d4:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <__data_end>
  d8:	91 11       	cpse	r25, r1
  da:	11 c0       	rjmp	.+34     	; 0xfe <get_BUTTON1+0x2e>
  dc:	88 23       	and	r24, r24
  de:	79 f0       	breq	.+30     	; 0xfe <get_BUTTON1+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	8d ee       	ldi	r24, 0xED	; 237
  e4:	92 e0       	ldi	r25, 0x02	; 2
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <get_BUTTON1+0x16>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <get_BUTTON1+0x20>
  f0:	00 00       	nop
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	08 95       	ret
  fe:	91 30       	cpi	r25, 0x01	; 1
 100:	81 f4       	brne	.+32     	; 0x122 <get_BUTTON1+0x52>
 102:	81 11       	cpse	r24, r1
 104:	11 c0       	rjmp	.+34     	; 0x128 <get_BUTTON1+0x58>
 106:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	86 e7       	ldi	r24, 0x76	; 118
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <get_BUTTON1+0x40>
 118:	00 c0       	rjmp	.+0      	; 0x11a <get_BUTTON1+0x4a>
 11a:	00 00       	nop
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	08 95       	ret
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	08 95       	ret
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	08 95       	ret

0000012e <auto_mode_check>:
 12e:	d0 df       	rcall	.-96     	; 0xd0 <get_BUTTON1>
 130:	89 2b       	or	r24, r25
 132:	71 f0       	breq	.+28     	; 0x150 <auto_mode_check+0x22>
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <button1_state>
 13c:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <button1_state+0x1>
 140:	23 2b       	or	r18, r19
 142:	11 f0       	breq	.+4      	; 0x148 <auto_mode_check+0x1a>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <button1_state+0x1>
 14c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <button1_state>
 150:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <button1_state>
 154:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <button1_state+0x1>
 158:	89 2b       	or	r24, r25
 15a:	31 f0       	breq	.+12     	; 0x168 <auto_mode_check+0x3a>
 15c:	e5 e6       	ldi	r30, 0x65	; 101
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	80 61       	ori	r24, 0x10	; 16
 164:	80 83       	st	Z, r24
 166:	08 95       	ret
 168:	e5 e6       	ldi	r30, 0x65	; 101
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	8f 7e       	andi	r24, 0xEF	; 239
 170:	80 83       	st	Z, r24
 172:	08 95       	ret

00000174 <init_led>:
 174:	e4 e6       	ldi	r30, 0x64	; 100
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	8f 61       	ori	r24, 0x1F	; 31
 17c:	80 83       	st	Z, r24
 17e:	08 95       	ret

00000180 <led_right>:
 180:	e5 e6       	ldi	r30, 0x65	; 101
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	81 60       	ori	r24, 0x01	; 1
 188:	80 83       	st	Z, r24
 18a:	80 81       	ld	r24, Z
 18c:	8d 7f       	andi	r24, 0xFD	; 253
 18e:	80 83       	st	Z, r24
 190:	08 95       	ret

00000192 <led_left>:
 192:	e5 e6       	ldi	r30, 0x65	; 101
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	82 60       	ori	r24, 0x02	; 2
 19a:	80 83       	st	Z, r24
 19c:	80 81       	ld	r24, Z
 19e:	8e 7f       	andi	r24, 0xFE	; 254
 1a0:	80 83       	st	Z, r24
 1a2:	08 95       	ret

000001a4 <led_forward>:
 1a4:	e5 e6       	ldi	r30, 0x65	; 101
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	83 60       	ori	r24, 0x03	; 3
 1ac:	80 83       	st	Z, r24
 1ae:	80 81       	ld	r24, Z
 1b0:	83 7f       	andi	r24, 0xF3	; 243
 1b2:	80 83       	st	Z, r24
 1b4:	08 95       	ret

000001b6 <led_stop>:
 1b6:	e5 e6       	ldi	r30, 0x65	; 101
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	8c 60       	ori	r24, 0x0C	; 12
 1be:	80 83       	st	Z, r24
 1c0:	80 81       	ld	r24, Z
 1c2:	8c 7f       	andi	r24, 0xFC	; 252
 1c4:	80 83       	st	Z, r24
 1c6:	08 95       	ret

000001c8 <__vector_16>:
			turn_left(set_speed);
			
		}
		else
		{
			motion_state = 0;
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
 1da:	86 e0       	ldi	r24, 0x06	; 6
 1dc:	82 bf       	out	0x32, r24	; 50
 1de:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <ms_count>
 1e2:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <ms_count+0x1>
 1e6:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <ms_count+0x2>
 1ea:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <ms_count+0x3>
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	a1 1d       	adc	r26, r1
 1f2:	b1 1d       	adc	r27, r1
 1f4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <ms_count>
 1f8:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <ms_count+0x1>
 1fc:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <ms_count+0x2>
 200:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <ms_count+0x3>
 204:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <ms_count>
 208:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <ms_count+0x1>
 20c:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <ms_count+0x2>
 210:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <ms_count+0x3>
 214:	c2 97       	sbiw	r24, 0x32	; 50
 216:	a1 05       	cpc	r26, r1
 218:	b1 05       	cpc	r27, r1
 21a:	d8 f0       	brcs	.+54     	; 0x252 <__vector_16+0x8a>
 21c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <ms_count>
 220:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <ms_count+0x1>
 224:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <ms_count+0x2>
 228:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <ms_count+0x3>
 22c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ms_count50>
 230:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <ms_count50+0x1>
 234:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <ms_count50+0x2>
 238:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <ms_count50+0x3>
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	a1 1d       	adc	r26, r1
 240:	b1 1d       	adc	r27, r1
 242:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ms_count50>
 246:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <ms_count50+0x1>
 24a:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <ms_count50+0x2>
 24e:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <ms_count50+0x3>
 252:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ms_count50>
 256:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <ms_count50+0x1>
 25a:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <ms_count50+0x2>
 25e:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <ms_count50+0x3>
 262:	03 97       	sbiw	r24, 0x03	; 3
 264:	a1 05       	cpc	r26, r1
 266:	b1 05       	cpc	r27, r1
 268:	40 f0       	brcs	.+16     	; 0x27a <__vector_16+0xb2>
 26a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ms_count50>
 26e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <ms_count50+0x1>
 272:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <ms_count50+0x2>
 276:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <ms_count50+0x3>
 27a:	bf 91       	pop	r27
 27c:	af 91       	pop	r26
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <one_obstruction>:
 28c:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <ultrasonic_left_distance>
 290:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <ultrasonic_left_distance+0x1>
 294:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 298:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 29c:	82 17       	cp	r24, r18
 29e:	93 07       	cpc	r25, r19
 2a0:	0c f1       	brlt	.+66     	; 0x2e4 <one_obstruction+0x58>
 2a2:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <ultrasonic_right_distance>
 2a6:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <ultrasonic_right_distance+0x1>
 2aa:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ultrasonic_center_distance>
 2ae:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <ultrasonic_center_distance+0x1>
 2b2:	82 17       	cp	r24, r18
 2b4:	93 07       	cpc	r25, r19
 2b6:	34 f4       	brge	.+12     	; 0x2c4 <one_obstruction+0x38>
 2b8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <set_speed>
 2bc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <set_speed+0x1>
 2c0:	3f d1       	rcall	.+638    	; 0x540 <turn_left>
 2c2:	10 c0       	rjmp	.+32     	; 0x2e4 <one_obstruction+0x58>
 2c4:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <ultrasonic_right_distance>
 2c8:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <ultrasonic_right_distance+0x1>
 2cc:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ultrasonic_center_distance>
 2d0:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <ultrasonic_center_distance+0x1>
 2d4:	28 17       	cp	r18, r24
 2d6:	39 07       	cpc	r19, r25
 2d8:	2c f4       	brge	.+10     	; 0x2e4 <one_obstruction+0x58>
 2da:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <set_speed>
 2de:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <set_speed+0x1>
 2e2:	08 d1       	rcall	.+528    	; 0x4f4 <forward>
 2e4:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <ultrasonic_center_distance>
 2e8:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <ultrasonic_center_distance+0x1>
 2ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <obs_distance>
 2f0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <obs_distance+0x1>
 2f4:	82 17       	cp	r24, r18
 2f6:	93 07       	cpc	r25, r19
 2f8:	0c f1       	brlt	.+66     	; 0x33c <one_obstruction+0xb0>
 2fa:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <ultrasonic_left_distance>
 2fe:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <ultrasonic_left_distance+0x1>
 302:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ultrasonic_right_distance>
 306:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ultrasonic_right_distance+0x1>
 30a:	82 17       	cp	r24, r18
 30c:	93 07       	cpc	r25, r19
 30e:	34 f4       	brge	.+12     	; 0x31c <one_obstruction+0x90>
 310:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <set_speed>
 314:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <set_speed+0x1>
 318:	13 d1       	rcall	.+550    	; 0x540 <turn_left>
 31a:	10 c0       	rjmp	.+32     	; 0x33c <one_obstruction+0xb0>
 31c:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <ultrasonic_left_distance>
 320:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <ultrasonic_left_distance+0x1>
 324:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <ultrasonic_right_distance>
 328:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <ultrasonic_right_distance+0x1>
 32c:	28 17       	cp	r18, r24
 32e:	39 07       	cpc	r19, r25
 330:	2c f4       	brge	.+10     	; 0x33c <one_obstruction+0xb0>
 332:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <set_speed>
 336:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <set_speed+0x1>
 33a:	12 d1       	rcall	.+548    	; 0x560 <turn_right>
 33c:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <ultrasonic_right_distance>
 340:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <ultrasonic_right_distance+0x1>
 344:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 348:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 34c:	82 17       	cp	r24, r18
 34e:	93 07       	cpc	r25, r19
 350:	0c f1       	brlt	.+66     	; 0x394 <one_obstruction+0x108>
 352:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <ultrasonic_right_distance>
 356:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <ultrasonic_right_distance+0x1>
 35a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ultrasonic_center_distance>
 35e:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <ultrasonic_center_distance+0x1>
 362:	82 17       	cp	r24, r18
 364:	93 07       	cpc	r25, r19
 366:	34 f4       	brge	.+12     	; 0x374 <one_obstruction+0xe8>
 368:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <set_speed>
 36c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <set_speed+0x1>
 370:	f7 c0       	rjmp	.+494    	; 0x560 <turn_right>
 372:	08 95       	ret
 374:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <ultrasonic_right_distance>
 378:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <ultrasonic_right_distance+0x1>
 37c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ultrasonic_center_distance>
 380:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <ultrasonic_center_distance+0x1>
 384:	28 17       	cp	r18, r24
 386:	39 07       	cpc	r19, r25
 388:	2c f4       	brge	.+10     	; 0x394 <one_obstruction+0x108>
 38a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <set_speed>
 38e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <set_speed+0x1>
 392:	b0 c0       	rjmp	.+352    	; 0x4f4 <forward>
 394:	08 95       	ret

00000396 <auto_drive>:
 396:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <ultrasonic_left_distance>
 39a:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <ultrasonic_left_distance+0x1>
 39e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <obs_distance>
 3a2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <obs_distance+0x1>
 3a6:	82 17       	cp	r24, r18
 3a8:	93 07       	cpc	r25, r19
 3aa:	74 f4       	brge	.+28     	; 0x3c8 <auto_drive+0x32>
 3ac:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <ultrasonic_center_distance>
 3b0:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <ultrasonic_center_distance+0x1>
 3b4:	82 17       	cp	r24, r18
 3b6:	93 07       	cpc	r25, r19
 3b8:	3c f4       	brge	.+14     	; 0x3c8 <auto_drive+0x32>
 3ba:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <ultrasonic_right_distance>
 3be:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <ultrasonic_right_distance+0x1>
 3c2:	82 17       	cp	r24, r18
 3c4:	93 07       	cpc	r25, r19
 3c6:	14 f0       	brlt	.+4      	; 0x3cc <auto_drive+0x36>
 3c8:	61 cf       	rjmp	.-318    	; 0x28c <one_obstruction>
 3ca:	08 95       	ret
 3cc:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <ultrasonic_left_distance>
 3d0:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <ultrasonic_left_distance+0x1>
 3d4:	28 17       	cp	r18, r24
 3d6:	39 07       	cpc	r19, r25
 3d8:	84 f4       	brge	.+32     	; 0x3fa <auto_drive+0x64>
 3da:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <ultrasonic_center_distance>
 3de:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <ultrasonic_center_distance+0x1>
 3e2:	28 17       	cp	r18, r24
 3e4:	39 07       	cpc	r19, r25
 3e6:	4c f4       	brge	.+18     	; 0x3fa <auto_drive+0x64>
 3e8:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <ultrasonic_right_distance>
 3ec:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <ultrasonic_right_distance+0x1>
 3f0:	28 17       	cp	r18, r24
 3f2:	39 07       	cpc	r19, r25
 3f4:	14 f4       	brge	.+4      	; 0x3fa <auto_drive+0x64>
 3f6:	c4 c0       	rjmp	.+392    	; 0x580 <stop>
 3f8:	08 95       	ret
 3fa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <set_speed>
 3fe:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <set_speed+0x1>
 402:	78 c0       	rjmp	.+240    	; 0x4f4 <forward>
 404:	08 95       	ret

00000406 <init_timer0>:
}


void init_timer0()
{
	TCNT0 = 6;
 406:	86 e0       	ldi	r24, 0x06	; 6
 408:	82 bf       	out	0x32, r24	; 50
	
	DDRF = 0x01 + 0x02 + 0x04;
 40a:	87 e0       	ldi	r24, 0x07	; 7
 40c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
	PORTF |= 0x02;
 410:	e2 e6       	ldi	r30, 0x62	; 98
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	82 60       	ori	r24, 0x02	; 2
 418:	80 83       	st	Z, r24
	
	TCCR0 |= (1 << CS02) | (0 << CS01) | (0 << CS00);  //  분주비를 64로 설정
 41a:	83 b7       	in	r24, 0x33	; 51
 41c:	84 60       	ori	r24, 0x04	; 4
 41e:	83 bf       	out	0x33, r24	; 51
	
	TIMSK |= (1 << TOIE0);
 420:	87 b7       	in	r24, 0x37	; 55
 422:	81 60       	ori	r24, 0x01	; 1
 424:	87 bf       	out	0x37, r24	; 55
 426:	08 95       	ret

00000428 <main>:



int main(void)
{
	init_pwm_motor();
 428:	41 d0       	rcall	.+130    	; 0x4ac <init_pwm_motor>
	init_led();
 42a:	a4 de       	rcall	.-696    	; 0x174 <init_led>
	init_BUTTON();
 42c:	4d de       	rcall	.-870    	; 0xc8 <init_BUTTON>
	init_uart0(); // UART0를 초기화 한다.
 42e:	16 d1       	rcall	.+556    	; 0x65c <init_uart0>
	init_UART1(); // UART1 initial
 430:	28 d1       	rcall	.+592    	; 0x682 <init_UART1>
 432:	e9 df       	rcall	.-46     	; 0x406 <init_timer0>
	init_timer0();
 434:	50 d2       	rcall	.+1184   	; 0x8d6 <init_ultrasonic>
 436:	86 e0       	ldi	r24, 0x06	; 6
	init_ultrasonic();
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <__iob+0x3>
	
	
	stdout = &OUTPUT; // for printf /fprintf(stdout, "test"); ==> printf stdin : 입력
 43e:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <__iob+0x2>
 442:	78 94       	sei
	sei();			 // global interrupt 활성화
 444:	ab d0       	rcall	.+342    	; 0x59c <manual_mode_run>
	
	while (1)
	{
		
		manual_mode_run();  // Bluetooth car command run 
 446:	73 de       	rcall	.-794    	; 0x12e <auto_mode_check>
		
		auto_mode_check();	// button1 check
 448:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <button1_state>

		if(button1_state)
 44c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <button1_state+0x1>
 450:	89 2b       	or	r24, r25
 452:	c1 f3       	breq	.-16     	; 0x444 <main+0x1c>
 454:	a0 df       	rcall	.-192    	; 0x396 <auto_drive>
		{
			auto_drive(); 
 456:	ca d2       	rcall	.+1428   	; 0x9ec <distance_check>
 458:	f5 cf       	rjmp	.-22     	; 0x444 <main+0x1c>

0000045a <__vector_14>:
			distance_check();	// 초음파 거리 측정  
 45a:	1f 92       	push	r1
 45c:	0f 92       	push	r0
 45e:	0f b6       	in	r0, 0x3f	; 63
#include "pwm_motor.h"



ISR(TIMER1_OVF_vect)
{
 460:	0f 92       	push	r0
 462:	11 24       	eor	r1, r1
 464:	8f 93       	push	r24
 466:	9f 93       	push	r25
 468:	af 93       	push	r26
 46a:	bf 93       	push	r27
	TCNT1 = 6;
 46c:	86 e0       	ldi	r24, 0x06	; 6
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	9d bd       	out	0x2d, r25	; 45
 472:	8c bd       	out	0x2c, r24	; 44
	motor_ms_count++;
 474:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <motor_ms_count>
 478:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <motor_ms_count+0x1>
 47c:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <motor_ms_count+0x2>
 480:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <motor_ms_count+0x3>
 484:	01 96       	adiw	r24, 0x01	; 1
 486:	a1 1d       	adc	r26, r1
 488:	b1 1d       	adc	r27, r1
 48a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <motor_ms_count>
 48e:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <motor_ms_count+0x1>
 492:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <motor_ms_count+0x2>
 496:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <motor_ms_count+0x3>
	
}
 49a:	bf 91       	pop	r27
 49c:	af 91       	pop	r26
 49e:	9f 91       	pop	r25
 4a0:	8f 91       	pop	r24
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	0f 90       	pop	r0
 4a8:	1f 90       	pop	r1
 4aa:	18 95       	reti

000004ac <init_pwm_motor>:

void init_pwm_motor(void)
{
	MOTOR_DRIVER_PORT_DDR |= (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3);		// motor driver port
 4ac:	e1 e6       	ldi	r30, 0x61	; 97
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	8f 60       	ori	r24, 0x0F	; 15
 4b4:	80 83       	st	Z, r24
	MOTOR_DDR |= (1 << MOTOR_RIGHT_PORT_DDR) | (1 << MOTOR_LEFT_PORT_DDR); // motor pwm port
 4b6:	87 b3       	in	r24, 0x17	; 23
 4b8:	80 66       	ori	r24, 0x60	; 96
 4ba:	87 bb       	out	0x17, r24	; 23
	
	TCCR1B |= (0 << CS12) | (1 << CS11) | (1 << CS10); // 64 분주
 4bc:	8e b5       	in	r24, 0x2e	; 46
 4be:	83 60       	ori	r24, 0x03	; 3
 4c0:	8e bd       	out	0x2e, r24	; 46
	// 256bit count ==> 1.02ms (펄스를 256개를 카운트 하면 1.02ms 소요)
	// 127 / 250000 ==> 0.5ms
	// 0x3ff(1023) ==> 4ms Top값을 이와 같이 설정 시 모터는 최고속도로 동작함
	
	
	TCCR1B |= (1 << WGM13) | (1 << WGM12); // 모드 14 고속 PWM ICR1
 4c2:	8e b5       	in	r24, 0x2e	; 46
 4c4:	88 61       	ori	r24, 0x18	; 24
 4c6:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= (1 << WGM11) | (0 << WGM10); // 모드 14 고속 PWM ICR1
 4c8:	8f b5       	in	r24, 0x2f	; 47
 4ca:	82 60       	ori	r24, 0x02	; 2
 4cc:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1A1) | (0 << COM1A0); // 비반전 MODE 설정 : OCR 시 low TOP 시 high
 4ce:	8f b5       	in	r24, 0x2f	; 47
 4d0:	80 68       	ori	r24, 0x80	; 128
 4d2:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1 << COM1B1) | (0 << COM1B0); // R, L 이 분리되어 있기에 2개 선언
 4d4:	8f b5       	in	r24, 0x2f	; 47
 4d6:	80 62       	ori	r24, 0x20	; 32
 4d8:	8f bd       	out	0x2f, r24	; 47
	
	MOTOR_DRIVER_PORT &= ~((1 << 0) | (1 << 1) | (1 << 2) | (1 << 3)); // Reset
 4da:	e2 e6       	ldi	r30, 0x62	; 98
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	80 81       	ld	r24, Z
 4e0:	80 7f       	andi	r24, 0xF0	; 240
 4e2:	80 83       	st	Z, r24
	MOTOR_DRIVER_PORT |= (1 << 2) | (1 << 0);						   // 전진모드로 Setting
 4e4:	80 81       	ld	r24, Z
 4e6:	85 60       	ori	r24, 0x05	; 5
 4e8:	80 83       	st	Z, r24
	ICR1 = 0x3ff; // 1023 ==> 4ms
 4ea:	8f ef       	ldi	r24, 0xFF	; 255
 4ec:	93 e0       	ldi	r25, 0x03	; 3
 4ee:	97 bd       	out	0x27, r25	; 39
 4f0:	86 bd       	out	0x26, r24	; 38
 4f2:	08 95       	ret

000004f4 <forward>:
		break;
	}
}

void forward(int speed)
{
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	ec 01       	movw	r28, r24
	led_forward();
 4fa:	54 de       	rcall	.-856    	; 0x1a4 <led_forward>
	MOTOR_DRIVER_PORT &= ~((1 << 0) | (1 << 1) | (1 << 2) | (1 << 3)); // Reset
 4fc:	e2 e6       	ldi	r30, 0x62	; 98
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	80 81       	ld	r24, Z
 502:	80 7f       	andi	r24, 0xF0	; 240
 504:	80 83       	st	Z, r24
	MOTOR_DRIVER_PORT |= (1 << 2) | (1 << 0);						   // 전진모드로 Setting (1010)
 506:	80 81       	ld	r24, Z
 508:	85 60       	ori	r24, 0x05	; 5
 50a:	80 83       	st	Z, r24
	
	OCR1A = speed;	// PB5 PWM 출력 left
 50c:	db bd       	out	0x2b, r29	; 43
 50e:	ca bd       	out	0x2a, r28	; 42
	OCR1B = speed;	// PB6 PWM 출력	right
 510:	d9 bd       	out	0x29, r29	; 41
 512:	c8 bd       	out	0x28, r28	; 40
	
}
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <backward>:

void backward(int speed)
{
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	ec 01       	movw	r28, r24
	led_stop();
 520:	4a de       	rcall	.-876    	; 0x1b6 <led_stop>
	MOTOR_DRIVER_PORT &= ~((1 << 0) | (1 << 1) | (1 << 2) | (1 << 3)); // Reset
 522:	e2 e6       	ldi	r30, 0x62	; 98
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	80 81       	ld	r24, Z
 528:	80 7f       	andi	r24, 0xF0	; 240
 52a:	80 83       	st	Z, r24
	MOTOR_DRIVER_PORT |= (1 << 3) | (1 << 1);						   // 후진모드로 set (0101)
 52c:	80 81       	ld	r24, Z
 52e:	8a 60       	ori	r24, 0x0A	; 10
 530:	80 83       	st	Z, r24
	
	OCR1A = speed;	// PB5 PWM 출력 left
 532:	db bd       	out	0x2b, r29	; 43
 534:	ca bd       	out	0x2a, r28	; 42
	OCR1B = speed;	// PB6 PWM 출력	right
 536:	d9 bd       	out	0x29, r29	; 41
 538:	c8 bd       	out	0x28, r28	; 40
	
}
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <turn_left>:

void turn_left(int speed)
{
	led_left();
 540:	28 de       	rcall	.-944    	; 0x192 <led_left>
	MOTOR_DRIVER_PORT &= ~((1 << 0) | (1 << 1) | (1 << 2) | (1 << 3)); // Reset
 542:	e2 e6       	ldi	r30, 0x62	; 98
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	80 7f       	andi	r24, 0xF0	; 240
 54a:	80 83       	st	Z, r24
	MOTOR_DRIVER_PORT |= (1 << 2) | (1 << 0);						   // 전진모드로 Setting (1010)
 54c:	80 81       	ld	r24, Z
 54e:	85 60       	ori	r24, 0x05	; 5
 550:	80 83       	st	Z, r24
	//MOTOR_DRIVER_PORT |= (1 << 2) | (1 << 1);
	
	OCR1A = 0;		// PB5 PWM 출력 left
 552:	1b bc       	out	0x2b, r1	; 43
 554:	1a bc       	out	0x2a, r1	; 42
	
	OCR1B = 1023;	// PB6 PWM 출력	right
 556:	8f ef       	ldi	r24, 0xFF	; 255
 558:	93 e0       	ldi	r25, 0x03	; 3
 55a:	99 bd       	out	0x29, r25	; 41
 55c:	88 bd       	out	0x28, r24	; 40
 55e:	08 95       	ret

00000560 <turn_right>:
}

void turn_right(int speed)
{
	led_right();
 560:	0f de       	rcall	.-994    	; 0x180 <led_right>
	MOTOR_DRIVER_PORT &= ~((1 << 0) | (1 << 1) | (1 << 2) | (1 << 3)); // Reset
 562:	e2 e6       	ldi	r30, 0x62	; 98
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	80 7f       	andi	r24, 0xF0	; 240
 56a:	80 83       	st	Z, r24
	MOTOR_DRIVER_PORT |= (1 << 2) | (1 << 0);						   // 전진모드로 Setting (1010)
 56c:	80 81       	ld	r24, Z
 56e:	85 60       	ori	r24, 0x05	; 5
 570:	80 83       	st	Z, r24
	
	//MOTOR_DRIVER_PORT |= (1 << 3) | (1 << 0);	
	
	OCR1A = 512;	// PB5 PWM 출력 left
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	92 e0       	ldi	r25, 0x02	; 2
 576:	9b bd       	out	0x2b, r25	; 43
 578:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 0;		// PB6 PWM 출력	right
 57a:	19 bc       	out	0x29, r1	; 41
 57c:	18 bc       	out	0x28, r1	; 40
 57e:	08 95       	ret

00000580 <stop>:
	//OCR1B = speed;
}

void stop()
{
	led_stop();
 580:	1a de       	rcall	.-972    	; 0x1b6 <led_stop>
	OCR1A = 0;		// PB5 PWM 출력 left
 582:	1b bc       	out	0x2b, r1	; 43
 584:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;		// PB6 PWM 출력	right
 586:	19 bc       	out	0x29, r1	; 41
 588:	18 bc       	out	0x28, r1	; 40
	
	MOTOR_DRIVER_PORT &= ~((1 << 0) | (1 << 1) | (1 << 2) | (1 << 3)); // Reset
 58a:	e2 e6       	ldi	r30, 0x62	; 98
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	80 7f       	andi	r24, 0xF0	; 240
 592:	80 83       	st	Z, r24
	MOTOR_DRIVER_PORT |= (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3);	   // stop mode
 594:	80 81       	ld	r24, Z
 596:	8f 60       	ori	r24, 0x0F	; 15
 598:	80 83       	st	Z, r24
 59a:	08 95       	ret

0000059c <manual_mode_run>:



void manual_mode_run(void)
{
	switch(UART1_RX_data)
 59c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <UART1_RX_data>
 5a0:	8c 34       	cpi	r24, 0x4C	; 76
 5a2:	99 f0       	breq	.+38     	; 0x5ca <manual_mode_run+0x2e>
 5a4:	28 f4       	brcc	.+10     	; 0x5b0 <manual_mode_run+0x14>
 5a6:	82 34       	cpi	r24, 0x42	; 66
 5a8:	61 f0       	breq	.+24     	; 0x5c2 <manual_mode_run+0x26>
 5aa:	86 34       	cpi	r24, 0x46	; 70
 5ac:	31 f0       	breq	.+12     	; 0x5ba <manual_mode_run+0x1e>
 5ae:	08 95       	ret
 5b0:	82 35       	cpi	r24, 0x52	; 82
 5b2:	79 f0       	breq	.+30     	; 0x5d2 <manual_mode_run+0x36>
 5b4:	83 35       	cpi	r24, 0x53	; 83
 5b6:	89 f0       	breq	.+34     	; 0x5da <manual_mode_run+0x3e>
 5b8:	08 95       	ret
	{
		case 'F' :
		forward(500);	// // 4us * 500 = 0.002sec (2ms)
 5ba:	84 ef       	ldi	r24, 0xF4	; 244
 5bc:	91 e0       	ldi	r25, 0x01	; 1
 5be:	9a cf       	rjmp	.-204    	; 0x4f4 <forward>
		break;
 5c0:	08 95       	ret
		
		case 'B' :
		backward(500);
 5c2:	84 ef       	ldi	r24, 0xF4	; 244
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	a9 cf       	rjmp	.-174    	; 0x51a <backward>
		break;
 5c8:	08 95       	ret
		
		case 'L' :
		turn_left(700);
 5ca:	8c eb       	ldi	r24, 0xBC	; 188
 5cc:	92 e0       	ldi	r25, 0x02	; 2
 5ce:	b8 cf       	rjmp	.-144    	; 0x540 <turn_left>
		break;
		
		case 'R' :
		turn_right(700);
 5d0:	08 95       	ret
 5d2:	8c eb       	ldi	r24, 0xBC	; 188
 5d4:	92 e0       	ldi	r25, 0x02	; 2
		break;
 5d6:	c4 cf       	rjmp	.-120    	; 0x560 <turn_right>
		
		case 'S' :
		stop();
 5d8:	08 95       	ret
 5da:	d2 cf       	rjmp	.-92     	; 0x580 <stop>
 5dc:	08 95       	ret

000005de <__vector_18>:
 5de:	1f 92       	push	r1
 5e0:	0f 92       	push	r0
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	0f 92       	push	r0
 5e6:	11 24       	eor	r1, r1
 5e8:	0b b6       	in	r0, 0x3b	; 59
 5ea:	0f 92       	push	r0
 5ec:	2f 93       	push	r18
 5ee:	3f 93       	push	r19
 5f0:	4f 93       	push	r20
 5f2:	5f 93       	push	r21
 5f4:	8f 93       	push	r24
 5f6:	ef 93       	push	r30
 5f8:	ff 93       	push	r31
 5fa:	8c b1       	in	r24, 0x0c	; 12
 5fc:	8d 30       	cpi	r24, 0x0D	; 13
 5fe:	11 f0       	breq	.+4      	; 0x604 <__vector_18+0x26>
 600:	8a 30       	cpi	r24, 0x0A	; 10
 602:	79 f4       	brne	.+30     	; 0x622 <__vector_18+0x44>
 604:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <i>
 608:	f0 91 24 01 	lds	r31, 0x0124	; 0x800124 <i+0x1>
 60c:	e4 5d       	subi	r30, 0xD4	; 212
 60e:	fe 4f       	sbci	r31, 0xFE	; 254
 610:	10 82       	st	Z, r1
 612:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <i+0x1>
 616:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <i>
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <rx_ready_flag>
 620:	0f c0       	rjmp	.+30     	; 0x640 <__vector_18+0x62>
 622:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <i>
 626:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <i+0x1>
 62a:	a9 01       	movw	r20, r18
 62c:	4f 5f       	subi	r20, 0xFF	; 255
 62e:	5f 4f       	sbci	r21, 0xFF	; 255
 630:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <i+0x1>
 634:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <i>
 638:	f9 01       	movw	r30, r18
 63a:	e4 5d       	subi	r30, 0xD4	; 212
 63c:	fe 4f       	sbci	r31, 0xFE	; 254
 63e:	80 83       	st	Z, r24
 640:	ff 91       	pop	r31
 642:	ef 91       	pop	r30
 644:	8f 91       	pop	r24
 646:	5f 91       	pop	r21
 648:	4f 91       	pop	r20
 64a:	3f 91       	pop	r19
 64c:	2f 91       	pop	r18
 64e:	0f 90       	pop	r0
 650:	0b be       	out	0x3b, r0	; 59
 652:	0f 90       	pop	r0
 654:	0f be       	out	0x3f, r0	; 63
 656:	0f 90       	pop	r0
 658:	1f 90       	pop	r1
 65a:	18 95       	reti

0000065c <init_uart0>:
 65c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 660:	8f ec       	ldi	r24, 0xCF	; 207
 662:	89 b9       	out	0x09, r24	; 9
 664:	8b b1       	in	r24, 0x0b	; 11
 666:	82 60       	ori	r24, 0x02	; 2
 668:	8b b9       	out	0x0b, r24	; 11
 66a:	e5 e9       	ldi	r30, 0x95	; 149
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	80 81       	ld	r24, Z
 670:	86 60       	ori	r24, 0x06	; 6
 672:	80 83       	st	Z, r24
 674:	88 e9       	ldi	r24, 0x98	; 152
 676:	8a b9       	out	0x0a, r24	; 10
 678:	08 95       	ret

0000067a <UART0_transmit>:
 67a:	5d 9b       	sbis	0x0b, 5	; 11
 67c:	fe cf       	rjmp	.-4      	; 0x67a <UART0_transmit>
 67e:	8c b9       	out	0x0c, r24	; 12
 680:	08 95       	ret

00000682 <init_UART1>:
 682:	ea e9       	ldi	r30, 0x9A	; 154
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	80 81       	ld	r24, Z
 688:	88 69       	ori	r24, 0x98	; 152
 68a:	80 83       	st	Z, r24
 68c:	eb e9       	ldi	r30, 0x9B	; 155
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	80 81       	ld	r24, Z
 692:	82 60       	ori	r24, 0x02	; 2
 694:	80 83       	st	Z, r24
 696:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 69a:	8f ec       	ldi	r24, 0xCF	; 207
 69c:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 6a0:	08 95       	ret

000006a2 <UART1_receive>:
 6a2:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 6a6:	88 23       	and	r24, r24
 6a8:	e4 f7       	brge	.-8      	; 0x6a2 <UART1_receive>
 6aa:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 6ae:	08 95       	ret

000006b0 <__vector_30>:
 6b0:	1f 92       	push	r1
 6b2:	0f 92       	push	r0
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	0f 92       	push	r0
 6b8:	11 24       	eor	r1, r1
 6ba:	0b b6       	in	r0, 0x3b	; 59
 6bc:	0f 92       	push	r0
 6be:	2f 93       	push	r18
 6c0:	3f 93       	push	r19
 6c2:	4f 93       	push	r20
 6c4:	5f 93       	push	r21
 6c6:	6f 93       	push	r22
 6c8:	7f 93       	push	r23
 6ca:	8f 93       	push	r24
 6cc:	9f 93       	push	r25
 6ce:	af 93       	push	r26
 6d0:	bf 93       	push	r27
 6d2:	ef 93       	push	r30
 6d4:	ff 93       	push	r31
 6d6:	e5 df       	rcall	.-54     	; 0x6a2 <UART1_receive>
 6d8:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <UART1_RX_data>
 6dc:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <UART1_RX_data>
 6e0:	cc df       	rcall	.-104    	; 0x67a <UART0_transmit>
 6e2:	ff 91       	pop	r31
 6e4:	ef 91       	pop	r30
 6e6:	bf 91       	pop	r27
 6e8:	af 91       	pop	r26
 6ea:	9f 91       	pop	r25
 6ec:	8f 91       	pop	r24
 6ee:	7f 91       	pop	r23
 6f0:	6f 91       	pop	r22
 6f2:	5f 91       	pop	r21
 6f4:	4f 91       	pop	r20
 6f6:	3f 91       	pop	r19
 6f8:	2f 91       	pop	r18
 6fa:	0f 90       	pop	r0
 6fc:	0b be       	out	0x3b, r0	; 59
 6fe:	0f 90       	pop	r0
 700:	0f be       	out	0x3f, r0	; 63
 702:	0f 90       	pop	r0
 704:	1f 90       	pop	r1
 706:	18 95       	reti

00000708 <__vector_5>:
// 초음파 : 1cm 를 이동하는데 29us 소요 1cm 왕복 : 29 * 2 = 58us 소요 
// 16000000Hz / 1024 == 15,625Hz
// T = 1/f ==> 0.000064sec (64us)

ISR(INT4_vect)
{
 708:	1f 92       	push	r1
 70a:	0f 92       	push	r0
 70c:	0f b6       	in	r0, 0x3f	; 63
 70e:	0f 92       	push	r0
 710:	11 24       	eor	r1, r1
 712:	0b b6       	in	r0, 0x3b	; 59
 714:	0f 92       	push	r0
 716:	2f 93       	push	r18
 718:	3f 93       	push	r19
 71a:	4f 93       	push	r20
 71c:	5f 93       	push	r21
 71e:	6f 93       	push	r22
 720:	7f 93       	push	r23
 722:	8f 93       	push	r24
 724:	9f 93       	push	r25
 726:	af 93       	push	r26
 728:	bf 93       	push	r27
 72a:	ef 93       	push	r30
 72c:	ff 93       	push	r31
	if(ECHO_PIN_LEFT & (1<<ECHO_LEFT)) // 상승 에지 
 72e:	0c 9b       	sbis	0x01, 4	; 1
 730:	05 c0       	rjmp	.+10     	; 0x73c <__vector_5+0x34>
	{
		TCNT3 = 0;						// 상승 일 때 Clear 
 732:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 736:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 73a:	20 c0       	rjmp	.+64     	; 0x77c <__vector_5+0x74>
	}	
	else					// 하강 에지
	{
		// 에코핀의 펄스 길이를 us 단위로 환산 
		ultrasonic_left_distance = (1000000.0 * TCNT3 * 1024 / F_CPU)/ 58;
 73c:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 740:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	ec d1       	rcall	.+984    	; 0xb22 <__floatunsisf>
 74a:	20 e0       	ldi	r18, 0x00	; 0
 74c:	34 e2       	ldi	r19, 0x24	; 36
 74e:	44 e7       	ldi	r20, 0x74	; 116
 750:	59 e4       	ldi	r21, 0x49	; 73
 752:	75 d2       	rcall	.+1258   	; 0xc3e <__mulsf3>
 754:	20 e0       	ldi	r18, 0x00	; 0
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	40 e8       	ldi	r20, 0x80	; 128
 75a:	54 e4       	ldi	r21, 0x44	; 68
 75c:	70 d2       	rcall	.+1248   	; 0xc3e <__mulsf3>
 75e:	20 e0       	ldi	r18, 0x00	; 0
 760:	34 e2       	ldi	r19, 0x24	; 36
 762:	44 e7       	ldi	r20, 0x74	; 116
 764:	5b e4       	ldi	r21, 0x4B	; 75
 766:	44 d1       	rcall	.+648    	; 0x9f0 <__divsf3>
 768:	20 e0       	ldi	r18, 0x00	; 0
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	48 e6       	ldi	r20, 0x68	; 104
 76e:	52 e4       	ldi	r21, 0x42	; 66
 770:	3f d1       	rcall	.+638    	; 0x9f0 <__divsf3>
 772:	a6 d1       	rcall	.+844    	; 0xac0 <__fixsfsi>
 774:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <ultrasonic_left_distance+0x1>
 778:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <ultrasonic_left_distance>
		// 1cm : 58us 소요 
	}
}
 77c:	ff 91       	pop	r31
 77e:	ef 91       	pop	r30
 780:	bf 91       	pop	r27
 782:	af 91       	pop	r26
 784:	9f 91       	pop	r25
 786:	8f 91       	pop	r24
 788:	7f 91       	pop	r23
 78a:	6f 91       	pop	r22
 78c:	5f 91       	pop	r21
 78e:	4f 91       	pop	r20
 790:	3f 91       	pop	r19
 792:	2f 91       	pop	r18
 794:	0f 90       	pop	r0
 796:	0b be       	out	0x3b, r0	; 59
 798:	0f 90       	pop	r0
 79a:	0f be       	out	0x3f, r0	; 63
 79c:	0f 90       	pop	r0
 79e:	1f 90       	pop	r1
 7a0:	18 95       	reti

000007a2 <__vector_6>:
// 외부 INT 5번 : 중앙의 초음파 센서 
ISR(INT5_vect)
{
 7a2:	1f 92       	push	r1
 7a4:	0f 92       	push	r0
 7a6:	0f b6       	in	r0, 0x3f	; 63
 7a8:	0f 92       	push	r0
 7aa:	11 24       	eor	r1, r1
 7ac:	0b b6       	in	r0, 0x3b	; 59
 7ae:	0f 92       	push	r0
 7b0:	2f 93       	push	r18
 7b2:	3f 93       	push	r19
 7b4:	4f 93       	push	r20
 7b6:	5f 93       	push	r21
 7b8:	6f 93       	push	r22
 7ba:	7f 93       	push	r23
 7bc:	8f 93       	push	r24
 7be:	9f 93       	push	r25
 7c0:	af 93       	push	r26
 7c2:	bf 93       	push	r27
 7c4:	ef 93       	push	r30
 7c6:	ff 93       	push	r31
	if(ECHO_PIN_CENTER & (1<<ECHO_CENTER)) // 상승 에지
 7c8:	0d 9b       	sbis	0x01, 5	; 1
 7ca:	05 c0       	rjmp	.+10     	; 0x7d6 <__vector_6+0x34>
	{
		TCNT3 = 0;						// 상승 일 때 Clear
 7cc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 7d0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 7d4:	20 c0       	rjmp	.+64     	; 0x816 <__vector_6+0x74>
	}
	else					// 하강 에지
	{
		// 에코핀의 펄스 길이를 us 단위로 환산
		ultrasonic_center_distance = (1000000.0 * TCNT3 * 1024 / F_CPU)/ 58;
 7d6:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 7da:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 7de:	80 e0       	ldi	r24, 0x00	; 0
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	9f d1       	rcall	.+830    	; 0xb22 <__floatunsisf>
 7e4:	20 e0       	ldi	r18, 0x00	; 0
 7e6:	34 e2       	ldi	r19, 0x24	; 36
 7e8:	44 e7       	ldi	r20, 0x74	; 116
 7ea:	59 e4       	ldi	r21, 0x49	; 73
 7ec:	28 d2       	rcall	.+1104   	; 0xc3e <__mulsf3>
 7ee:	20 e0       	ldi	r18, 0x00	; 0
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	40 e8       	ldi	r20, 0x80	; 128
 7f4:	54 e4       	ldi	r21, 0x44	; 68
 7f6:	23 d2       	rcall	.+1094   	; 0xc3e <__mulsf3>
 7f8:	20 e0       	ldi	r18, 0x00	; 0
 7fa:	34 e2       	ldi	r19, 0x24	; 36
 7fc:	44 e7       	ldi	r20, 0x74	; 116
 7fe:	5b e4       	ldi	r21, 0x4B	; 75
 800:	f7 d0       	rcall	.+494    	; 0x9f0 <__divsf3>
 802:	20 e0       	ldi	r18, 0x00	; 0
 804:	30 e0       	ldi	r19, 0x00	; 0
 806:	48 e6       	ldi	r20, 0x68	; 104
 808:	52 e4       	ldi	r21, 0x42	; 66
 80a:	f2 d0       	rcall	.+484    	; 0x9f0 <__divsf3>
 80c:	59 d1       	rcall	.+690    	; 0xac0 <__fixsfsi>
 80e:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <ultrasonic_center_distance+0x1>
 812:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <ultrasonic_center_distance>
		// 1cm : 58us 소요
	}
}
 816:	ff 91       	pop	r31
 818:	ef 91       	pop	r30
 81a:	bf 91       	pop	r27
 81c:	af 91       	pop	r26
 81e:	9f 91       	pop	r25
 820:	8f 91       	pop	r24
 822:	7f 91       	pop	r23
 824:	6f 91       	pop	r22
 826:	5f 91       	pop	r21
 828:	4f 91       	pop	r20
 82a:	3f 91       	pop	r19
 82c:	2f 91       	pop	r18
 82e:	0f 90       	pop	r0
 830:	0b be       	out	0x3b, r0	; 59
 832:	0f 90       	pop	r0
 834:	0f be       	out	0x3f, r0	; 63
 836:	0f 90       	pop	r0
 838:	1f 90       	pop	r1
 83a:	18 95       	reti

0000083c <__vector_7>:

ISR(INT6_vect)
{
 83c:	1f 92       	push	r1
 83e:	0f 92       	push	r0
 840:	0f b6       	in	r0, 0x3f	; 63
 842:	0f 92       	push	r0
 844:	11 24       	eor	r1, r1
 846:	0b b6       	in	r0, 0x3b	; 59
 848:	0f 92       	push	r0
 84a:	2f 93       	push	r18
 84c:	3f 93       	push	r19
 84e:	4f 93       	push	r20
 850:	5f 93       	push	r21
 852:	6f 93       	push	r22
 854:	7f 93       	push	r23
 856:	8f 93       	push	r24
 858:	9f 93       	push	r25
 85a:	af 93       	push	r26
 85c:	bf 93       	push	r27
 85e:	ef 93       	push	r30
 860:	ff 93       	push	r31
	if(ECHO_PIN_RIGHT & (1 << ECHO_RIGHT)) // 상승 에지
 862:	0e 9b       	sbis	0x01, 6	; 1
 864:	05 c0       	rjmp	.+10     	; 0x870 <__vector_7+0x34>
	{
		TCNT3 = 0;						// 상승 일 때 Clear
 866:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 86a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 86e:	20 c0       	rjmp	.+64     	; 0x8b0 <__vector_7+0x74>
	}
	else					// 하강 에지
	{
		// 에코핀의 펄스 길이를 us 단위로 환산
		ultrasonic_right_distance = (1000000.0 * TCNT3 * 1024 / F_CPU)/ 58;
 870:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 874:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 878:	80 e0       	ldi	r24, 0x00	; 0
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	52 d1       	rcall	.+676    	; 0xb22 <__floatunsisf>
 87e:	20 e0       	ldi	r18, 0x00	; 0
 880:	34 e2       	ldi	r19, 0x24	; 36
 882:	44 e7       	ldi	r20, 0x74	; 116
 884:	59 e4       	ldi	r21, 0x49	; 73
 886:	db d1       	rcall	.+950    	; 0xc3e <__mulsf3>
 888:	20 e0       	ldi	r18, 0x00	; 0
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	40 e8       	ldi	r20, 0x80	; 128
 88e:	54 e4       	ldi	r21, 0x44	; 68
 890:	d6 d1       	rcall	.+940    	; 0xc3e <__mulsf3>
 892:	20 e0       	ldi	r18, 0x00	; 0
 894:	34 e2       	ldi	r19, 0x24	; 36
 896:	44 e7       	ldi	r20, 0x74	; 116
 898:	5b e4       	ldi	r21, 0x4B	; 75
 89a:	aa d0       	rcall	.+340    	; 0x9f0 <__divsf3>
 89c:	20 e0       	ldi	r18, 0x00	; 0
 89e:	30 e0       	ldi	r19, 0x00	; 0
 8a0:	48 e6       	ldi	r20, 0x68	; 104
 8a2:	52 e4       	ldi	r21, 0x42	; 66
 8a4:	a5 d0       	rcall	.+330    	; 0x9f0 <__divsf3>
 8a6:	0c d1       	rcall	.+536    	; 0xac0 <__fixsfsi>
 8a8:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <ultrasonic_right_distance+0x1>
 8ac:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <ultrasonic_right_distance>
		// 1cm : 58us 소요
	}
}
 8b0:	ff 91       	pop	r31
 8b2:	ef 91       	pop	r30
 8b4:	bf 91       	pop	r27
 8b6:	af 91       	pop	r26
 8b8:	9f 91       	pop	r25
 8ba:	8f 91       	pop	r24
 8bc:	7f 91       	pop	r23
 8be:	6f 91       	pop	r22
 8c0:	5f 91       	pop	r21
 8c2:	4f 91       	pop	r20
 8c4:	3f 91       	pop	r19
 8c6:	2f 91       	pop	r18
 8c8:	0f 90       	pop	r0
 8ca:	0b be       	out	0x3b, r0	; 59
 8cc:	0f 90       	pop	r0
 8ce:	0f be       	out	0x3f, r0	; 63
 8d0:	0f 90       	pop	r0
 8d2:	1f 90       	pop	r1
 8d4:	18 95       	reti

000008d6 <init_ultrasonic>:

// 초음파 센서 초기화 함수
void init_ultrasonic()
{
	//==============================================LEFT Ultra Sonic==================================
	TRIG_DDR_LEFT |= (1<< TRIG_LEFT);		// 출력으로
 8d6:	8a b3       	in	r24, 0x1a	; 26
 8d8:	81 60       	ori	r24, 0x01	; 1
 8da:	8a bb       	out	0x1a, r24	; 26
	ECHO_DDR_LEFT &= ~(1 << ECHO_LEFT);	// 입력으로 사용 
 8dc:	82 b1       	in	r24, 0x02	; 2
 8de:	8f 7e       	andi	r24, 0xEF	; 239
 8e0:	82 b9       	out	0x02, r24	; 2
	
	// EICRA : INT 0~3 
	// EICRB : INT 4~7
	// 0 1 : 어떠한 신호의 변화가 있든지 INT를 요청 한다. (상승, 하강 에지 둘다 INT 발생)
	EICRB |= (0 << ISC41) | (1 << ISC40); 
 8e2:	8a b7       	in	r24, 0x3a	; 58
 8e4:	81 60       	ori	r24, 0x01	; 1
 8e6:	8a bf       	out	0x3a, r24	; 58
	TCCR3B |=(1<<CS32) | (1 << CS30);	// 1024분주 
 8e8:	ea e8       	ldi	r30, 0x8A	; 138
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	80 81       	ld	r24, Z
 8ee:	85 60       	ori	r24, 0x05	; 5
 8f0:	80 83       	st	Z, r24
	// 16비트 timmer 1번을 1024 분주 해서 공급 
	// 16MHz를 1024분주 한다. >> 15625 ==> 15.625kHz
	// 1펄스의 길이 : t = 1/f = 1/15625 = 0.000064 > 64us  
	
	EIMSK |= (1 << INT4); // 외부 INT4(ECHO) 사용
 8f2:	89 b7       	in	r24, 0x39	; 57
 8f4:	80 61       	ori	r24, 0x10	; 16
 8f6:	89 bf       	out	0x39, r24	; 57
	
	//==============================================CENTER Ultra Sonic==================================
	TRIG_DDR_CENTER |= (1<< TRIG_CENTER);		// 출력으로
 8f8:	8a b3       	in	r24, 0x1a	; 26
 8fa:	82 60       	ori	r24, 0x02	; 2
 8fc:	8a bb       	out	0x1a, r24	; 26
	ECHO_DDR_CENTER &= ~(1 << ECHO_CENTER);	// 입력으로 사용
 8fe:	82 b1       	in	r24, 0x02	; 2
 900:	8f 7d       	andi	r24, 0xDF	; 223
 902:	82 b9       	out	0x02, r24	; 2
	
	// EICRA : INT 0~3
	// EICRB : INT 4~7
	// 0 1 : 어떠한 신호의 변화가 있든지 INT를 요청 한다. (상승, 하강 에지 둘다 INT 발생)
	EICRB |= (0 << ISC51) | (1 << ISC50);
 904:	8a b7       	in	r24, 0x3a	; 58
 906:	84 60       	ori	r24, 0x04	; 4
 908:	8a bf       	out	0x3a, r24	; 58
	TCCR3B |=(1<<CS32) | (1 << CS30);	// 1024분주
 90a:	80 81       	ld	r24, Z
 90c:	85 60       	ori	r24, 0x05	; 5
 90e:	80 83       	st	Z, r24
	// 16비트 timmer 1번을 1024 분주 해서 공급
	// 16MHz를 1024분주 한다. >> 15625 ==> 15.625kHz
	// 1펄스의 길이 : t = 1/f = 1/15625 = 0.000064 > 64us
	
	EIMSK |= (1 << INT5); // 외부 INT5(ECHO) 사용
 910:	89 b7       	in	r24, 0x39	; 57
 912:	80 62       	ori	r24, 0x20	; 32
 914:	89 bf       	out	0x39, r24	; 57
	
	//==============================================RIGHT Ultra Sonic==================================
	TRIG_DDR_RIGHT |= (1<< TRIG_RIGHT);		// 출력으로
 916:	8a b3       	in	r24, 0x1a	; 26
 918:	84 60       	ori	r24, 0x04	; 4
 91a:	8a bb       	out	0x1a, r24	; 26
	ECHO_DDR_RIGHT &= ~(1 << ECHO_RIGHT);	// 입력으로 사용
 91c:	82 b1       	in	r24, 0x02	; 2
 91e:	8f 7b       	andi	r24, 0xBF	; 191
 920:	82 b9       	out	0x02, r24	; 2
	
	// EICRA : INT 0~3
	// EICRB : INT 4~7
	// 0 1 : 어떠한 신호의 변화가 있든지 INT를 요청 한다. (상승, 하강 에지 둘다 INT 발생)
	EICRB |= (0 << ISC61) | (1 << ISC60);
 922:	8a b7       	in	r24, 0x3a	; 58
 924:	80 61       	ori	r24, 0x10	; 16
 926:	8a bf       	out	0x3a, r24	; 58
	TCCR3B |=(1<<CS32) | (1 << CS30);	// 1024분주
 928:	80 81       	ld	r24, Z
 92a:	85 60       	ori	r24, 0x05	; 5
 92c:	80 83       	st	Z, r24
	// 16비트 timmer 1번을 1024 분주 해서 공급
	// 16MHz를 1024분주 한다. >> 15625 ==> 15.625kHz
	// 1펄스의 길이 : t = 1/f = 1/15625 = 0.000064 > 64us
	
	EIMSK |= (1 << INT6); // 외부 INT6(ECHO) 사용
 92e:	89 b7       	in	r24, 0x39	; 57
 930:	80 64       	ori	r24, 0x40	; 64
 932:	89 bf       	out	0x39, r24	; 57
 934:	08 95       	ret

00000936 <ultrasonic_trigger>:
}

void ultrasonic_trigger()
{
	 
	switch(ms_count50)
 936:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ms_count50>
 93a:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <ms_count50+0x1>
 93e:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <ms_count50+0x2>
 942:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <ms_count50+0x3>
 946:	81 30       	cpi	r24, 0x01	; 1
 948:	91 05       	cpc	r25, r1
 94a:	a1 05       	cpc	r26, r1
 94c:	b1 05       	cpc	r27, r1
 94e:	b9 f0       	breq	.+46     	; 0x97e <ultrasonic_trigger+0x48>
 950:	28 f0       	brcs	.+10     	; 0x95c <ultrasonic_trigger+0x26>
 952:	02 97       	sbiw	r24, 0x02	; 2
 954:	a1 05       	cpc	r26, r1
 956:	b1 05       	cpc	r27, r1
 958:	19 f1       	breq	.+70     	; 0x9a0 <ultrasonic_trigger+0x6a>
 95a:	32 c0       	rjmp	.+100    	; 0x9c0 <ultrasonic_trigger+0x8a>
	{
		case 0 : 
		//============================LEFT==============================
		TRIG_PORT_LEFT &= ~(1 << TRIG_LEFT); // low
 95c:	8b b3       	in	r24, 0x1b	; 27
 95e:	8e 7f       	andi	r24, 0xFE	; 254
 960:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 962:	85 e0       	ldi	r24, 0x05	; 5
 964:	8a 95       	dec	r24
 966:	f1 f7       	brne	.-4      	; 0x964 <ultrasonic_trigger+0x2e>
 968:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_LEFT |= (1 << TRIG_LEFT); // high
 96a:	8b b3       	in	r24, 0x1b	; 27
 96c:	81 60       	ori	r24, 0x01	; 1
 96e:	8b bb       	out	0x1b, r24	; 27
 970:	80 e5       	ldi	r24, 0x50	; 80
 972:	8a 95       	dec	r24
 974:	f1 f7       	brne	.-4      	; 0x972 <ultrasonic_trigger+0x3c>
		_delay_us(15);
		TRIG_PORT_LEFT &= ~(1 << TRIG_LEFT); // low
 976:	8b b3       	in	r24, 0x1b	; 27
 978:	8e 7f       	andi	r24, 0xFE	; 254
 97a:	8b bb       	out	0x1b, r24	; 27
		
		// 초음파 센서 Echo 응답 시간 최대 38ms
		// _delay_ms를 timer INT로 처리한다. Delay가 있어서는 안됨
		// 현재는 demo code 지만 timer 처리 예정
		break;
 97c:	21 c0       	rjmp	.+66     	; 0x9c0 <ultrasonic_trigger+0x8a>
	
		case 1 : 
		//============================CENTER==============================
		TRIG_PORT_CENTER &= ~(1 << TRIG_CENTER); // low
 97e:	8b b3       	in	r24, 0x1b	; 27
 980:	8d 7f       	andi	r24, 0xFD	; 253
 982:	8b bb       	out	0x1b, r24	; 27
 984:	85 e0       	ldi	r24, 0x05	; 5
 986:	8a 95       	dec	r24
 988:	f1 f7       	brne	.-4      	; 0x986 <ultrasonic_trigger+0x50>
 98a:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_CENTER |= (1 << TRIG_CENTER); // high
 98c:	8b b3       	in	r24, 0x1b	; 27
 98e:	82 60       	ori	r24, 0x02	; 2
 990:	8b bb       	out	0x1b, r24	; 27
 992:	80 e5       	ldi	r24, 0x50	; 80
 994:	8a 95       	dec	r24
 996:	f1 f7       	brne	.-4      	; 0x994 <ultrasonic_trigger+0x5e>
		_delay_us(15);
		TRIG_PORT_CENTER &= ~(1 << TRIG_CENTER); // low
 998:	8b b3       	in	r24, 0x1b	; 27
 99a:	8d 7f       	andi	r24, 0xFD	; 253
 99c:	8b bb       	out	0x1b, r24	; 27
		break;
 99e:	10 c0       	rjmp	.+32     	; 0x9c0 <ultrasonic_trigger+0x8a>
		
		case 2 : 
		//============================RIGHT==============================
		TRIG_PORT_RIGHT &= ~(1 << TRIG_RIGHT); // low
 9a0:	8b b3       	in	r24, 0x1b	; 27
 9a2:	8b 7f       	andi	r24, 0xFB	; 251
 9a4:	8b bb       	out	0x1b, r24	; 27
 9a6:	85 e0       	ldi	r24, 0x05	; 5
 9a8:	8a 95       	dec	r24
 9aa:	f1 f7       	brne	.-4      	; 0x9a8 <ultrasonic_trigger+0x72>
 9ac:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_RIGHT |= (1 << TRIG_RIGHT); // high
 9ae:	8b b3       	in	r24, 0x1b	; 27
 9b0:	84 60       	ori	r24, 0x04	; 4
 9b2:	8b bb       	out	0x1b, r24	; 27
 9b4:	80 e5       	ldi	r24, 0x50	; 80
 9b6:	8a 95       	dec	r24
 9b8:	f1 f7       	brne	.-4      	; 0x9b6 <ultrasonic_trigger+0x80>
		_delay_us(15);
		TRIG_PORT_RIGHT &= ~(1 << TRIG_RIGHT); // low
 9ba:	8b b3       	in	r24, 0x1b	; 27
 9bc:	8b 7f       	andi	r24, 0xFB	; 251
 9be:	8b bb       	out	0x1b, r24	; 27
		break;
		
		// ms 단위는 Process에서 큰 단위로 적용되어 timer를 사용해 delay를 주어야 함***
	}
	
	ms_count50 = ms_count50 % 3;
 9c0:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <ms_count50>
 9c4:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <ms_count50+0x1>
 9c8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <ms_count50+0x2>
 9cc:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <ms_count50+0x3>
 9d0:	23 e0       	ldi	r18, 0x03	; 3
 9d2:	30 e0       	ldi	r19, 0x00	; 0
 9d4:	40 e0       	ldi	r20, 0x00	; 0
 9d6:	50 e0       	ldi	r21, 0x00	; 0
 9d8:	95 d1       	rcall	.+810    	; 0xd04 <__udivmodsi4>
 9da:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <ms_count50>
 9de:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <ms_count50+0x1>
 9e2:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <ms_count50+0x2>
 9e6:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <ms_count50+0x3>
 9ea:	08 95       	ret

000009ec <distance_check>:
	
	EIMSK |= (1 << INT6); // 외부 INT6(ECHO) 사용
}
void distance_check(void) // delay를 빼기 위한 함수 
{
	ultrasonic_trigger(); 
 9ec:	a4 cf       	rjmp	.-184    	; 0x936 <ultrasonic_trigger>
 9ee:	08 95       	ret

000009f0 <__divsf3>:
 9f0:	0c d0       	rcall	.+24     	; 0xa0a <__divsf3x>
 9f2:	eb c0       	rjmp	.+470    	; 0xbca <__fp_round>
 9f4:	e3 d0       	rcall	.+454    	; 0xbbc <__fp_pscB>
 9f6:	40 f0       	brcs	.+16     	; 0xa08 <__divsf3+0x18>
 9f8:	da d0       	rcall	.+436    	; 0xbae <__fp_pscA>
 9fa:	30 f0       	brcs	.+12     	; 0xa08 <__divsf3+0x18>
 9fc:	21 f4       	brne	.+8      	; 0xa06 <__divsf3+0x16>
 9fe:	5f 3f       	cpi	r21, 0xFF	; 255
 a00:	19 f0       	breq	.+6      	; 0xa08 <__divsf3+0x18>
 a02:	cc c0       	rjmp	.+408    	; 0xb9c <__fp_inf>
 a04:	51 11       	cpse	r21, r1
 a06:	15 c1       	rjmp	.+554    	; 0xc32 <__fp_szero>
 a08:	cf c0       	rjmp	.+414    	; 0xba8 <__fp_nan>

00000a0a <__divsf3x>:
 a0a:	f0 d0       	rcall	.+480    	; 0xbec <__fp_split3>
 a0c:	98 f3       	brcs	.-26     	; 0x9f4 <__divsf3+0x4>

00000a0e <__divsf3_pse>:
 a0e:	99 23       	and	r25, r25
 a10:	c9 f3       	breq	.-14     	; 0xa04 <__divsf3+0x14>
 a12:	55 23       	and	r21, r21
 a14:	b1 f3       	breq	.-20     	; 0xa02 <__divsf3+0x12>
 a16:	95 1b       	sub	r25, r21
 a18:	55 0b       	sbc	r21, r21
 a1a:	bb 27       	eor	r27, r27
 a1c:	aa 27       	eor	r26, r26
 a1e:	62 17       	cp	r22, r18
 a20:	73 07       	cpc	r23, r19
 a22:	84 07       	cpc	r24, r20
 a24:	38 f0       	brcs	.+14     	; 0xa34 <__divsf3_pse+0x26>
 a26:	9f 5f       	subi	r25, 0xFF	; 255
 a28:	5f 4f       	sbci	r21, 0xFF	; 255
 a2a:	22 0f       	add	r18, r18
 a2c:	33 1f       	adc	r19, r19
 a2e:	44 1f       	adc	r20, r20
 a30:	aa 1f       	adc	r26, r26
 a32:	a9 f3       	breq	.-22     	; 0xa1e <__divsf3_pse+0x10>
 a34:	33 d0       	rcall	.+102    	; 0xa9c <__divsf3_pse+0x8e>
 a36:	0e 2e       	mov	r0, r30
 a38:	3a f0       	brmi	.+14     	; 0xa48 <__divsf3_pse+0x3a>
 a3a:	e0 e8       	ldi	r30, 0x80	; 128
 a3c:	30 d0       	rcall	.+96     	; 0xa9e <__divsf3_pse+0x90>
 a3e:	91 50       	subi	r25, 0x01	; 1
 a40:	50 40       	sbci	r21, 0x00	; 0
 a42:	e6 95       	lsr	r30
 a44:	00 1c       	adc	r0, r0
 a46:	ca f7       	brpl	.-14     	; 0xa3a <__divsf3_pse+0x2c>
 a48:	29 d0       	rcall	.+82     	; 0xa9c <__divsf3_pse+0x8e>
 a4a:	fe 2f       	mov	r31, r30
 a4c:	27 d0       	rcall	.+78     	; 0xa9c <__divsf3_pse+0x8e>
 a4e:	66 0f       	add	r22, r22
 a50:	77 1f       	adc	r23, r23
 a52:	88 1f       	adc	r24, r24
 a54:	bb 1f       	adc	r27, r27
 a56:	26 17       	cp	r18, r22
 a58:	37 07       	cpc	r19, r23
 a5a:	48 07       	cpc	r20, r24
 a5c:	ab 07       	cpc	r26, r27
 a5e:	b0 e8       	ldi	r27, 0x80	; 128
 a60:	09 f0       	breq	.+2      	; 0xa64 <__divsf3_pse+0x56>
 a62:	bb 0b       	sbc	r27, r27
 a64:	80 2d       	mov	r24, r0
 a66:	bf 01       	movw	r22, r30
 a68:	ff 27       	eor	r31, r31
 a6a:	93 58       	subi	r25, 0x83	; 131
 a6c:	5f 4f       	sbci	r21, 0xFF	; 255
 a6e:	2a f0       	brmi	.+10     	; 0xa7a <__divsf3_pse+0x6c>
 a70:	9e 3f       	cpi	r25, 0xFE	; 254
 a72:	51 05       	cpc	r21, r1
 a74:	68 f0       	brcs	.+26     	; 0xa90 <__divsf3_pse+0x82>
 a76:	92 c0       	rjmp	.+292    	; 0xb9c <__fp_inf>
 a78:	dc c0       	rjmp	.+440    	; 0xc32 <__fp_szero>
 a7a:	5f 3f       	cpi	r21, 0xFF	; 255
 a7c:	ec f3       	brlt	.-6      	; 0xa78 <__divsf3_pse+0x6a>
 a7e:	98 3e       	cpi	r25, 0xE8	; 232
 a80:	dc f3       	brlt	.-10     	; 0xa78 <__divsf3_pse+0x6a>
 a82:	86 95       	lsr	r24
 a84:	77 95       	ror	r23
 a86:	67 95       	ror	r22
 a88:	b7 95       	ror	r27
 a8a:	f7 95       	ror	r31
 a8c:	9f 5f       	subi	r25, 0xFF	; 255
 a8e:	c9 f7       	brne	.-14     	; 0xa82 <__divsf3_pse+0x74>
 a90:	88 0f       	add	r24, r24
 a92:	91 1d       	adc	r25, r1
 a94:	96 95       	lsr	r25
 a96:	87 95       	ror	r24
 a98:	97 f9       	bld	r25, 7
 a9a:	08 95       	ret
 a9c:	e1 e0       	ldi	r30, 0x01	; 1
 a9e:	66 0f       	add	r22, r22
 aa0:	77 1f       	adc	r23, r23
 aa2:	88 1f       	adc	r24, r24
 aa4:	bb 1f       	adc	r27, r27
 aa6:	62 17       	cp	r22, r18
 aa8:	73 07       	cpc	r23, r19
 aaa:	84 07       	cpc	r24, r20
 aac:	ba 07       	cpc	r27, r26
 aae:	20 f0       	brcs	.+8      	; 0xab8 <__divsf3_pse+0xaa>
 ab0:	62 1b       	sub	r22, r18
 ab2:	73 0b       	sbc	r23, r19
 ab4:	84 0b       	sbc	r24, r20
 ab6:	ba 0b       	sbc	r27, r26
 ab8:	ee 1f       	adc	r30, r30
 aba:	88 f7       	brcc	.-30     	; 0xa9e <__divsf3_pse+0x90>
 abc:	e0 95       	com	r30
 abe:	08 95       	ret

00000ac0 <__fixsfsi>:
 ac0:	04 d0       	rcall	.+8      	; 0xaca <__fixunssfsi>
 ac2:	68 94       	set
 ac4:	b1 11       	cpse	r27, r1
 ac6:	b5 c0       	rjmp	.+362    	; 0xc32 <__fp_szero>
 ac8:	08 95       	ret

00000aca <__fixunssfsi>:
 aca:	98 d0       	rcall	.+304    	; 0xbfc <__fp_splitA>
 acc:	88 f0       	brcs	.+34     	; 0xaf0 <__fixunssfsi+0x26>
 ace:	9f 57       	subi	r25, 0x7F	; 127
 ad0:	90 f0       	brcs	.+36     	; 0xaf6 <__fixunssfsi+0x2c>
 ad2:	b9 2f       	mov	r27, r25
 ad4:	99 27       	eor	r25, r25
 ad6:	b7 51       	subi	r27, 0x17	; 23
 ad8:	a0 f0       	brcs	.+40     	; 0xb02 <__fixunssfsi+0x38>
 ada:	d1 f0       	breq	.+52     	; 0xb10 <__fixunssfsi+0x46>
 adc:	66 0f       	add	r22, r22
 ade:	77 1f       	adc	r23, r23
 ae0:	88 1f       	adc	r24, r24
 ae2:	99 1f       	adc	r25, r25
 ae4:	1a f0       	brmi	.+6      	; 0xaec <__fixunssfsi+0x22>
 ae6:	ba 95       	dec	r27
 ae8:	c9 f7       	brne	.-14     	; 0xadc <__fixunssfsi+0x12>
 aea:	12 c0       	rjmp	.+36     	; 0xb10 <__fixunssfsi+0x46>
 aec:	b1 30       	cpi	r27, 0x01	; 1
 aee:	81 f0       	breq	.+32     	; 0xb10 <__fixunssfsi+0x46>
 af0:	9f d0       	rcall	.+318    	; 0xc30 <__fp_zero>
 af2:	b1 e0       	ldi	r27, 0x01	; 1
 af4:	08 95       	ret
 af6:	9c c0       	rjmp	.+312    	; 0xc30 <__fp_zero>
 af8:	67 2f       	mov	r22, r23
 afa:	78 2f       	mov	r23, r24
 afc:	88 27       	eor	r24, r24
 afe:	b8 5f       	subi	r27, 0xF8	; 248
 b00:	39 f0       	breq	.+14     	; 0xb10 <__fixunssfsi+0x46>
 b02:	b9 3f       	cpi	r27, 0xF9	; 249
 b04:	cc f3       	brlt	.-14     	; 0xaf8 <__fixunssfsi+0x2e>
 b06:	86 95       	lsr	r24
 b08:	77 95       	ror	r23
 b0a:	67 95       	ror	r22
 b0c:	b3 95       	inc	r27
 b0e:	d9 f7       	brne	.-10     	; 0xb06 <__fixunssfsi+0x3c>
 b10:	3e f4       	brtc	.+14     	; 0xb20 <__fixunssfsi+0x56>
 b12:	90 95       	com	r25
 b14:	80 95       	com	r24
 b16:	70 95       	com	r23
 b18:	61 95       	neg	r22
 b1a:	7f 4f       	sbci	r23, 0xFF	; 255
 b1c:	8f 4f       	sbci	r24, 0xFF	; 255
 b1e:	9f 4f       	sbci	r25, 0xFF	; 255
 b20:	08 95       	ret

00000b22 <__floatunsisf>:
 b22:	e8 94       	clt
 b24:	09 c0       	rjmp	.+18     	; 0xb38 <__floatsisf+0x12>

00000b26 <__floatsisf>:
 b26:	97 fb       	bst	r25, 7
 b28:	3e f4       	brtc	.+14     	; 0xb38 <__floatsisf+0x12>
 b2a:	90 95       	com	r25
 b2c:	80 95       	com	r24
 b2e:	70 95       	com	r23
 b30:	61 95       	neg	r22
 b32:	7f 4f       	sbci	r23, 0xFF	; 255
 b34:	8f 4f       	sbci	r24, 0xFF	; 255
 b36:	9f 4f       	sbci	r25, 0xFF	; 255
 b38:	99 23       	and	r25, r25
 b3a:	a9 f0       	breq	.+42     	; 0xb66 <__floatsisf+0x40>
 b3c:	f9 2f       	mov	r31, r25
 b3e:	96 e9       	ldi	r25, 0x96	; 150
 b40:	bb 27       	eor	r27, r27
 b42:	93 95       	inc	r25
 b44:	f6 95       	lsr	r31
 b46:	87 95       	ror	r24
 b48:	77 95       	ror	r23
 b4a:	67 95       	ror	r22
 b4c:	b7 95       	ror	r27
 b4e:	f1 11       	cpse	r31, r1
 b50:	f8 cf       	rjmp	.-16     	; 0xb42 <__floatsisf+0x1c>
 b52:	fa f4       	brpl	.+62     	; 0xb92 <__floatsisf+0x6c>
 b54:	bb 0f       	add	r27, r27
 b56:	11 f4       	brne	.+4      	; 0xb5c <__floatsisf+0x36>
 b58:	60 ff       	sbrs	r22, 0
 b5a:	1b c0       	rjmp	.+54     	; 0xb92 <__floatsisf+0x6c>
 b5c:	6f 5f       	subi	r22, 0xFF	; 255
 b5e:	7f 4f       	sbci	r23, 0xFF	; 255
 b60:	8f 4f       	sbci	r24, 0xFF	; 255
 b62:	9f 4f       	sbci	r25, 0xFF	; 255
 b64:	16 c0       	rjmp	.+44     	; 0xb92 <__floatsisf+0x6c>
 b66:	88 23       	and	r24, r24
 b68:	11 f0       	breq	.+4      	; 0xb6e <__floatsisf+0x48>
 b6a:	96 e9       	ldi	r25, 0x96	; 150
 b6c:	11 c0       	rjmp	.+34     	; 0xb90 <__floatsisf+0x6a>
 b6e:	77 23       	and	r23, r23
 b70:	21 f0       	breq	.+8      	; 0xb7a <__floatsisf+0x54>
 b72:	9e e8       	ldi	r25, 0x8E	; 142
 b74:	87 2f       	mov	r24, r23
 b76:	76 2f       	mov	r23, r22
 b78:	05 c0       	rjmp	.+10     	; 0xb84 <__floatsisf+0x5e>
 b7a:	66 23       	and	r22, r22
 b7c:	71 f0       	breq	.+28     	; 0xb9a <__floatsisf+0x74>
 b7e:	96 e8       	ldi	r25, 0x86	; 134
 b80:	86 2f       	mov	r24, r22
 b82:	70 e0       	ldi	r23, 0x00	; 0
 b84:	60 e0       	ldi	r22, 0x00	; 0
 b86:	2a f0       	brmi	.+10     	; 0xb92 <__floatsisf+0x6c>
 b88:	9a 95       	dec	r25
 b8a:	66 0f       	add	r22, r22
 b8c:	77 1f       	adc	r23, r23
 b8e:	88 1f       	adc	r24, r24
 b90:	da f7       	brpl	.-10     	; 0xb88 <__floatsisf+0x62>
 b92:	88 0f       	add	r24, r24
 b94:	96 95       	lsr	r25
 b96:	87 95       	ror	r24
 b98:	97 f9       	bld	r25, 7
 b9a:	08 95       	ret

00000b9c <__fp_inf>:
 b9c:	97 f9       	bld	r25, 7
 b9e:	9f 67       	ori	r25, 0x7F	; 127
 ba0:	80 e8       	ldi	r24, 0x80	; 128
 ba2:	70 e0       	ldi	r23, 0x00	; 0
 ba4:	60 e0       	ldi	r22, 0x00	; 0
 ba6:	08 95       	ret

00000ba8 <__fp_nan>:
 ba8:	9f ef       	ldi	r25, 0xFF	; 255
 baa:	80 ec       	ldi	r24, 0xC0	; 192
 bac:	08 95       	ret

00000bae <__fp_pscA>:
 bae:	00 24       	eor	r0, r0
 bb0:	0a 94       	dec	r0
 bb2:	16 16       	cp	r1, r22
 bb4:	17 06       	cpc	r1, r23
 bb6:	18 06       	cpc	r1, r24
 bb8:	09 06       	cpc	r0, r25
 bba:	08 95       	ret

00000bbc <__fp_pscB>:
 bbc:	00 24       	eor	r0, r0
 bbe:	0a 94       	dec	r0
 bc0:	12 16       	cp	r1, r18
 bc2:	13 06       	cpc	r1, r19
 bc4:	14 06       	cpc	r1, r20
 bc6:	05 06       	cpc	r0, r21
 bc8:	08 95       	ret

00000bca <__fp_round>:
 bca:	09 2e       	mov	r0, r25
 bcc:	03 94       	inc	r0
 bce:	00 0c       	add	r0, r0
 bd0:	11 f4       	brne	.+4      	; 0xbd6 <__fp_round+0xc>
 bd2:	88 23       	and	r24, r24
 bd4:	52 f0       	brmi	.+20     	; 0xbea <__fp_round+0x20>
 bd6:	bb 0f       	add	r27, r27
 bd8:	40 f4       	brcc	.+16     	; 0xbea <__fp_round+0x20>
 bda:	bf 2b       	or	r27, r31
 bdc:	11 f4       	brne	.+4      	; 0xbe2 <__fp_round+0x18>
 bde:	60 ff       	sbrs	r22, 0
 be0:	04 c0       	rjmp	.+8      	; 0xbea <__fp_round+0x20>
 be2:	6f 5f       	subi	r22, 0xFF	; 255
 be4:	7f 4f       	sbci	r23, 0xFF	; 255
 be6:	8f 4f       	sbci	r24, 0xFF	; 255
 be8:	9f 4f       	sbci	r25, 0xFF	; 255
 bea:	08 95       	ret

00000bec <__fp_split3>:
 bec:	57 fd       	sbrc	r21, 7
 bee:	90 58       	subi	r25, 0x80	; 128
 bf0:	44 0f       	add	r20, r20
 bf2:	55 1f       	adc	r21, r21
 bf4:	59 f0       	breq	.+22     	; 0xc0c <__fp_splitA+0x10>
 bf6:	5f 3f       	cpi	r21, 0xFF	; 255
 bf8:	71 f0       	breq	.+28     	; 0xc16 <__fp_splitA+0x1a>
 bfa:	47 95       	ror	r20

00000bfc <__fp_splitA>:
 bfc:	88 0f       	add	r24, r24
 bfe:	97 fb       	bst	r25, 7
 c00:	99 1f       	adc	r25, r25
 c02:	61 f0       	breq	.+24     	; 0xc1c <__fp_splitA+0x20>
 c04:	9f 3f       	cpi	r25, 0xFF	; 255
 c06:	79 f0       	breq	.+30     	; 0xc26 <__fp_splitA+0x2a>
 c08:	87 95       	ror	r24
 c0a:	08 95       	ret
 c0c:	12 16       	cp	r1, r18
 c0e:	13 06       	cpc	r1, r19
 c10:	14 06       	cpc	r1, r20
 c12:	55 1f       	adc	r21, r21
 c14:	f2 cf       	rjmp	.-28     	; 0xbfa <__fp_split3+0xe>
 c16:	46 95       	lsr	r20
 c18:	f1 df       	rcall	.-30     	; 0xbfc <__fp_splitA>
 c1a:	08 c0       	rjmp	.+16     	; 0xc2c <__fp_splitA+0x30>
 c1c:	16 16       	cp	r1, r22
 c1e:	17 06       	cpc	r1, r23
 c20:	18 06       	cpc	r1, r24
 c22:	99 1f       	adc	r25, r25
 c24:	f1 cf       	rjmp	.-30     	; 0xc08 <__fp_splitA+0xc>
 c26:	86 95       	lsr	r24
 c28:	71 05       	cpc	r23, r1
 c2a:	61 05       	cpc	r22, r1
 c2c:	08 94       	sec
 c2e:	08 95       	ret

00000c30 <__fp_zero>:
 c30:	e8 94       	clt

00000c32 <__fp_szero>:
 c32:	bb 27       	eor	r27, r27
 c34:	66 27       	eor	r22, r22
 c36:	77 27       	eor	r23, r23
 c38:	cb 01       	movw	r24, r22
 c3a:	97 f9       	bld	r25, 7
 c3c:	08 95       	ret

00000c3e <__mulsf3>:
 c3e:	0b d0       	rcall	.+22     	; 0xc56 <__mulsf3x>
 c40:	c4 cf       	rjmp	.-120    	; 0xbca <__fp_round>
 c42:	b5 df       	rcall	.-150    	; 0xbae <__fp_pscA>
 c44:	28 f0       	brcs	.+10     	; 0xc50 <__mulsf3+0x12>
 c46:	ba df       	rcall	.-140    	; 0xbbc <__fp_pscB>
 c48:	18 f0       	brcs	.+6      	; 0xc50 <__mulsf3+0x12>
 c4a:	95 23       	and	r25, r21
 c4c:	09 f0       	breq	.+2      	; 0xc50 <__mulsf3+0x12>
 c4e:	a6 cf       	rjmp	.-180    	; 0xb9c <__fp_inf>
 c50:	ab cf       	rjmp	.-170    	; 0xba8 <__fp_nan>
 c52:	11 24       	eor	r1, r1
 c54:	ee cf       	rjmp	.-36     	; 0xc32 <__fp_szero>

00000c56 <__mulsf3x>:
 c56:	ca df       	rcall	.-108    	; 0xbec <__fp_split3>
 c58:	a0 f3       	brcs	.-24     	; 0xc42 <__mulsf3+0x4>

00000c5a <__mulsf3_pse>:
 c5a:	95 9f       	mul	r25, r21
 c5c:	d1 f3       	breq	.-12     	; 0xc52 <__mulsf3+0x14>
 c5e:	95 0f       	add	r25, r21
 c60:	50 e0       	ldi	r21, 0x00	; 0
 c62:	55 1f       	adc	r21, r21
 c64:	62 9f       	mul	r22, r18
 c66:	f0 01       	movw	r30, r0
 c68:	72 9f       	mul	r23, r18
 c6a:	bb 27       	eor	r27, r27
 c6c:	f0 0d       	add	r31, r0
 c6e:	b1 1d       	adc	r27, r1
 c70:	63 9f       	mul	r22, r19
 c72:	aa 27       	eor	r26, r26
 c74:	f0 0d       	add	r31, r0
 c76:	b1 1d       	adc	r27, r1
 c78:	aa 1f       	adc	r26, r26
 c7a:	64 9f       	mul	r22, r20
 c7c:	66 27       	eor	r22, r22
 c7e:	b0 0d       	add	r27, r0
 c80:	a1 1d       	adc	r26, r1
 c82:	66 1f       	adc	r22, r22
 c84:	82 9f       	mul	r24, r18
 c86:	22 27       	eor	r18, r18
 c88:	b0 0d       	add	r27, r0
 c8a:	a1 1d       	adc	r26, r1
 c8c:	62 1f       	adc	r22, r18
 c8e:	73 9f       	mul	r23, r19
 c90:	b0 0d       	add	r27, r0
 c92:	a1 1d       	adc	r26, r1
 c94:	62 1f       	adc	r22, r18
 c96:	83 9f       	mul	r24, r19
 c98:	a0 0d       	add	r26, r0
 c9a:	61 1d       	adc	r22, r1
 c9c:	22 1f       	adc	r18, r18
 c9e:	74 9f       	mul	r23, r20
 ca0:	33 27       	eor	r19, r19
 ca2:	a0 0d       	add	r26, r0
 ca4:	61 1d       	adc	r22, r1
 ca6:	23 1f       	adc	r18, r19
 ca8:	84 9f       	mul	r24, r20
 caa:	60 0d       	add	r22, r0
 cac:	21 1d       	adc	r18, r1
 cae:	82 2f       	mov	r24, r18
 cb0:	76 2f       	mov	r23, r22
 cb2:	6a 2f       	mov	r22, r26
 cb4:	11 24       	eor	r1, r1
 cb6:	9f 57       	subi	r25, 0x7F	; 127
 cb8:	50 40       	sbci	r21, 0x00	; 0
 cba:	8a f0       	brmi	.+34     	; 0xcde <__mulsf3_pse+0x84>
 cbc:	e1 f0       	breq	.+56     	; 0xcf6 <__mulsf3_pse+0x9c>
 cbe:	88 23       	and	r24, r24
 cc0:	4a f0       	brmi	.+18     	; 0xcd4 <__mulsf3_pse+0x7a>
 cc2:	ee 0f       	add	r30, r30
 cc4:	ff 1f       	adc	r31, r31
 cc6:	bb 1f       	adc	r27, r27
 cc8:	66 1f       	adc	r22, r22
 cca:	77 1f       	adc	r23, r23
 ccc:	88 1f       	adc	r24, r24
 cce:	91 50       	subi	r25, 0x01	; 1
 cd0:	50 40       	sbci	r21, 0x00	; 0
 cd2:	a9 f7       	brne	.-22     	; 0xcbe <__mulsf3_pse+0x64>
 cd4:	9e 3f       	cpi	r25, 0xFE	; 254
 cd6:	51 05       	cpc	r21, r1
 cd8:	70 f0       	brcs	.+28     	; 0xcf6 <__mulsf3_pse+0x9c>
 cda:	60 cf       	rjmp	.-320    	; 0xb9c <__fp_inf>
 cdc:	aa cf       	rjmp	.-172    	; 0xc32 <__fp_szero>
 cde:	5f 3f       	cpi	r21, 0xFF	; 255
 ce0:	ec f3       	brlt	.-6      	; 0xcdc <__mulsf3_pse+0x82>
 ce2:	98 3e       	cpi	r25, 0xE8	; 232
 ce4:	dc f3       	brlt	.-10     	; 0xcdc <__mulsf3_pse+0x82>
 ce6:	86 95       	lsr	r24
 ce8:	77 95       	ror	r23
 cea:	67 95       	ror	r22
 cec:	b7 95       	ror	r27
 cee:	f7 95       	ror	r31
 cf0:	e7 95       	ror	r30
 cf2:	9f 5f       	subi	r25, 0xFF	; 255
 cf4:	c1 f7       	brne	.-16     	; 0xce6 <__mulsf3_pse+0x8c>
 cf6:	fe 2b       	or	r31, r30
 cf8:	88 0f       	add	r24, r24
 cfa:	91 1d       	adc	r25, r1
 cfc:	96 95       	lsr	r25
 cfe:	87 95       	ror	r24
 d00:	97 f9       	bld	r25, 7
 d02:	08 95       	ret

00000d04 <__udivmodsi4>:
 d04:	a1 e2       	ldi	r26, 0x21	; 33
 d06:	1a 2e       	mov	r1, r26
 d08:	aa 1b       	sub	r26, r26
 d0a:	bb 1b       	sub	r27, r27
 d0c:	fd 01       	movw	r30, r26
 d0e:	0d c0       	rjmp	.+26     	; 0xd2a <__udivmodsi4_ep>

00000d10 <__udivmodsi4_loop>:
 d10:	aa 1f       	adc	r26, r26
 d12:	bb 1f       	adc	r27, r27
 d14:	ee 1f       	adc	r30, r30
 d16:	ff 1f       	adc	r31, r31
 d18:	a2 17       	cp	r26, r18
 d1a:	b3 07       	cpc	r27, r19
 d1c:	e4 07       	cpc	r30, r20
 d1e:	f5 07       	cpc	r31, r21
 d20:	20 f0       	brcs	.+8      	; 0xd2a <__udivmodsi4_ep>
 d22:	a2 1b       	sub	r26, r18
 d24:	b3 0b       	sbc	r27, r19
 d26:	e4 0b       	sbc	r30, r20
 d28:	f5 0b       	sbc	r31, r21

00000d2a <__udivmodsi4_ep>:
 d2a:	66 1f       	adc	r22, r22
 d2c:	77 1f       	adc	r23, r23
 d2e:	88 1f       	adc	r24, r24
 d30:	99 1f       	adc	r25, r25
 d32:	1a 94       	dec	r1
 d34:	69 f7       	brne	.-38     	; 0xd10 <__udivmodsi4_loop>
 d36:	60 95       	com	r22
 d38:	70 95       	com	r23
 d3a:	80 95       	com	r24
 d3c:	90 95       	com	r25
 d3e:	9b 01       	movw	r18, r22
 d40:	ac 01       	movw	r20, r24
 d42:	bd 01       	movw	r22, r26
 d44:	cf 01       	movw	r24, r30
 d46:	08 95       	ret

00000d48 <_exit>:
 d48:	f8 94       	cli

00000d4a <__stop_program>:
 d4a:	ff cf       	rjmp	.-2      	; 0xd4a <__stop_program>
