
ultra.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800100  00001d1a  00001dae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011f  008001d0  008001d0  00001e7e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001edc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00001f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d29  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001541  00000000  00000000  00004f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001870  00000000  00000000  0000644e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  00007cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009da  00000000  00000000  000082a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f2d  00000000  00000000  00008c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00009ba7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	53 c0       	rjmp	.+166    	; 0xa8 <__ctors_end>
       2:	00 00       	nop
       4:	6f c0       	rjmp	.+222    	; 0xe4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c0       	rjmp	.+218    	; 0xe4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c0       	rjmp	.+214    	; 0xe4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c0       	rjmp	.+210    	; 0xe4 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__vector_5>
      18:	65 c0       	rjmp	.+202    	; 0xe4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c0       	rjmp	.+198    	; 0xe4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c0       	rjmp	.+194    	; 0xe4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c0       	rjmp	.+190    	; 0xe4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c0       	rjmp	.+186    	; 0xe4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c0       	rjmp	.+182    	; 0xe4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	59 c0       	rjmp	.+178    	; 0xe4 <__bad_interrupt>
      32:	00 00       	nop
      34:	57 c0       	rjmp	.+174    	; 0xe4 <__bad_interrupt>
      36:	00 00       	nop
      38:	55 c0       	rjmp	.+170    	; 0xe4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c0       	rjmp	.+166    	; 0xe4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	14 c4       	rjmp	.+2088   	; 0x86a <__vector_16>
      42:	00 00       	nop
      44:	4f c0       	rjmp	.+158    	; 0xe4 <__bad_interrupt>
      46:	00 00       	nop
      48:	e9 c6       	rjmp	.+3538   	; 0xe1c <__vector_18>
      4a:	00 00       	nop
      4c:	4b c0       	rjmp	.+150    	; 0xe4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c0       	rjmp	.+146    	; 0xe4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c0       	rjmp	.+142    	; 0xe4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c0       	rjmp	.+138    	; 0xe4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c0       	rjmp	.+134    	; 0xe4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c0       	rjmp	.+130    	; 0xe4 <__bad_interrupt>
      62:	00 00       	nop
      64:	3f c0       	rjmp	.+126    	; 0xe4 <__bad_interrupt>
      66:	00 00       	nop
      68:	3d c0       	rjmp	.+122    	; 0xe4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3b c0       	rjmp	.+118    	; 0xe4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c0       	rjmp	.+114    	; 0xe4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c0       	rjmp	.+110    	; 0xe4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c0       	rjmp	.+106    	; 0xe4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c0       	rjmp	.+102    	; 0xe4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c0       	rjmp	.+98     	; 0xe4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c0       	rjmp	.+94     	; 0xe4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c0       	rjmp	.+90     	; 0xe4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	01 08       	sbc	r0, r1
      8e:	03 08       	sbc	r0, r3
      90:	05 08       	sbc	r0, r5
      92:	07 08       	sbc	r0, r7
      94:	09 08       	sbc	r0, r9
      96:	0b 08       	sbc	r0, r11
      98:	0d 08       	sbc	r0, r13
      9a:	f3 08       	sbc	r15, r3
      9c:	f5 08       	sbc	r15, r5
      9e:	f7 08       	sbc	r15, r7
      a0:	f9 08       	sbc	r15, r9
      a2:	fb 08       	sbc	r15, r11
      a4:	fd 08       	sbc	r15, r13
      a6:	ff 08       	sbc	r15, r15

000000a8 <__ctors_end>:
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf ef       	ldi	r28, 0xFF	; 255
      ae:	d0 e1       	ldi	r29, 0x10	; 16
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	ea e1       	ldi	r30, 0x1A	; 26
      bc:	fd e1       	ldi	r31, 0x1D	; 29
      be:	00 e0       	ldi	r16, 0x00	; 0
      c0:	0b bf       	out	0x3b, r16	; 59
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x14>
      c4:	07 90       	elpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a0 3d       	cpi	r26, 0xD0	; 208
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0x10>

000000ce <__do_clear_bss>:
      ce:	22 e0       	ldi	r18, 0x02	; 2
      d0:	a0 ed       	ldi	r26, 0xD0	; 208
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	af 3e       	cpi	r26, 0xEF	; 239
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	26 d5       	rcall	.+2636   	; 0xb2c <main>
      e0:	0c 94 8b 0e 	jmp	0x1d16	; 0x1d16 <_exit>

000000e4 <__bad_interrupt>:
      e4:	8d cf       	rjmp	.-230    	; 0x0 <__vectors>

000000e6 <init_BUTTON>:
int get_BUTTON3();
void init_BUTTON();

void init_BUTTON()
{
	BUTTON_DDR &= ~((1 << BUTTON1) | (1 << BUTTON2) | (1 << BUTTON3) | (1 << BUTTON4));
      e6:	81 b3       	in	r24, 0x11	; 17
      e8:	8f 70       	andi	r24, 0x0F	; 15
      ea:	81 bb       	out	0x11, r24	; 17
      ec:	08 95       	ret

000000ee <get_BUTTON1>:
{
	 
	static uint8_t prev_state = 0; // 버튼의 상태 0: OFF , 1 : ON / 함수 실행 후에도 값이 변하지 않음
	uint8_t current_state; // unsigned char와 동일함 == unsigned int 8bit  // unsigned char current_state 
	
	current_state = BUTTON_PIN & (1 << BUTTON1); // Button1의 값을 읽는다. , 읽었을 때 (0x10)
      ee:	80 b3       	in	r24, 0x10	; 16
      f0:	80 71       	andi	r24, 0x10	; 16
	
	if(prev_state == 0 && current_state != 0) // 버튼이 처음 눌려진 상태 	
      f2:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <prev_state.1736>
      f6:	91 11       	cpse	r25, r1
      f8:	11 c0       	rjmp	.+34     	; 0x11c <get_BUTTON1+0x2e>
      fa:	88 23       	and	r24, r24
      fc:	79 f0       	breq	.+30     	; 0x11c <get_BUTTON1+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fe:	2f ef       	ldi	r18, 0xFF	; 255
     100:	8d ee       	ldi	r24, 0xED	; 237
     102:	92 e0       	ldi	r25, 0x02	; 2
     104:	21 50       	subi	r18, 0x01	; 1
     106:	80 40       	sbci	r24, 0x00	; 0
     108:	90 40       	sbci	r25, 0x00	; 0
     10a:	e1 f7       	brne	.-8      	; 0x104 <get_BUTTON1+0x16>
     10c:	00 c0       	rjmp	.+0      	; 0x10e <get_BUTTON1+0x20>
     10e:	00 00       	nop
	{
		_delay_ms(60);	// 노이즈가 지나가기를 기다림
		prev_state = 1; // 처음 눌러진 상태가 아니다. 
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <prev_state.1736>
		return 0;		// 아직은 진짜로 눌러진 상태가 아니라 0을 return 
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	08 95       	ret
		
	}
	else if(prev_state == 1 && current_state == 0) // 버튼이 눌렸다 떼어진 상태 
     11c:	91 30       	cpi	r25, 0x01	; 1
     11e:	81 f4       	brne	.+32     	; 0x140 <get_BUTTON1+0x52>
     120:	81 11       	cpse	r24, r1
     122:	11 c0       	rjmp	.+34     	; 0x146 <get_BUTTON1+0x58>
	{
		prev_state = 0; 
     124:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <prev_state.1736>
     128:	2f ef       	ldi	r18, 0xFF	; 255
     12a:	86 e7       	ldi	r24, 0x76	; 118
     12c:	91 e0       	ldi	r25, 0x01	; 1
     12e:	21 50       	subi	r18, 0x01	; 1
     130:	80 40       	sbci	r24, 0x00	; 0
     132:	90 40       	sbci	r25, 0x00	; 0
     134:	e1 f7       	brne	.-8      	; 0x12e <get_BUTTON1+0x40>
     136:	00 c0       	rjmp	.+0      	; 0x138 <get_BUTTON1+0x4a>
     138:	00 00       	nop
		_delay_ms(30);	// 노이즈가 지나가기를 기다림
		return 1; // 완전히 눌렸다 떼어진 상태로 인정
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	08 95       	ret
	}
	return 0; // 아직 완전히 sw 을 눌렀다 떼어지지 않은 상태
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	08 95       	ret
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	90 e0       	ldi	r25, 0x00	; 0
}
     14a:	08 95       	ret

0000014c <get_BUTTON2>:
{
	 
	static uint8_t prev_state = 0;
	uint8_t current_state; // unsigned char와 동일함 == unsigned int 8bit  // unsigned char current_state
	
	current_state = BUTTON_PIN & (1 << BUTTON2); // Button1의 값을 읽는다. , 읽었을 때 (0x10)
     14c:	80 b3       	in	r24, 0x10	; 16
     14e:	80 72       	andi	r24, 0x20	; 32
	
	if(prev_state == 0 && current_state != 0) // 버튼이 처음 눌려진 상태
     150:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <prev_state.1740>
     154:	91 11       	cpse	r25, r1
     156:	11 c0       	rjmp	.+34     	; 0x17a <get_BUTTON2+0x2e>
     158:	88 23       	and	r24, r24
     15a:	79 f0       	breq	.+30     	; 0x17a <get_BUTTON2+0x2e>
     15c:	2f ef       	ldi	r18, 0xFF	; 255
     15e:	8d ee       	ldi	r24, 0xED	; 237
     160:	92 e0       	ldi	r25, 0x02	; 2
     162:	21 50       	subi	r18, 0x01	; 1
     164:	80 40       	sbci	r24, 0x00	; 0
     166:	90 40       	sbci	r25, 0x00	; 0
     168:	e1 f7       	brne	.-8      	; 0x162 <get_BUTTON2+0x16>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <get_BUTTON2+0x20>
     16c:	00 00       	nop
	{
		_delay_ms(60);	// 노이즈가 지나가기를 기다림
		prev_state = 1; // 처음 눌러진 상태가 아니다.
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <prev_state.1740>
		return 0;		// 아직은 진짜로 눌러진 상태가 아니라 0을 return
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	08 95       	ret
		
	}
	else if(prev_state == 1 && current_state == 0) // 버튼이 눌렸다 떼어진 상태
     17a:	91 30       	cpi	r25, 0x01	; 1
     17c:	81 f4       	brne	.+32     	; 0x19e <get_BUTTON2+0x52>
     17e:	81 11       	cpse	r24, r1
     180:	11 c0       	rjmp	.+34     	; 0x1a4 <get_BUTTON2+0x58>
	{
		prev_state = 0;
     182:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <prev_state.1740>
     186:	2f ef       	ldi	r18, 0xFF	; 255
     188:	86 e7       	ldi	r24, 0x76	; 118
     18a:	91 e0       	ldi	r25, 0x01	; 1
     18c:	21 50       	subi	r18, 0x01	; 1
     18e:	80 40       	sbci	r24, 0x00	; 0
     190:	90 40       	sbci	r25, 0x00	; 0
     192:	e1 f7       	brne	.-8      	; 0x18c <get_BUTTON2+0x40>
     194:	00 c0       	rjmp	.+0      	; 0x196 <get_BUTTON2+0x4a>
     196:	00 00       	nop
		_delay_ms(30);	// 노이즈가 지나가기를 기다림
		return 1; // 완전히 눌렸다 떼어진 상태로 인정
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	08 95       	ret
	}
	return 0; // 아직 완전히 sw 을 눌렀다 떼어지지 않은 상태
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	08 95       	ret
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	90 e0       	ldi	r25, 0x00	; 0
}
     1a8:	08 95       	ret

000001aa <get_BUTTON3>:
{
	
	static uint8_t prev_state = 0;
	uint8_t current_state; // unsigned char와 동일함 == unsigned int 8bit  // unsigned char current_state
	
	current_state = BUTTON_PIN & (1 << BUTTON3); // Button1의 값을 읽는다. , 읽었을 때 (0x10)
     1aa:	80 b3       	in	r24, 0x10	; 16
     1ac:	80 74       	andi	r24, 0x40	; 64
	
	if(prev_state == 0 && current_state != 0) // 버튼이 처음 눌려진 상태
     1ae:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <__data_end>
     1b2:	91 11       	cpse	r25, r1
     1b4:	11 c0       	rjmp	.+34     	; 0x1d8 <get_BUTTON3+0x2e>
     1b6:	88 23       	and	r24, r24
     1b8:	79 f0       	breq	.+30     	; 0x1d8 <get_BUTTON3+0x2e>
     1ba:	2f ef       	ldi	r18, 0xFF	; 255
     1bc:	8d ee       	ldi	r24, 0xED	; 237
     1be:	92 e0       	ldi	r25, 0x02	; 2
     1c0:	21 50       	subi	r18, 0x01	; 1
     1c2:	80 40       	sbci	r24, 0x00	; 0
     1c4:	90 40       	sbci	r25, 0x00	; 0
     1c6:	e1 f7       	brne	.-8      	; 0x1c0 <get_BUTTON3+0x16>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <get_BUTTON3+0x20>
     1ca:	00 00       	nop
	{
		_delay_ms(60);	// 노이즈가 지나가기를 기다림
		prev_state = 1; // 처음 눌러진 상태가 아니다.
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <__data_end>
		return 0;		// 아직은 진짜로 눌러진 상태가 아니라 0을 return
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	08 95       	ret
		
	}
	else if(prev_state == 1 && current_state == 0) // 버튼이 눌렸다 떼어진 상태
     1d8:	91 30       	cpi	r25, 0x01	; 1
     1da:	81 f4       	brne	.+32     	; 0x1fc <get_BUTTON3+0x52>
     1dc:	81 11       	cpse	r24, r1
     1de:	11 c0       	rjmp	.+34     	; 0x202 <get_BUTTON3+0x58>
	{
		prev_state = 0;
     1e0:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <__data_end>
     1e4:	2f ef       	ldi	r18, 0xFF	; 255
     1e6:	86 e7       	ldi	r24, 0x76	; 118
     1e8:	91 e0       	ldi	r25, 0x01	; 1
     1ea:	21 50       	subi	r18, 0x01	; 1
     1ec:	80 40       	sbci	r24, 0x00	; 0
     1ee:	90 40       	sbci	r25, 0x00	; 0
     1f0:	e1 f7       	brne	.-8      	; 0x1ea <get_BUTTON3+0x40>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <get_BUTTON3+0x4a>
     1f4:	00 00       	nop
		_delay_ms(30);	// 노이즈가 지나가기를 기다림
		return 1; // 완전히 눌렸다 떼어진 상태로 인정
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	08 95       	ret
	}
	return 0; // 아직 완전히 sw 을 눌렀다 떼어지지 않은 상태
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	08 95       	ret
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
}
     206:	08 95       	ret

00000208 <set_fnd_data>:
uint16_t sec_data;
//uint32_t digit_position=0;  // 출력할 자리수

void set_fnd_data(uint16_t data)
{
	fnd_data = data; 
     208:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <fnd_data+0x1>
     20c:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <fnd_data>
     210:	08 95       	ret

00000212 <get_fnd_data>:

uint16_t get_fnd_data(void)
{
	return fnd_data; 
	
}
     212:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <fnd_data>
     216:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <fnd_data+0x1>
     21a:	08 95       	ret

0000021c <display_fnd>:

//extern uint8_t digit_position;		 // main에 전역 변수로 선언한 경우 이 내용을 추가한다. 
void display_fnd(void)
{
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
     224:	2a 97       	sbiw	r28, 0x0a	; 10
     226:	0f b6       	in	r0, 0x3f	; 63
     228:	f8 94       	cli
     22a:	de bf       	out	0x3e, r29	; 62
     22c:	0f be       	out	0x3f, r0	; 63
     22e:	cd bf       	out	0x3d, r28	; 61
	// uint8_t
	#if 1
	unsigned char fnd_font[] = {0xc0, 0xf9, 0xa4,0xb0, 0x99,0x92, 0x82, 0xd8, 0x80, 0x98};   // common애노우드
     230:	8a e0       	ldi	r24, 0x0A	; 10
     232:	ee e0       	ldi	r30, 0x0E	; 14
     234:	f1 e0       	ldi	r31, 0x01	; 1
     236:	de 01       	movw	r26, r28
     238:	11 96       	adiw	r26, 0x01	; 1
     23a:	01 90       	ld	r0, Z+
     23c:	0d 92       	st	X+, r0
     23e:	8a 95       	dec	r24
     240:	e1 f7       	brne	.-8      	; 0x23a <display_fnd+0x1e>
	unsigned char fnd_font[] = {~0xc0, ~0xf9, ~0xa4,~0xb0, ~0x99,~0x92, ~0x82, ~0xd8, ~0x80, ~0x98};   // common 캐소우드
	#endif
	
	static uint16_t digit_position = 0; // static 을 선언하면 지역 변수라도 함수 호출 뒤의 값을 그대로 유지 
	
	uint16_t data = get_fnd_data(); 
     242:	e7 df       	rcall	.-50     	; 0x212 <get_fnd_data>
     244:	ac 01       	movw	r20, r24

	switch(digit_position)
     246:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <digit_position.1621>
     24a:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <digit_position.1621+0x1>
     24e:	81 30       	cpi	r24, 0x01	; 1
     250:	91 05       	cpc	r25, r1
     252:	69 f1       	breq	.+90     	; 0x2ae <display_fnd+0x92>
     254:	40 f0       	brcs	.+16     	; 0x266 <display_fnd+0x4a>
     256:	82 30       	cpi	r24, 0x02	; 2
     258:	91 05       	cpc	r25, r1
     25a:	09 f4       	brne	.+2      	; 0x25e <display_fnd+0x42>
     25c:	56 c0       	rjmp	.+172    	; 0x30a <display_fnd+0xee>
     25e:	03 97       	sbiw	r24, 0x03	; 3
     260:	09 f4       	brne	.+2      	; 0x264 <display_fnd+0x48>
     262:	83 c0       	rjmp	.+262    	; 0x36a <display_fnd+0x14e>
     264:	b1 c0       	rjmp	.+354    	; 0x3c8 <display_fnd+0x1ac>
	{
		case 0:   // 1단위
		#if 1
		FND_DIGHT_PORT = 0b10000000;  // 에노우드
     266:	80 e8       	ldi	r24, 0x80	; 128
     268:	88 bb       	out	0x18, r24	; 24
		#else
		FND_DIGHT_PORT = ~0b10000000;  // 캐소우드
		#endif
		FND_DATA_PORT = fnd_font[data %10];  // 0~9 123456789 101112
     26a:	9a 01       	movw	r18, r20
     26c:	ad ec       	ldi	r26, 0xCD	; 205
     26e:	bc ec       	ldi	r27, 0xCC	; 204
     270:	0e 94 4f 0b 	call	0x169e	; 0x169e <__umulhisi3>
     274:	96 95       	lsr	r25
     276:	87 95       	ror	r24
     278:	96 95       	lsr	r25
     27a:	87 95       	ror	r24
     27c:	96 95       	lsr	r25
     27e:	87 95       	ror	r24
     280:	9c 01       	movw	r18, r24
     282:	22 0f       	add	r18, r18
     284:	33 1f       	adc	r19, r19
     286:	88 0f       	add	r24, r24
     288:	99 1f       	adc	r25, r25
     28a:	88 0f       	add	r24, r24
     28c:	99 1f       	adc	r25, r25
     28e:	88 0f       	add	r24, r24
     290:	99 1f       	adc	r25, r25
     292:	82 0f       	add	r24, r18
     294:	93 1f       	adc	r25, r19
     296:	9a 01       	movw	r18, r20
     298:	28 1b       	sub	r18, r24
     29a:	39 0b       	sbc	r19, r25
     29c:	e1 e0       	ldi	r30, 0x01	; 1
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	ec 0f       	add	r30, r28
     2a2:	fd 1f       	adc	r31, r29
     2a4:	e2 0f       	add	r30, r18
     2a6:	f3 1f       	adc	r31, r19
     2a8:	80 81       	ld	r24, Z
     2aa:	85 bb       	out	0x15, r24	; 21
		break;
     2ac:	8d c0       	rjmp	.+282    	; 0x3c8 <display_fnd+0x1ac>
		
		case 1:   // 10단위
		#if 1
		FND_DIGHT_PORT = 0b01000000;  // 에노우드
     2ae:	80 e4       	ldi	r24, 0x40	; 64
     2b0:	88 bb       	out	0x18, r24	; 24
		#else
		FND_DIGHT_PORT = ~0b01000000;   // 캐소우드
		#endif
		FND_DATA_PORT = fnd_font[data /10%10];
     2b2:	9a 01       	movw	r18, r20
     2b4:	ad ec       	ldi	r26, 0xCD	; 205
     2b6:	bc ec       	ldi	r27, 0xCC	; 204
     2b8:	0e 94 4f 0b 	call	0x169e	; 0x169e <__umulhisi3>
     2bc:	ac 01       	movw	r20, r24
     2be:	56 95       	lsr	r21
     2c0:	47 95       	ror	r20
     2c2:	56 95       	lsr	r21
     2c4:	47 95       	ror	r20
     2c6:	56 95       	lsr	r21
     2c8:	47 95       	ror	r20
     2ca:	9a 01       	movw	r18, r20
     2cc:	0e 94 4f 0b 	call	0x169e	; 0x169e <__umulhisi3>
     2d0:	96 95       	lsr	r25
     2d2:	87 95       	ror	r24
     2d4:	96 95       	lsr	r25
     2d6:	87 95       	ror	r24
     2d8:	96 95       	lsr	r25
     2da:	87 95       	ror	r24
     2dc:	9c 01       	movw	r18, r24
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	88 0f       	add	r24, r24
     2e4:	99 1f       	adc	r25, r25
     2e6:	88 0f       	add	r24, r24
     2e8:	99 1f       	adc	r25, r25
     2ea:	88 0f       	add	r24, r24
     2ec:	99 1f       	adc	r25, r25
     2ee:	82 0f       	add	r24, r18
     2f0:	93 1f       	adc	r25, r19
     2f2:	9a 01       	movw	r18, r20
     2f4:	28 1b       	sub	r18, r24
     2f6:	39 0b       	sbc	r19, r25
     2f8:	e1 e0       	ldi	r30, 0x01	; 1
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	ec 0f       	add	r30, r28
     2fe:	fd 1f       	adc	r31, r29
     300:	e2 0f       	add	r30, r18
     302:	f3 1f       	adc	r31, r19
     304:	80 81       	ld	r24, Z
     306:	85 bb       	out	0x15, r24	; 21
		break;
     308:	5f c0       	rjmp	.+190    	; 0x3c8 <display_fnd+0x1ac>
		
		case 2:   // 100단위   분
		#if 1
		FND_DIGHT_PORT = 0b00100000;  // 에노우드
     30a:	80 e2       	ldi	r24, 0x20	; 32
     30c:	88 bb       	out	0x18, r24	; 24
		#else
		FND_DIGHT_PORT = ~0b00100000;  // 캐소우드
		#endif
		FND_DATA_PORT = fnd_font[data /100%10];
     30e:	9a 01       	movw	r18, r20
     310:	36 95       	lsr	r19
     312:	27 95       	ror	r18
     314:	36 95       	lsr	r19
     316:	27 95       	ror	r18
     318:	ab e7       	ldi	r26, 0x7B	; 123
     31a:	b4 e1       	ldi	r27, 0x14	; 20
     31c:	0e 94 4f 0b 	call	0x169e	; 0x169e <__umulhisi3>
     320:	ac 01       	movw	r20, r24
     322:	56 95       	lsr	r21
     324:	47 95       	ror	r20
     326:	9a 01       	movw	r18, r20
     328:	ad ec       	ldi	r26, 0xCD	; 205
     32a:	bc ec       	ldi	r27, 0xCC	; 204
     32c:	0e 94 4f 0b 	call	0x169e	; 0x169e <__umulhisi3>
     330:	96 95       	lsr	r25
     332:	87 95       	ror	r24
     334:	96 95       	lsr	r25
     336:	87 95       	ror	r24
     338:	96 95       	lsr	r25
     33a:	87 95       	ror	r24
     33c:	9c 01       	movw	r18, r24
     33e:	22 0f       	add	r18, r18
     340:	33 1f       	adc	r19, r19
     342:	88 0f       	add	r24, r24
     344:	99 1f       	adc	r25, r25
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	88 0f       	add	r24, r24
     34c:	99 1f       	adc	r25, r25
     34e:	82 0f       	add	r24, r18
     350:	93 1f       	adc	r25, r19
     352:	9a 01       	movw	r18, r20
     354:	28 1b       	sub	r18, r24
     356:	39 0b       	sbc	r19, r25
     358:	e1 e0       	ldi	r30, 0x01	; 1
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	ec 0f       	add	r30, r28
     35e:	fd 1f       	adc	r31, r29
     360:	e2 0f       	add	r30, r18
     362:	f3 1f       	adc	r31, r19
     364:	80 81       	ld	r24, Z
     366:	85 bb       	out	0x15, r24	; 21
		break;
     368:	2f c0       	rjmp	.+94     	; 0x3c8 <display_fnd+0x1ac>
		
		case 3:   // 1000
		#if 1
		FND_DIGHT_PORT = 0b00010000;  // 에노우드
     36a:	80 e1       	ldi	r24, 0x10	; 16
     36c:	88 bb       	out	0x18, r24	; 24
		#else
		FND_DIGHT_PORT = ~0b00010000;  // 캐소우드
		#endif
		FND_DATA_PORT = fnd_font[data /1000%6];
     36e:	9a 01       	movw	r18, r20
     370:	36 95       	lsr	r19
     372:	27 95       	ror	r18
     374:	36 95       	lsr	r19
     376:	27 95       	ror	r18
     378:	36 95       	lsr	r19
     37a:	27 95       	ror	r18
     37c:	a5 ec       	ldi	r26, 0xC5	; 197
     37e:	b0 e2       	ldi	r27, 0x20	; 32
     380:	0e 94 4f 0b 	call	0x169e	; 0x169e <__umulhisi3>
     384:	ac 01       	movw	r20, r24
     386:	52 95       	swap	r21
     388:	42 95       	swap	r20
     38a:	4f 70       	andi	r20, 0x0F	; 15
     38c:	45 27       	eor	r20, r21
     38e:	5f 70       	andi	r21, 0x0F	; 15
     390:	45 27       	eor	r20, r21
     392:	9a 01       	movw	r18, r20
     394:	ab ea       	ldi	r26, 0xAB	; 171
     396:	ba ea       	ldi	r27, 0xAA	; 170
     398:	0e 94 4f 0b 	call	0x169e	; 0x169e <__umulhisi3>
     39c:	96 95       	lsr	r25
     39e:	87 95       	ror	r24
     3a0:	96 95       	lsr	r25
     3a2:	87 95       	ror	r24
     3a4:	9c 01       	movw	r18, r24
     3a6:	22 0f       	add	r18, r18
     3a8:	33 1f       	adc	r19, r19
     3aa:	82 0f       	add	r24, r18
     3ac:	93 1f       	adc	r25, r19
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	9a 01       	movw	r18, r20
     3b4:	28 1b       	sub	r18, r24
     3b6:	39 0b       	sbc	r19, r25
     3b8:	e1 e0       	ldi	r30, 0x01	; 1
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	ec 0f       	add	r30, r28
     3be:	fd 1f       	adc	r31, r29
     3c0:	e2 0f       	add	r30, r18
     3c2:	f3 1f       	adc	r31, r19
     3c4:	80 81       	ld	r24, Z
     3c6:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_position++;   // 다음 표시할 자리수
     3c8:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <digit_position.1621>
     3cc:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <digit_position.1621+0x1>
     3d0:	01 96       	adiw	r24, 0x01	; 1
	digit_position %= 4;  // digit_position = digit_position % 4
     3d2:	83 70       	andi	r24, 0x03	; 3
     3d4:	99 27       	eor	r25, r25
     3d6:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <digit_position.1621+0x1>
     3da:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <digit_position.1621>
}
     3de:	2a 96       	adiw	r28, 0x0a	; 10
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	f8 94       	cli
     3e4:	de bf       	out	0x3e, r29	; 62
     3e6:	0f be       	out	0x3f, r0	; 63
     3e8:	cd bf       	out	0x3d, r28	; 61
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <init_fnd>:
void init_fnd(void)
{
	FND_DATA_DDR = 0xff;
     3f0:	8f ef       	ldi	r24, 0xFF	; 255
     3f2:	84 bb       	out	0x14, r24	; 20
	FND_DIGHT_DDR |= 0xf0;   // 4567만 1로 3210은 그대로 유지
     3f4:	87 b3       	in	r24, 0x17	; 23
     3f6:	80 6f       	ori	r24, 0xF0	; 240
     3f8:	87 bb       	out	0x17, r24	; 23
	#if 0
	FND_DATA_PORT = ~0x00;   // common 애노우드 FND를 all off
	#else
	FND_DATA_PORT = 0x00;   // 0xff common 케소우드 FND를 all off
     3fa:	15 ba       	out	0x15, r1	; 21
     3fc:	08 95       	ret

000003fe <I2C_init>:
// I2C
#include <avr/io.h>
#include "I2C.h"

void I2C_init(unsigned int baud){
	TWBR = baud;
     3fe:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     402:	08 95       	ret

00000404 <I2C_start>:
}

void I2C_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     404:	84 ea       	ldi	r24, 0xA4	; 164
     406:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));  // 시작 완료 대기
     40a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     40e:	88 23       	and	r24, r24
     410:	e4 f7       	brge	.-8      	; 0x40a <I2C_start+0x6>
}
     412:	08 95       	ret

00000414 <I2C_transmit>:

void I2C_transmit(uint8_t data)
{
	TWDR = data;
     414:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
     418:	84 e8       	ldi	r24, 0x84	; 132
     41a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));
     41e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     422:	88 23       	and	r24, r24
     424:	e4 f7       	brge	.-8      	; 0x41e <I2C_transmit+0xa>
}
     426:	08 95       	ret

00000428 <I2C_stop>:
	I2C_stop();
}

void I2C_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     428:	84 e9       	ldi	r24, 0x94	; 148
     42a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     42e:	08 95       	ret

00000430 <I2C_write_byte>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
}

void I2C_write_byte(uint8_t address, uint8_t data)
{
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	d8 2f       	mov	r29, r24
     436:	c6 2f       	mov	r28, r22
	I2C_start();
     438:	e5 df       	rcall	.-54     	; 0x404 <I2C_start>
	I2C_transmit(address);
     43a:	8d 2f       	mov	r24, r29
     43c:	eb df       	rcall	.-42     	; 0x414 <I2C_transmit>
	I2C_transmit(data);
     43e:	8c 2f       	mov	r24, r28
     440:	e9 df       	rcall	.-46     	; 0x414 <I2C_transmit>
	I2C_stop();
     442:	f2 df       	rcall	.-28     	; 0x428 <I2C_stop>
     444:	df 91       	pop	r29
}
     446:	cf 91       	pop	r28
     448:	08 95       	ret

0000044a <I2C_LCD_write_data>:
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	00 d0       	rcall	.+0      	; 0x452 <I2C_LCD_write_data+0x8>
     452:	00 d0       	rcall	.+0      	; 0x454 <I2C_LCD_write_data+0xa>
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	28 2f       	mov	r18, r24
     45a:	20 7f       	andi	r18, 0xF0	; 240
     45c:	30 e1       	ldi	r19, 0x10	; 16
     45e:	83 9f       	mul	r24, r19
     460:	c0 01       	movw	r24, r0
     462:	11 24       	eor	r1, r1
     464:	92 2f       	mov	r25, r18
     466:	9d 60       	ori	r25, 0x0D	; 13
     468:	99 83       	std	Y+1, r25	; 0x01
     46a:	29 60       	ori	r18, 0x09	; 9
     46c:	2a 83       	std	Y+2, r18	; 0x02
     46e:	98 2f       	mov	r25, r24
     470:	9d 60       	ori	r25, 0x0D	; 13
     472:	9b 83       	std	Y+3, r25	; 0x03
     474:	89 60       	ori	r24, 0x09	; 9
     476:	8c 83       	std	Y+4, r24	; 0x04
     478:	10 e0       	ldi	r17, 0x00	; 0
     47a:	0a c0       	rjmp	.+20     	; 0x490 <I2C_LCD_write_data+0x46>
     47c:	e1 e0       	ldi	r30, 0x01	; 1
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	ec 0f       	add	r30, r28
     482:	fd 1f       	adc	r31, r29
     484:	e1 0f       	add	r30, r17
     486:	f1 1d       	adc	r31, r1
     488:	60 81       	ld	r22, Z
     48a:	8e e4       	ldi	r24, 0x4E	; 78
     48c:	d1 df       	rcall	.-94     	; 0x430 <I2C_write_byte>
     48e:	1f 5f       	subi	r17, 0xFF	; 255
     490:	14 30       	cpi	r17, 0x04	; 4
     492:	a0 f3       	brcs	.-24     	; 0x47c <I2C_LCD_write_data+0x32>
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	1f 91       	pop	r17
     4a2:	08 95       	ret

000004a4 <I2C_LCD_write_command>:
     4a4:	1f 93       	push	r17
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	00 d0       	rcall	.+0      	; 0x4ac <I2C_LCD_write_command+0x8>
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <I2C_LCD_write_command+0xa>
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	28 2f       	mov	r18, r24
     4b4:	20 7f       	andi	r18, 0xF0	; 240
     4b6:	30 e1       	ldi	r19, 0x10	; 16
     4b8:	83 9f       	mul	r24, r19
     4ba:	c0 01       	movw	r24, r0
     4bc:	11 24       	eor	r1, r1
     4be:	92 2f       	mov	r25, r18
     4c0:	9c 60       	ori	r25, 0x0C	; 12
     4c2:	99 83       	std	Y+1, r25	; 0x01
     4c4:	28 60       	ori	r18, 0x08	; 8
     4c6:	2a 83       	std	Y+2, r18	; 0x02
     4c8:	98 2f       	mov	r25, r24
     4ca:	9c 60       	ori	r25, 0x0C	; 12
     4cc:	9b 83       	std	Y+3, r25	; 0x03
     4ce:	88 60       	ori	r24, 0x08	; 8
     4d0:	8c 83       	std	Y+4, r24	; 0x04
     4d2:	10 e0       	ldi	r17, 0x00	; 0
     4d4:	0a c0       	rjmp	.+20     	; 0x4ea <I2C_LCD_write_command+0x46>
     4d6:	e1 e0       	ldi	r30, 0x01	; 1
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	ec 0f       	add	r30, r28
     4dc:	fd 1f       	adc	r31, r29
     4de:	e1 0f       	add	r30, r17
     4e0:	f1 1d       	adc	r31, r1
     4e2:	60 81       	ld	r22, Z
     4e4:	8e e4       	ldi	r24, 0x4E	; 78
     4e6:	a4 df       	rcall	.-184    	; 0x430 <I2C_write_byte>
     4e8:	1f 5f       	subi	r17, 0xFF	; 255
     4ea:	14 30       	cpi	r17, 0x04	; 4
     4ec:	a0 f3       	brcs	.-24     	; 0x4d6 <I2C_LCD_write_command+0x32>
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	1f 91       	pop	r17
     4fc:	08 95       	ret

000004fe <I2C_LCD_init>:
}

// LCD를 초기화
void I2C_LCD_init(void)
{
	I2C_init(10000);	// 보율 설정 
     4fe:	80 e1       	ldi	r24, 0x10	; 16
     500:	97 e2       	ldi	r25, 0x27	; 39
     502:	7d df       	rcall	.-262    	; 0x3fe <I2C_init>
     504:	2f ef       	ldi	r18, 0xFF	; 255
     506:	80 e7       	ldi	r24, 0x70	; 112
     508:	92 e0       	ldi	r25, 0x02	; 2
     50a:	21 50       	subi	r18, 0x01	; 1
     50c:	80 40       	sbci	r24, 0x00	; 0
     50e:	90 40       	sbci	r25, 0x00	; 0
     510:	e1 f7       	brne	.-8      	; 0x50a <I2C_LCD_init+0xc>
     512:	00 c0       	rjmp	.+0      	; 0x514 <I2C_LCD_init+0x16>
     514:	00 00       	nop
	_delay_ms(50);		// 안정화를 위한 Delay 
	//Initialization of HD44780-based LCD (4-bit HW)
	I2C_LCD_write_command(0x33);
     516:	83 e3       	ldi	r24, 0x33	; 51
     518:	c5 df       	rcall	.-118    	; 0x4a4 <I2C_LCD_write_command>
	I2C_LCD_write_command(0x32);
     51a:	82 e3       	ldi	r24, 0x32	; 50
     51c:	c3 df       	rcall	.-122    	; 0x4a4 <I2C_LCD_write_command>
	I2C_LCD_write_command(0x28);   //Function Set 4-bit mode
     51e:	88 e2       	ldi	r24, 0x28	; 40
     520:	c1 df       	rcall	.-126    	; 0x4a4 <I2C_LCD_write_command>
	I2C_LCD_write_command(0x0c);   //Display On/Off Control
     522:	8c e0       	ldi	r24, 0x0C	; 12
     524:	bf df       	rcall	.-130    	; 0x4a4 <I2C_LCD_write_command>
	I2C_LCD_write_command(0x06);   //Entry mode set
     526:	86 e0       	ldi	r24, 0x06	; 6
     528:	bd df       	rcall	.-134    	; 0x4a4 <I2C_LCD_write_command>
     52a:	81 e0       	ldi	r24, 0x01	; 1
	I2C_LCD_write_command(0x01);   //Clear Display
     52c:	bb df       	rcall	.-138    	; 0x4a4 <I2C_LCD_write_command>
     52e:	8f e3       	ldi	r24, 0x3F	; 63
     530:	9c e9       	ldi	r25, 0x9C	; 156
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <I2C_LCD_init+0x34>
     536:	00 c0       	rjmp	.+0      	; 0x538 <I2C_LCD_init+0x3a>
     538:	00 00       	nop
     53a:	08 95       	ret

0000053c <I2C_LCD_write_string>:
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
	//Minimum delay to wait before driving LCD module
	_delay_ms(10);
}
// 현재의 xy좌표에 printf처럼 스트링 값을 출력 
void I2C_LCD_write_string(char *string)
{
     540:	cf 93       	push	r28
     542:	8c 01       	movw	r16, r24
	uint8_t i;
	for(i=0; string[i]; i++)
     544:	c0 e0       	ldi	r28, 0x00	; 0
     546:	02 c0       	rjmp	.+4      	; 0x54c <I2C_LCD_write_string+0x10>
	I2C_LCD_write_data(string[i]);
     548:	80 df       	rcall	.-256    	; 0x44a <I2C_LCD_write_data>
}
// 현재의 xy좌표에 printf처럼 스트링 값을 출력 
void I2C_LCD_write_string(char *string)
{
	uint8_t i;
	for(i=0; string[i]; i++)
     54a:	cf 5f       	subi	r28, 0xFF	; 255
     54c:	f8 01       	movw	r30, r16
     54e:	ec 0f       	add	r30, r28
     550:	f1 1d       	adc	r31, r1
     552:	80 81       	ld	r24, Z
     554:	81 11       	cpse	r24, r1
     556:	f8 cf       	rjmp	.-16     	; 0x548 <I2C_LCD_write_string+0xc>
	I2C_LCD_write_data(string[i]);
}
     558:	cf 91       	pop	r28
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	08 95       	ret

00000560 <I2C_LCD_goto_XY>:

// 커서를 x,y좌표로 이동
void I2C_LCD_goto_XY(uint8_t row, uint8_t col)
{
	col %= 16;
     560:	6f 70       	andi	r22, 0x0F	; 15
	row %= 2;
     562:	81 70       	andi	r24, 0x01	; 1
	
	uint8_t address = (0x40 * row) + col;
     564:	90 e4       	ldi	r25, 0x40	; 64
     566:	89 9f       	mul	r24, r25
     568:	60 0d       	add	r22, r0
     56a:	11 24       	eor	r1, r1
     56c:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + address;
	
	I2C_LCD_write_command(command);
     56e:	80 58       	subi	r24, 0x80	; 128
     570:	99 cf       	rjmp	.-206    	; 0x4a4 <I2C_LCD_write_command>
     572:	08 95       	ret

00000574 <I2C_LCD_write_string_XY>:
}

// x,y좌표로 이동을 하고 string값을 출력 한다. 
void I2C_LCD_write_string_XY(uint8_t row, uint8_t col, char *string)
{
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	ea 01       	movw	r28, r20
	I2C_LCD_goto_XY(row, col);
     57a:	f2 df       	rcall	.-28     	; 0x560 <I2C_LCD_goto_XY>
	I2C_LCD_write_string(string);
     57c:	ce 01       	movw	r24, r28
     57e:	de df       	rcall	.-68     	; 0x53c <I2C_LCD_write_string>
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	08 95       	ret

00000586 <init_led>:
extern uint32_t del;
extern volatile int ultrasonic_distance;

void init_led()
{
	DDRA = 0xff; // data direction register
     586:	8f ef       	ldi	r24, 0xFF	; 255
     588:	8a bb       	out	0x1a, r24	; 26
     58a:	08 95       	ret

0000058c <ledalltoggle>:

int toggle = 0; 
void ledalltoggle(void)
{
	
	if(funcyc)
     58c:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <funcyc>
     590:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <funcyc+0x1>
     594:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <funcyc+0x2>
     598:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <funcyc+0x3>
     59c:	89 2b       	or	r24, r25
     59e:	8a 2b       	or	r24, r26
     5a0:	8b 2b       	or	r24, r27
     5a2:	19 f0       	breq	.+6      	; 0x5aa <ledalltoggle+0x1e>
	{
		PORTA = 0xff;
     5a4:	8f ef       	ldi	r24, 0xFF	; 255
     5a6:	8b bb       	out	0x1b, r24	; 27
     5a8:	08 95       	ret
	}
	else 
	{
		PORTA = 0x00;
     5aa:	1b ba       	out	0x1b, r1	; 27
     5ac:	08 95       	ret

000005ae <shiftleftledon>:

void shiftleftledon(void)
{
	int i ;
	
		for(i = 0 ; i < 8 ; )
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	1f c0       	rjmp	.+62     	; 0x5f2 <shiftleftledon+0x44>
		{	
			if(funcyc)
     5b4:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <funcyc>
     5b8:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <funcyc+0x1>
     5bc:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <funcyc+0x2>
     5c0:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <funcyc+0x3>
     5c4:	89 2b       	or	r24, r25
     5c6:	8a 2b       	or	r24, r26
     5c8:	8b 2b       	or	r24, r27
     5ca:	99 f0       	breq	.+38     	; 0x5f2 <shiftleftledon+0x44>
			{
				
			PORTA = 0x01 << i;
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	02 2e       	mov	r0, r18
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <shiftleftledon+0x2a>
     5d4:	88 0f       	add	r24, r24
     5d6:	99 1f       	adc	r25, r25
     5d8:	0a 94       	dec	r0
     5da:	e2 f7       	brpl	.-8      	; 0x5d4 <shiftleftledon+0x26>
     5dc:	8b bb       	out	0x1b, r24	; 27
			
			i++;		// 이쪽으로 빼지 않으면 funcyc가 1이 아닐 때도 for문이 실행된다. 
     5de:	2f 5f       	subi	r18, 0xFF	; 255
     5e0:	3f 4f       	sbci	r19, 0xFF	; 255
			
			funcyc = 0;
     5e2:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <funcyc>
     5e6:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <funcyc+0x1>
     5ea:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <funcyc+0x2>
     5ee:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <funcyc+0x3>

void shiftleftledon(void)
{
	int i ;
	
		for(i = 0 ; i < 8 ; )
     5f2:	28 30       	cpi	r18, 0x08	; 8
     5f4:	31 05       	cpc	r19, r1
     5f6:	f4 f2       	brlt	.-68     	; 0x5b4 <shiftleftledon+0x6>
			i++;		// 이쪽으로 빼지 않으면 funcyc가 1이 아닐 때도 for문이 실행된다. 
			
			funcyc = 0;
			}	 
	}
}
     5f8:	08 95       	ret

000005fa <shiftrightledon>:
void shiftrightledon(void)
{
	int i ;
	
	
		for(i = 0 ; i < 8 ; )
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	1f c0       	rjmp	.+62     	; 0x63e <shiftrightledon+0x44>
		{
			if(funcyc)
     600:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <funcyc>
     604:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <funcyc+0x1>
     608:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <funcyc+0x2>
     60c:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <funcyc+0x3>
     610:	89 2b       	or	r24, r25
     612:	8a 2b       	or	r24, r26
     614:	8b 2b       	or	r24, r27
     616:	99 f0       	breq	.+38     	; 0x63e <shiftrightledon+0x44>
			{
			PORTA = 0x80 >> i;
     618:	80 e8       	ldi	r24, 0x80	; 128
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	02 2e       	mov	r0, r18
     61e:	02 c0       	rjmp	.+4      	; 0x624 <shiftrightledon+0x2a>
     620:	95 95       	asr	r25
     622:	87 95       	ror	r24
     624:	0a 94       	dec	r0
     626:	e2 f7       	brpl	.-8      	; 0x620 <shiftrightledon+0x26>
     628:	8b bb       	out	0x1b, r24	; 27
			
			
			i++;
     62a:	2f 5f       	subi	r18, 0xFF	; 255
     62c:	3f 4f       	sbci	r19, 0xFF	; 255
			funcyc = 0; 
     62e:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <funcyc>
     632:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <funcyc+0x1>
     636:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <funcyc+0x2>
     63a:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <funcyc+0x3>
void shiftrightledon(void)
{
	int i ;
	
	
		for(i = 0 ; i < 8 ; )
     63e:	28 30       	cpi	r18, 0x08	; 8
     640:	31 05       	cpc	r19, r1
     642:	f4 f2       	brlt	.-68     	; 0x600 <shiftrightledon+0x6>
			i++;
			funcyc = 0; 
			}
		}
	
}
     644:	08 95       	ret

00000646 <shiftleftholdledon>:
void shiftleftholdledon(void)
{
	int i ;
	
	
		for(i = 7 ; i >=0 ; )
     646:	27 e0       	ldi	r18, 0x07	; 7
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	1f c0       	rjmp	.+62     	; 0x68a <shiftleftholdledon+0x44>
		{
			if(funcyc)
     64c:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <funcyc>
     650:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <funcyc+0x1>
     654:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <funcyc+0x2>
     658:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <funcyc+0x3>
     65c:	89 2b       	or	r24, r25
     65e:	8a 2b       	or	r24, r26
     660:	8b 2b       	or	r24, r27
     662:	99 f0       	breq	.+38     	; 0x68a <shiftleftholdledon+0x44>
			{
			PORTA = 0xff >> i;
     664:	8f ef       	ldi	r24, 0xFF	; 255
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	02 2e       	mov	r0, r18
     66a:	02 c0       	rjmp	.+4      	; 0x670 <shiftleftholdledon+0x2a>
     66c:	95 95       	asr	r25
     66e:	87 95       	ror	r24
     670:	0a 94       	dec	r0
     672:	e2 f7       	brpl	.-8      	; 0x66c <shiftleftholdledon+0x26>
     674:	8b bb       	out	0x1b, r24	; 27
			
			i--;
     676:	21 50       	subi	r18, 0x01	; 1
     678:	31 09       	sbc	r19, r1
			
			funcyc = 0; 
     67a:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <funcyc>
     67e:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <funcyc+0x1>
     682:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <funcyc+0x2>
     686:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <funcyc+0x3>
void shiftleftholdledon(void)
{
	int i ;
	
	
		for(i = 7 ; i >=0 ; )
     68a:	33 23       	and	r19, r19
     68c:	fc f6       	brge	.-66     	; 0x64c <shiftleftholdledon+0x6>
			i--;
			
			funcyc = 0; 
			}
		}
}
     68e:	08 95       	ret

00000690 <shiftrightholdledon>:

void shiftrightholdledon(void)
{
	int i ;
	
		for(i = 7 ; i >=0 ; )
     690:	27 e0       	ldi	r18, 0x07	; 7
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	1f c0       	rjmp	.+62     	; 0x6d4 <shiftrightholdledon+0x44>
		{
			if(funcyc)
     696:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <funcyc>
     69a:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <funcyc+0x1>
     69e:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <funcyc+0x2>
     6a2:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <funcyc+0x3>
     6a6:	89 2b       	or	r24, r25
     6a8:	8a 2b       	or	r24, r26
     6aa:	8b 2b       	or	r24, r27
     6ac:	99 f0       	breq	.+38     	; 0x6d4 <shiftrightholdledon+0x44>
			{
			PORTA = 0xff << i;
     6ae:	8f ef       	ldi	r24, 0xFF	; 255
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	02 2e       	mov	r0, r18
     6b4:	02 c0       	rjmp	.+4      	; 0x6ba <shiftrightholdledon+0x2a>
     6b6:	88 0f       	add	r24, r24
     6b8:	99 1f       	adc	r25, r25
     6ba:	0a 94       	dec	r0
     6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <shiftrightholdledon+0x26>
     6be:	8b bb       	out	0x1b, r24	; 27
			
			i--;
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	31 09       	sbc	r19, r1
			
			funcyc = 0; 
     6c4:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <funcyc>
     6c8:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <funcyc+0x1>
     6cc:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <funcyc+0x2>
     6d0:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <funcyc+0x3>

void shiftrightholdledon(void)
{
	int i ;
	
		for(i = 7 ; i >=0 ; )
     6d4:	33 23       	and	r19, r19
     6d6:	fc f6       	brge	.-66     	; 0x696 <shiftrightholdledon+0x6>
			i--;
			
			funcyc = 0; 
			}
		}
}
     6d8:	08 95       	ret

000006da <f_off>:
void f_off(void)
{
	int h,l;
	
	
		for(int i = 0; i < 4; )
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	29 c0       	rjmp	.+82     	; 0x732 <f_off+0x58>
		{
			if(funcyc)
     6e0:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <funcyc>
     6e4:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <funcyc+0x1>
     6e8:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <funcyc+0x2>
     6ec:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <funcyc+0x3>
     6f0:	89 2b       	or	r24, r25
     6f2:	8a 2b       	or	r24, r26
     6f4:	8b 2b       	or	r24, r27
     6f6:	e9 f0       	breq	.+58     	; 0x732 <f_off+0x58>
			{
			h = 0x80 >> i;
     6f8:	80 e8       	ldi	r24, 0x80	; 128
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	ac 01       	movw	r20, r24
     6fe:	02 2e       	mov	r0, r18
     700:	02 c0       	rjmp	.+4      	; 0x706 <f_off+0x2c>
     702:	55 95       	asr	r21
     704:	47 95       	ror	r20
     706:	0a 94       	dec	r0
     708:	e2 f7       	brpl	.-8      	; 0x702 <f_off+0x28>
			l = 0x01 << i;
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	02 2e       	mov	r0, r18
     710:	02 c0       	rjmp	.+4      	; 0x716 <f_off+0x3c>
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	0a 94       	dec	r0
     718:	e2 f7       	brpl	.-8      	; 0x712 <f_off+0x38>
			PORTA = h | l ;
     71a:	84 2b       	or	r24, r20
     71c:	8b bb       	out	0x1b, r24	; 27
			
			i++; 
     71e:	2f 5f       	subi	r18, 0xFF	; 255
     720:	3f 4f       	sbci	r19, 0xFF	; 255
			
			funcyc = 0;
     722:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <funcyc>
     726:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <funcyc+0x1>
     72a:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <funcyc+0x2>
     72e:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <funcyc+0x3>
void f_off(void)
{
	int h,l;
	
	
		for(int i = 0; i < 4; )
     732:	24 30       	cpi	r18, 0x04	; 4
     734:	31 05       	cpc	r19, r1
     736:	a4 f2       	brlt	.-88     	; 0x6e0 <f_off+0x6>
			i++; 
			
			funcyc = 0;
			} 
		}
}
     738:	08 95       	ret

0000073a <flower_on>:
void flower_on(void)
{
	int h2,l2;
	
	
		for(int i = 0; i < 4;)
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	29 c0       	rjmp	.+82     	; 0x792 <flower_on+0x58>
		{
			if(funcyc)
     740:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <funcyc>
     744:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <funcyc+0x1>
     748:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <funcyc+0x2>
     74c:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <funcyc+0x3>
     750:	89 2b       	or	r24, r25
     752:	8a 2b       	or	r24, r26
     754:	8b 2b       	or	r24, r27
     756:	e9 f0       	breq	.+58     	; 0x792 <flower_on+0x58>
			{
			h2 = 0x10 << i;
     758:	80 e1       	ldi	r24, 0x10	; 16
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	ac 01       	movw	r20, r24
     75e:	02 2e       	mov	r0, r18
     760:	02 c0       	rjmp	.+4      	; 0x766 <flower_on+0x2c>
     762:	44 0f       	add	r20, r20
     764:	55 1f       	adc	r21, r21
     766:	0a 94       	dec	r0
     768:	e2 f7       	brpl	.-8      	; 0x762 <flower_on+0x28>
			l2 = 0x08 >> i;
     76a:	88 e0       	ldi	r24, 0x08	; 8
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	02 2e       	mov	r0, r18
     770:	02 c0       	rjmp	.+4      	; 0x776 <flower_on+0x3c>
     772:	95 95       	asr	r25
     774:	87 95       	ror	r24
     776:	0a 94       	dec	r0
     778:	e2 f7       	brpl	.-8      	; 0x772 <flower_on+0x38>
			PORTA = h2 | l2 ;
     77a:	84 2b       	or	r24, r20
     77c:	8b bb       	out	0x1b, r24	; 27
			
			i++;
     77e:	2f 5f       	subi	r18, 0xFF	; 255
     780:	3f 4f       	sbci	r19, 0xFF	; 255
			 
			funcyc = 0;
     782:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <funcyc>
     786:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <funcyc+0x1>
     78a:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <funcyc+0x2>
     78e:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <funcyc+0x3>
void flower_on(void)
{
	int h2,l2;
	
	
		for(int i = 0; i < 4;)
     792:	24 30       	cpi	r18, 0x04	; 4
     794:	31 05       	cpc	r19, r1
     796:	a4 f2       	brlt	.-88     	; 0x740 <flower_on+0x6>
			i++;
			 
			funcyc = 0;
			}
		}
}
     798:	08 95       	ret

0000079a <ultra_led>:
void ultra_led()
{
	 uint32_t ultrasonic_distance58= ultrasonic_distance/ 58;
     79a:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <ultrasonic_distance>
     79e:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <ultrasonic_distance+0x1>
     7a2:	6a e3       	ldi	r22, 0x3A	; 58
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	3d d7       	rcall	.+3706   	; 0x1622 <__divmodhi4>
     7a8:	cb 01       	movw	r24, r22
     7aa:	77 0f       	add	r23, r23
     7ac:	aa 0b       	sbc	r26, r26
     7ae:	bb 0b       	sbc	r27, r27
	
	if(ultrasonic_distance58 == 2)
     7b0:	82 30       	cpi	r24, 0x02	; 2
     7b2:	91 05       	cpc	r25, r1
     7b4:	a1 05       	cpc	r26, r1
     7b6:	b1 05       	cpc	r27, r1
     7b8:	19 f4       	brne	.+6      	; 0x7c0 <ultra_led+0x26>
	{
			PORTA = 0xff;
     7ba:	8f ef       	ldi	r24, 0xFF	; 255
     7bc:	8b bb       	out	0x1b, r24	; 27
     7be:	08 95       	ret
	
	}
	else if(ultrasonic_distance58 == 3)
     7c0:	83 30       	cpi	r24, 0x03	; 3
     7c2:	91 05       	cpc	r25, r1
     7c4:	a1 05       	cpc	r26, r1
     7c6:	b1 05       	cpc	r27, r1
     7c8:	19 f4       	brne	.+6      	; 0x7d0 <ultra_led+0x36>
	{
	
			PORTA = ~0x80;	
     7ca:	8f e7       	ldi	r24, 0x7F	; 127
     7cc:	8b bb       	out	0x1b, r24	; 27
     7ce:	08 95       	ret

	}
	else if(ultrasonic_distance58 == 4)
     7d0:	84 30       	cpi	r24, 0x04	; 4
     7d2:	91 05       	cpc	r25, r1
     7d4:	a1 05       	cpc	r26, r1
     7d6:	b1 05       	cpc	r27, r1
     7d8:	19 f4       	brne	.+6      	; 0x7e0 <ultra_led+0x46>
	{
		
		PORTA = ~0xc0;
     7da:	8f e3       	ldi	r24, 0x3F	; 63
     7dc:	8b bb       	out	0x1b, r24	; 27
     7de:	08 95       	ret

	}
	else if(ultrasonic_distance58 == 5)
     7e0:	85 30       	cpi	r24, 0x05	; 5
     7e2:	91 05       	cpc	r25, r1
     7e4:	a1 05       	cpc	r26, r1
     7e6:	b1 05       	cpc	r27, r1
     7e8:	19 f4       	brne	.+6      	; 0x7f0 <ultra_led+0x56>
	{
		
		PORTA = ~0xe0;
     7ea:	8f e1       	ldi	r24, 0x1F	; 31
     7ec:	8b bb       	out	0x1b, r24	; 27
     7ee:	08 95       	ret

	}
	else if(ultrasonic_distance58 == 6)
     7f0:	86 30       	cpi	r24, 0x06	; 6
     7f2:	91 05       	cpc	r25, r1
     7f4:	a1 05       	cpc	r26, r1
     7f6:	b1 05       	cpc	r27, r1
     7f8:	19 f4       	brne	.+6      	; 0x800 <ultra_led+0x66>
	{
		
		PORTA = ~0xf0;
     7fa:	8f e0       	ldi	r24, 0x0F	; 15
     7fc:	8b bb       	out	0x1b, r24	; 27
     7fe:	08 95       	ret

	}
	else if(ultrasonic_distance58 == 7)
     800:	87 30       	cpi	r24, 0x07	; 7
     802:	91 05       	cpc	r25, r1
     804:	a1 05       	cpc	r26, r1
     806:	b1 05       	cpc	r27, r1
     808:	19 f4       	brne	.+6      	; 0x810 <ultra_led+0x76>
	{
		
		PORTA = ~0xf8;
     80a:	87 e0       	ldi	r24, 0x07	; 7
     80c:	8b bb       	out	0x1b, r24	; 27
     80e:	08 95       	ret

	}
	else if(ultrasonic_distance58 == 8)
     810:	88 30       	cpi	r24, 0x08	; 8
     812:	91 05       	cpc	r25, r1
     814:	a1 05       	cpc	r26, r1
     816:	b1 05       	cpc	r27, r1
     818:	19 f4       	brne	.+6      	; 0x820 <ultra_led+0x86>
	{
		
		PORTA = ~0xfc;
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	8b bb       	out	0x1b, r24	; 27
     81e:	08 95       	ret

	}
	else if(ultrasonic_distance58 == 9)
     820:	89 30       	cpi	r24, 0x09	; 9
     822:	91 05       	cpc	r25, r1
     824:	a1 05       	cpc	r26, r1
     826:	b1 05       	cpc	r27, r1
     828:	19 f4       	brne	.+6      	; 0x830 <ultra_led+0x96>
	{
		
		PORTA = ~0xfe;
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	8b bb       	out	0x1b, r24	; 27
     82e:	08 95       	ret

	}
	else if(ultrasonic_distance58 >= 10)
     830:	0a 97       	sbiw	r24, 0x0a	; 10
     832:	a1 05       	cpc	r26, r1
     834:	b1 05       	cpc	r27, r1
     836:	c0 f0       	brcs	.+48     	; 0x868 <ultra_led+0xce>
	{
		if(funcyc)
     838:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <funcyc>
     83c:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <funcyc+0x1>
     840:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <funcyc+0x2>
     844:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <funcyc+0x3>
     848:	89 2b       	or	r24, r25
     84a:	8a 2b       	or	r24, r26
     84c:	8b 2b       	or	r24, r27
     84e:	59 f0       	breq	.+22     	; 0x866 <ultra_led+0xcc>
		{
			funcyc = 0; 
     850:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <funcyc>
     854:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <funcyc+0x1>
     858:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <funcyc+0x2>
     85c:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <funcyc+0x3>
			PORTA = 0xff;
     860:	8f ef       	ldi	r24, 0xFF	; 255
     862:	8b bb       	out	0x1b, r24	; 27
     864:	08 95       	ret
			
		}
		else
		PORTA = 0x00; 
     866:	1b ba       	out	0x1b, r1	; 27
     868:	08 95       	ret

0000086a <__vector_16>:
// 3. 8 bit Timer OV : 4us * 256 = 1.024ms
// 256개의 pulse 를 count 하면 이곳으로 온다
//

ISR(TIMER0_OVF_vect) // 인터럽트 루틴을 길게 짤 수록 output delay가 증가하여 원하는 시간에 출력이 나오지 않음
{
     86a:	1f 92       	push	r1
     86c:	0f 92       	push	r0
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	0f 92       	push	r0
     872:	11 24       	eor	r1, r1
     874:	0b b6       	in	r0, 0x3b	; 59
     876:	0f 92       	push	r0
     878:	cf 92       	push	r12
     87a:	df 92       	push	r13
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	2f 93       	push	r18
     882:	3f 93       	push	r19
     884:	4f 93       	push	r20
     886:	5f 93       	push	r21
     888:	6f 93       	push	r22
     88a:	7f 93       	push	r23
     88c:	8f 93       	push	r24
     88e:	9f 93       	push	r25
     890:	af 93       	push	r26
     892:	bf 93       	push	r27
     894:	ef 93       	push	r30
     896:	ff 93       	push	r31
	TCNT0 = 6; // TCNT를 6~256 == > 정확히 1ms 를 유지하기 위해
     898:	86 e0       	ldi	r24, 0x06	; 6
     89a:	82 bf       	out	0x32, r24	; 50
	// TINT 0 OVF INT 6
	ms_count++;
     89c:	c0 90 f7 01 	lds	r12, 0x01F7	; 0x8001f7 <ms_count>
     8a0:	d0 90 f8 01 	lds	r13, 0x01F8	; 0x8001f8 <ms_count+0x1>
     8a4:	e0 90 f9 01 	lds	r14, 0x01F9	; 0x8001f9 <ms_count+0x2>
     8a8:	f0 90 fa 01 	lds	r15, 0x01FA	; 0x8001fa <ms_count+0x3>
     8ac:	2f ef       	ldi	r18, 0xFF	; 255
     8ae:	c2 1a       	sub	r12, r18
     8b0:	d2 0a       	sbc	r13, r18
     8b2:	e2 0a       	sbc	r14, r18
     8b4:	f2 0a       	sbc	r15, r18
     8b6:	c0 92 f7 01 	sts	0x01F7, r12	; 0x8001f7 <ms_count>
     8ba:	d0 92 f8 01 	sts	0x01F8, r13	; 0x8001f8 <ms_count+0x1>
     8be:	e0 92 f9 01 	sts	0x01F9, r14	; 0x8001f9 <ms_count+0x2>
     8c2:	f0 92 fa 01 	sts	0x01FA, r15	; 0x8001fa <ms_count+0x3>
	ms_count2++;
     8c6:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ms_count2>
     8ca:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <ms_count2+0x1>
     8ce:	a0 91 f1 01 	lds	r26, 0x01F1	; 0x8001f1 <ms_count2+0x2>
     8d2:	b0 91 f2 01 	lds	r27, 0x01F2	; 0x8001f2 <ms_count2+0x3>
     8d6:	bc 01       	movw	r22, r24
     8d8:	cd 01       	movw	r24, r26
     8da:	6f 5f       	subi	r22, 0xFF	; 255
     8dc:	7f 4f       	sbci	r23, 0xFF	; 255
     8de:	8f 4f       	sbci	r24, 0xFF	; 255
     8e0:	9f 4f       	sbci	r25, 0xFF	; 255
     8e2:	60 93 ef 01 	sts	0x01EF, r22	; 0x8001ef <ms_count2>
     8e6:	70 93 f0 01 	sts	0x01F0, r23	; 0x8001f0 <ms_count2+0x1>
     8ea:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <ms_count2+0x2>
     8ee:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <ms_count2+0x3>
	ms_clock_display ++; // LCD에 분초 시계 Display 하기 위한 interval 조절 Count
     8f2:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <ms_clock_display>
     8f6:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <ms_clock_display+0x1>
     8fa:	2f 5f       	subi	r18, 0xFF	; 255
     8fc:	3f 4f       	sbci	r19, 0xFF	; 255
     8fe:	30 93 e6 01 	sts	0x01E6, r19	; 0x8001e6 <ms_clock_display+0x1>
     902:	20 93 e5 01 	sts	0x01E5, r18	; 0x8001e5 <ms_clock_display>
	ms_stop_display ++;
     906:	20 91 e3 01 	lds	r18, 0x01E3	; 0x8001e3 <ms_stop_display>
     90a:	30 91 e4 01 	lds	r19, 0x01E4	; 0x8001e4 <ms_stop_display+0x1>
     90e:	2f 5f       	subi	r18, 0xFF	; 255
     910:	3f 4f       	sbci	r19, 0xFF	; 255
     912:	30 93 e4 01 	sts	0x01E4, r19	; 0x8001e4 <ms_stop_display+0x1>
     916:	20 93 e3 01 	sts	0x01E3, r18	; 0x8001e3 <ms_stop_display>
	ultrasonic_trigger_timer++;
     91a:	20 91 e1 01 	lds	r18, 0x01E1	; 0x8001e1 <ultrasonic_trigger_timer>
     91e:	30 91 e2 01 	lds	r19, 0x01E2	; 0x8001e2 <ultrasonic_trigger_timer+0x1>
     922:	2f 5f       	subi	r18, 0xFF	; 255
     924:	3f 4f       	sbci	r19, 0xFF	; 255
     926:	30 93 e2 01 	sts	0x01E2, r19	; 0x8001e2 <ultrasonic_trigger_timer+0x1>
     92a:	20 93 e1 01 	sts	0x01E1, r18	; 0x8001e1 <ultrasonic_trigger_timer>
	del = 1000; // delay ms 변수 300ms
     92e:	28 ee       	ldi	r18, 0xE8	; 232
     930:	33 e0       	ldi	r19, 0x03	; 3
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	20 93 eb 01 	sts	0x01EB, r18	; 0x8001eb <del>
     93a:	30 93 ec 01 	sts	0x01EC, r19	; 0x8001ec <del+0x1>
     93e:	40 93 ed 01 	sts	0x01ED, r20	; 0x8001ed <del+0x2>
     942:	50 93 ee 01 	sts	0x01EE, r21	; 0x8001ee <del+0x3>
	if(ms_count2 % del == 0)
     946:	80 d6       	rcall	.+3328   	; 0x1648 <__udivmodsi4>
     948:	67 2b       	or	r22, r23
     94a:	68 2b       	or	r22, r24
     94c:	69 2b       	or	r22, r25
     94e:	99 f4       	brne	.+38     	; 0x976 <__vector_16+0x10c>
	{
		
		funcyc++;
     950:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <funcyc>
     954:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <funcyc+0x1>
     958:	a0 91 e9 01 	lds	r26, 0x01E9	; 0x8001e9 <funcyc+0x2>
     95c:	b0 91 ea 01 	lds	r27, 0x01EA	; 0x8001ea <funcyc+0x3>
     960:	01 96       	adiw	r24, 0x01	; 1
     962:	a1 1d       	adc	r26, r1
     964:	b1 1d       	adc	r27, r1
     966:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <funcyc>
     96a:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <funcyc+0x1>
     96e:	a0 93 e9 01 	sts	0x01E9, r26	; 0x8001e9 <funcyc+0x2>
     972:	b0 93 ea 01 	sts	0x01EA, r27	; 0x8001ea <funcyc+0x3>
	}
	
	if (ms_count >= 1000)   // 1000ms ==> 1sec
     976:	88 ee       	ldi	r24, 0xE8	; 232
     978:	c8 16       	cp	r12, r24
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	d8 06       	cpc	r13, r24
     97e:	e1 04       	cpc	r14, r1
     980:	f1 04       	cpc	r15, r1
     982:	e0 f0       	brcs	.+56     	; 0x9bc <__vector_16+0x152>
	{
		ms_count=0;
     984:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <ms_count>
     988:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <ms_count+0x1>
     98c:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <ms_count+0x2>
     990:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <ms_count+0x3>
		sec_count++;    // sec counter 증가
     994:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <sec_count>
     998:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <sec_count+0x1>
     99c:	a0 91 f5 01 	lds	r26, 0x01F5	; 0x8001f5 <sec_count+0x2>
     9a0:	b0 91 f6 01 	lds	r27, 0x01F6	; 0x8001f6 <sec_count+0x3>
     9a4:	01 96       	adiw	r24, 0x01	; 1
     9a6:	a1 1d       	adc	r26, r1
     9a8:	b1 1d       	adc	r27, r1
     9aa:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <sec_count>
     9ae:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <sec_count+0x1>
     9b2:	a0 93 f5 01 	sts	0x01F5, r26	; 0x8001f5 <sec_count+0x2>
     9b6:	b0 93 f6 01 	sts	0x01F6, r27	; 0x8001f6 <sec_count+0x3>
		inc_time_sec(); // 1초에 한번 씩 call
     9ba:	1a d2       	rcall	.+1076   	; 0xdf0 <inc_time_sec>
	}
	if (ms_count%4 == 0)  //4ms 마다 fnd를 display
     9bc:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <ms_count>
     9c0:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <ms_count+0x1>
     9c4:	a0 91 f9 01 	lds	r26, 0x01F9	; 0x8001f9 <ms_count+0x2>
     9c8:	b0 91 fa 01 	lds	r27, 0x01FA	; 0x8001fa <ms_count+0x3>
     9cc:	83 70       	andi	r24, 0x03	; 3
     9ce:	99 27       	eor	r25, r25
     9d0:	aa 27       	eor	r26, r26
     9d2:	bb 27       	eor	r27, r27
     9d4:	89 2b       	or	r24, r25
     9d6:	8a 2b       	or	r24, r26
     9d8:	8b 2b       	or	r24, r27
	display_fnd();
     9da:	09 f4       	brne	.+2      	; 0x9de <__vector_16+0x174>
     9dc:	1f dc       	rcall	.-1986   	; 0x21c <display_fnd>
	
	if(stopwatch_state == RUN)
     9de:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stopwatch_state>
     9e2:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stopwatch_state+0x1>
	inc_stopwatch_clock();
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	09 f4       	brne	.+2      	; 0x9ec <__vector_16+0x182>
	
	if(get_BUTTON3())			// timer reset
     9ea:	69 d1       	rcall	.+722    	; 0xcbe <inc_stopwatch_clock>
     9ec:	de db       	rcall	.-2116   	; 0x1aa <get_BUTTON3>
     9ee:	89 2b       	or	r24, r25
     9f0:	51 f0       	breq	.+20     	; 0xa06 <__vector_16+0x19c>
	{
		time_clock.sec = 0;
     9f2:	e6 e0       	ldi	r30, 0x06	; 6
     9f4:	f2 e0       	ldi	r31, 0x02	; 2
     9f6:	12 82       	std	Z+2, r1	; 0x02
		time_clock.min = 0;
     9f8:	11 82       	std	Z+1, r1	; 0x01
		time_clock.hour = 0;
     9fa:	10 82       	st	Z, r1
		
		PORTF &= ~0x06;
     9fc:	e2 e6       	ldi	r30, 0x62	; 98
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	80 81       	ld	r24, Z
     a02:	89 7f       	andi	r24, 0xF9	; 249
     a04:	80 83       	st	Z, r24
	}
	
	
	count12++;
     a06:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <count12>
     a0a:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <count12+0x1>
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <count12+0x1>
     a14:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <count12>
	if(count12 >=500)// 0.512sec : 512ms 오버플로우 500회 이상일 때 조건문 실행
     a18:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <count12>
     a1c:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <count12+0x1>
     a20:	84 3f       	cpi	r24, 0xF4	; 244
     a22:	91 40       	sbci	r25, 0x01	; 1
     a24:	1c f1       	brlt	.+70     	; 0xa6c <__vector_16+0x202>
	{
		count12 = 0;			// counter initial
     a26:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <count12+0x1>
     a2a:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <count12>
		state = !state;		// reverse led state
     a2e:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <state>
     a32:	30 91 de 01 	lds	r19, 0x01DE	; 0x8001de <state+0x1>
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	23 2b       	or	r18, r19
     a3c:	11 f0       	breq	.+4      	; 0xa42 <__vector_16+0x1d8>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <state+0x1>
     a46:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <state>
		if(state)
     a4a:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <state>
     a4e:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <state+0x1>
     a52:	89 2b       	or	r24, r25
     a54:	31 f0       	breq	.+12     	; 0xa62 <__vector_16+0x1f8>
		{
			PORTF |= 0x01;	// LED ON 해당하는 값만 ON시키기 위해 OR연산자 사용
     a56:	e2 e6       	ldi	r30, 0x62	; 98
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	80 81       	ld	r24, Z
     a5c:	81 60       	ori	r24, 0x01	; 1
     a5e:	80 83       	st	Z, r24
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__vector_16+0x202>
		}
		else
		{
			PORTF &= ~0x01;	// LED OFF 해당하는 PIN만 OFF시키기 위해 AND연산자 사용
     a62:	e2 e6       	ldi	r30, 0x62	; 98
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	80 81       	ld	r24, Z
     a68:	8e 7f       	andi	r24, 0xFE	; 254
		}
		
	}
	
	if(get_BUTTON1())
     a6a:	80 83       	st	Z, r24
     a6c:	40 db       	rcall	.-2432   	; 0xee <get_BUTTON1>
     a6e:	89 2b       	or	r24, r25
     a70:	29 f1       	breq	.+74     	; 0xabc <__vector_16+0x252>
	{
		
		state1 = !state1;		// reverse led state
     a72:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <state1>
     a76:	30 91 dc 01 	lds	r19, 0x01DC	; 0x8001dc <state1+0x1>
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	23 2b       	or	r18, r19
     a80:	11 f0       	breq	.+4      	; 0xa86 <__vector_16+0x21c>
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <state1+0x1>
     a8a:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <state1>
		if(state1)
     a8e:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <state1>
     a92:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <state1+0x1>
     a96:	89 2b       	or	r24, r25
     a98:	49 f0       	breq	.+18     	; 0xaac <__vector_16+0x242>
		{
			PORTF |= 0x04;
     a9a:	e2 e6       	ldi	r30, 0x62	; 98
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	80 81       	ld	r24, Z
     aa0:	84 60       	ori	r24, 0x04	; 4
     aa2:	80 83       	st	Z, r24
			PORTF &= ~0x02;	// LED ON 해당하는 값만 ON시키기 위해 OR연산자 사용
     aa4:	80 81       	ld	r24, Z
     aa6:	8d 7f       	andi	r24, 0xFD	; 253
     aa8:	80 83       	st	Z, r24
     aaa:	08 c0       	rjmp	.+16     	; 0xabc <__vector_16+0x252>
		}
		else
		{
			PORTF |= 0x02;
     aac:	e2 e6       	ldi	r30, 0x62	; 98
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	82 60       	ori	r24, 0x02	; 2
     ab4:	80 83       	st	Z, r24
			PORTF &= ~0x04;	// LED OFF 해당하는 PIN만 OFF시키기 위해 AND연산자 사용
     ab6:	80 81       	ld	r24, Z
     ab8:	8b 7f       	andi	r24, 0xFB	; 251
     aba:	80 83       	st	Z, r24
	}
	
	
	
	
}
     abc:	ff 91       	pop	r31
     abe:	ef 91       	pop	r30
     ac0:	bf 91       	pop	r27
     ac2:	af 91       	pop	r26
     ac4:	9f 91       	pop	r25
     ac6:	8f 91       	pop	r24
     ac8:	7f 91       	pop	r23
     aca:	6f 91       	pop	r22
     acc:	5f 91       	pop	r21
     ace:	4f 91       	pop	r20
     ad0:	3f 91       	pop	r19
     ad2:	2f 91       	pop	r18
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	df 90       	pop	r13
     ada:	cf 90       	pop	r12
     adc:	0f 90       	pop	r0
     ade:	0b be       	out	0x3b, r0	; 59
     ae0:	0f 90       	pop	r0
     ae2:	0f be       	out	0x3f, r0	; 63
     ae4:	0f 90       	pop	r0
     ae6:	1f 90       	pop	r1
     ae8:	18 95       	reti

00000aea <init_timer0>:

}

void init_timer0()
{
	TCNT0 = 6;
     aea:	86 e0       	ldi	r24, 0x06	; 6
     aec:	82 bf       	out	0x32, r24	; 50
	
	DDRF = 0x01 + 0x02 + 0x04;
     aee:	87 e0       	ldi	r24, 0x07	; 7
     af0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
	PORTF |= 0x02;
     af4:	e2 e6       	ldi	r30, 0x62	; 98
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	80 81       	ld	r24, Z
     afa:	82 60       	ori	r24, 0x02	; 2
     afc:	80 83       	st	Z, r24
	
	TCCR0 |= (1 << CS02) | (0 << CS01) | (0 << CS00);  //  분주비를 64로 설정
     afe:	83 b7       	in	r24, 0x33	; 51
     b00:	84 60       	ori	r24, 0x04	; 4
     b02:	83 bf       	out	0x33, r24	; 51
	
	TIMSK |= (1 << TOIE0);
     b04:	87 b7       	in	r24, 0x37	; 55
     b06:	81 60       	ori	r24, 0x01	; 1
     b08:	87 bf       	out	0x37, r24	; 55
     b0a:	08 95       	ret

00000b0c <ultrasonic_distance_check>:

}

void ultrasonic_distance_check()
{
	if(ultrasonic_trigger_timer > 1000)
     b0c:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <ultrasonic_trigger_timer>
     b10:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <ultrasonic_trigger_timer+0x1>
     b14:	89 3e       	cpi	r24, 0xE9	; 233
     b16:	93 40       	sbci	r25, 0x03	; 3
     b18:	44 f0       	brlt	.+16     	; 0xb2a <ultrasonic_distance_check+0x1e>
	{
		ultrasonic_trigger_timer = 0;
     b1a:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <ultrasonic_trigger_timer+0x1>
     b1e:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <ultrasonic_trigger_timer>
		printf("%s\n", scm);
     b22:	85 eb       	ldi	r24, 0xB5	; 181
     b24:	92 e0       	ldi	r25, 0x02	; 2
     b26:	ec d5       	rcall	.+3032   	; 0x1700 <puts>
		ultrasonic_trigger();
     b28:	da c3       	rjmp	.+1972   	; 0x12de <ultrasonic_trigger>
     b2a:	08 95       	ret

00000b2c <main>:
     b2c:	cf 93       	push	r28
int mode = WATCH;



int main(void)
{
     b2e:	df 93       	push	r29
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
     b34:	c3 55       	subi	r28, 0x53	; 83
     b36:	d1 09       	sbc	r29, r1
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
	TIME myTIME; // 시계를 구동
	char sbuf[40];
	char sbuf2[40];
	
	
	init_led();
     b42:	21 dd       	rcall	.-1470   	; 0x586 <init_led>
	init_fnd();
     b44:	55 dc       	rcall	.-1878   	; 0x3f0 <init_fnd>
	init_BUTTON();
     b46:	cf da       	rcall	.-2658   	; 0xe6 <init_BUTTON>
	init_uart0(); // UART0를 초기화 한다.
     b48:	a8 d1       	rcall	.+848    	; 0xe9a <init_uart0>
     b4a:	69 d2       	rcall	.+1234   	; 0x101e <init_UART1>
	init_UART1(); // UART1 initial
     b4c:	d8 dc       	rcall	.-1616   	; 0x4fe <I2C_LCD_init>
     b4e:	80 e0       	ldi	r24, 0x00	; 0
	I2C_LCD_init();  // I2C LCD Initial
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <__iob+0x3>
	stdout = &OUTPUT; // for printf /fprintf(stdout, "test"); ==> printf stdin : 입력
     b56:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <__iob+0x2>
     b5a:	c7 df       	rcall	.-114    	; 0xaea <init_timer0>
	init_timer0();
     b5c:	ae d3       	rcall	.+1884   	; 0x12ba <init_ultrasonic>
     b5e:	78 94       	sei
	init_ultrasonic();
     b60:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <mode+0x1>
	sei();			 // global interrupt 활성화
     b64:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <mode>
	
	
	
	mode = WATCH; // 시계모드로 시작
     b68:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <stopwatch_state+0x1>
     b6c:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <stopwatch_state>
	stopwatch_state = STOP;
     b70:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <mode>
     b74:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <mode+0x1>

	
	while (1)
	{

		switch(mode)
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	19 f0       	breq	.+6      	; 0xb82 <main+0x56>
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	b9 f0       	breq	.+46     	; 0xbae <main+0x82>
     b80:	2e c0       	rjmp	.+92     	; 0xbde <main+0xb2>
     b82:	ce 01       	movw	r24, r28
     b84:	01 96       	adiw	r24, 0x01	; 1
		{
			case WATCH :
			get_time_clock(&myTIME);
     b86:	29 d1       	rcall	.+594    	; 0xdda <get_time_clock>
     b88:	2a 81       	ldd	r18, Y+2	; 0x02
     b8a:	8b 81       	ldd	r24, Y+3	; 0x03
			set_fnd_data(myTIME.min*100 + myTIME.sec);
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	34 e6       	ldi	r19, 0x64	; 100
     b90:	23 9f       	mul	r18, r19
     b92:	80 0d       	add	r24, r0
     b94:	91 1d       	adc	r25, r1
     b96:	11 24       	eor	r1, r1
     b98:	37 db       	rcall	.-2450   	; 0x208 <set_fnd_data>
     b9a:	a9 da       	rcall	.-2734   	; 0xee <get_BUTTON1>
     b9c:	89 2b       	or	r24, r25
			if(get_BUTTON1())
     b9e:	f9 f0       	breq	.+62     	; 0xbde <main+0xb2>
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <mode+0x1>
			{
				mode = STOPWATCH;
     ba8:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <mode>
     bac:	18 c0       	rjmp	.+48     	; 0xbde <main+0xb2>
     bae:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <stopwatch_state>
     bb2:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <stopwatch_state+0x1>
			}
			break;
			
			case STOPWATCH :
			switch (stopwatch_state)
     bb6:	81 30       	cpi	r24, 0x01	; 1
     bb8:	91 05       	cpc	r25, r1
     bba:	39 f0       	breq	.+14     	; 0xbca <main+0x9e>
     bbc:	82 30       	cpi	r24, 0x02	; 2
     bbe:	91 05       	cpc	r25, r1
     bc0:	31 f0       	breq	.+12     	; 0xbce <main+0xa2>
     bc2:	89 2b       	or	r24, r25
			{
				case STOP :
				stopwatch_stop();
     bc4:	29 f4       	brne	.+10     	; 0xbd0 <main+0xa4>
				break;
				case RUN :
				stopwatch_run();
     bc6:	d3 d0       	rcall	.+422    	; 0xd6e <stopwatch_stop>
				break;
     bc8:	03 c0       	rjmp	.+6      	; 0xbd0 <main+0xa4>
				case RESET :
				
				stopwatch_reset();
     bca:	c4 d0       	rcall	.+392    	; 0xd54 <stopwatch_run>
     bcc:	01 c0       	rjmp	.+2      	; 0xbd0 <main+0xa4>
				break;

			}
			if(get_BUTTON1())
     bce:	e7 d0       	rcall	.+462    	; 0xd9e <stopwatch_reset>
     bd0:	8e da       	rcall	.-2788   	; 0xee <get_BUTTON1>
     bd2:	89 2b       	or	r24, r25
     bd4:	21 f0       	breq	.+8      	; 0xbde <main+0xb2>
			{
				
				mode = WATCH;
     bd6:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <mode+0x1>
     bda:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <mode>
			}
			break;
		}
		ultra_led();
     bde:	dd dd       	rcall	.-1094   	; 0x79a <ultra_led>
     be0:	6f d1       	rcall	.+734    	; 0xec0 <pc_command_processing>
		pc_command_processing(); // pc에서 받는 command를 처리 fnuc
     be2:	2d d2       	rcall	.+1114   	; 0x103e <bt_command_processing>
     be4:	93 df       	rcall	.-218    	; 0xb0c <ultrasonic_distance_check>
		bt_command_processing(); // bluetooth 에서 받는 data 처리 func
     be6:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <ms_clock_display>
		ultrasonic_distance_check();
     bea:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <ms_clock_display+0x1>
		 
		if(ms_clock_display > 1000)  // 1초
     bee:	89 3e       	cpi	r24, 0xE9	; 233
     bf0:	93 40       	sbci	r25, 0x03	; 3
     bf2:	54 f1       	brlt	.+84     	; 0xc48 <main+0x11c>
     bf4:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <ms_clock_display+0x1>
		{
			ms_clock_display = 0; // reset
     bf8:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <ms_clock_display>
     bfc:	48 e1       	ldi	r20, 0x18	; 24
     bfe:	51 e0       	ldi	r21, 0x01	; 1
			I2C_LCD_write_string_XY(0, 0, "                ");
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	b5 dc       	rcall	.-1686   	; 0x574 <I2C_LCD_write_string_XY>
     c0a:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <ultrasonic_distance>
			sprintf(sbuf, " %8dcm",ultrasonic_distance/58);	// 정수를 ASCII로 변환할 때 사용함
     c0e:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <ultrasonic_distance+0x1>
     c12:	6a e3       	ldi	r22, 0x3A	; 58
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	05 d5       	rcall	.+2570   	; 0x1622 <__divmodhi4>
     c18:	7f 93       	push	r23
     c1a:	6f 93       	push	r22
     c1c:	89 e2       	ldi	r24, 0x29	; 41
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	9f 93       	push	r25
     c22:	8f 93       	push	r24
     c24:	8e 01       	movw	r16, r28
     c26:	0c 5f       	subi	r16, 0xFC	; 252
     c28:	1f 4f       	sbci	r17, 0xFF	; 255
     c2a:	1f 93       	push	r17
     c2c:	0f 93       	push	r16
     c2e:	98 d5       	rcall	.+2864   	; 0x1760 <sprintf>
     c30:	a8 01       	movw	r20, r16
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	70 e0       	ldi	r23, 0x00	; 0
			// \n은 사용할 수 없음 none display char임
			I2C_LCD_write_string_XY(0, 0, sbuf);							//  1초에 한 번씩 실행하므로 프로세스에 무리가 가지 않는다.
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	9c dc       	rcall	.-1736   	; 0x574 <I2C_LCD_write_string_XY>
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <ms_stop_display>
     c4c:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <ms_stop_display+0x1>
			
			
			
		}
		if(ms_stop_display > 500)
     c50:	85 3f       	cpi	r24, 0xF5	; 245
     c52:	91 40       	sbci	r25, 0x01	; 1
     c54:	0c f4       	brge	.+2      	; 0xc58 <main+0x12c>
     c56:	8c cf       	rjmp	.-232    	; 0xb70 <main+0x44>
     c58:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <ms_stop_display+0x1>
     c5c:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <ms_stop_display>
		{
			ms_stop_display = 0;
     c60:	48 e1       	ldi	r20, 0x18	; 24
     c62:	51 e0       	ldi	r21, 0x01	; 1
     c64:	60 e0       	ldi	r22, 0x00	; 0
			
			I2C_LCD_write_string_XY(1, 0, "                ");
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	83 dc       	rcall	.-1786   	; 0x574 <I2C_LCD_write_string_XY>
     c6e:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <stopwatch_sec+0x1>
     c72:	8f 93       	push	r24
     c74:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <stopwatch_sec>
			sprintf(sbuf2, "stop : %2d:%2d:%2d",stopwatch_hour, stopwatch_min, stopwatch_sec);	// 정수를 ASCII로 변환할 때 사용함
     c78:	8f 93       	push	r24
     c7a:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <stopwatch_min+0x1>
     c7e:	8f 93       	push	r24
     c80:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <stopwatch_min>
     c84:	8f 93       	push	r24
     c86:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <stopwatch_hour+0x1>
     c8a:	8f 93       	push	r24
     c8c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <stopwatch_hour>
     c90:	8f 93       	push	r24
     c92:	80 e3       	ldi	r24, 0x30	; 48
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	9f 93       	push	r25
     c98:	8f 93       	push	r24
     c9a:	8e 01       	movw	r16, r28
     c9c:	04 5d       	subi	r16, 0xD4	; 212
     c9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ca0:	1f 93       	push	r17
     ca2:	0f 93       	push	r16
     ca4:	5d d5       	rcall	.+2746   	; 0x1760 <sprintf>
     ca6:	a8 01       	movw	r20, r16
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
			// \n은 사용할 수 없음 none display char임
			I2C_LCD_write_string_XY(1, 0, sbuf2);
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	61 dc       	rcall	.-1854   	; 0x574 <I2C_LCD_write_string_XY>
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	f8 94       	cli
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	cd bf       	out	0x3d, r28	; 61
     cbc:	59 cf       	rjmp	.-334    	; 0xb70 <main+0x44>

00000cbe <inc_stopwatch_clock>:


// 1초에 한 번씩 Call을 한다.
void inc_stopwatch_clock(void)
{	
	count++; 
     cbe:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <count>
     cc2:	8f 5f       	subi	r24, 0xFF	; 255
     cc4:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <count>
	if(count >= 100 )
     cc8:	84 36       	cpi	r24, 0x64	; 100
     cca:	78 f1       	brcs	.+94     	; 0xd2a <inc_stopwatch_clock+0x6c>
	{
		count = 0; 
     ccc:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <count>
		
		stopwatch_sec++;
     cd0:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <stopwatch_sec>
     cd4:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <stopwatch_sec+0x1>
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <stopwatch_sec+0x1>
     cde:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <stopwatch_sec>
		if(stopwatch_sec >= 60)
     ce2:	cc 97       	sbiw	r24, 0x3c	; 60
     ce4:	14 f1       	brlt	.+68     	; 0xd2a <inc_stopwatch_clock+0x6c>
		{
			stopwatch_sec = 0; // 다음 초를 위해 CLEAR
     ce6:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <stopwatch_sec+0x1>
     cea:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <stopwatch_sec>
			stopwatch_min++;
     cee:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <stopwatch_min>
     cf2:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <stopwatch_min+0x1>
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <stopwatch_min+0x1>
     cfc:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <stopwatch_min>
			
			if(stopwatch_min >= 60)
     d00:	cc 97       	sbiw	r24, 0x3c	; 60
     d02:	9c f0       	brlt	.+38     	; 0xd2a <inc_stopwatch_clock+0x6c>
			{
				stopwatch_min = 0;
     d04:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <stopwatch_min+0x1>
     d08:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <stopwatch_min>
				stopwatch_hour++;
     d0c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <stopwatch_hour>
     d10:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <stopwatch_hour+0x1>
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <stopwatch_hour+0x1>
     d1a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <stopwatch_hour>
				
				if(stopwatch_hour >=24)
     d1e:	48 97       	sbiw	r24, 0x18	; 24
     d20:	24 f0       	brlt	.+8      	; 0xd2a <inc_stopwatch_clock+0x6c>
				{
					stopwatch_hour = 0;
     d22:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <stopwatch_hour+0x1>
     d26:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <stopwatch_hour>
					
				}
			}
		}
	}
	 stopwatchclock = (stopwatch_sec + stopwatch_min * 100 ); // 총 몇인지 나옴 
     d2a:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <stopwatch_min>
     d2e:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <stopwatch_min+0x1>
     d32:	44 e6       	ldi	r20, 0x64	; 100
     d34:	48 9f       	mul	r20, r24
     d36:	90 01       	movw	r18, r0
     d38:	49 9f       	mul	r20, r25
     d3a:	30 0d       	add	r19, r0
     d3c:	11 24       	eor	r1, r1
     d3e:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <stopwatch_sec>
     d42:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <stopwatch_sec+0x1>
     d46:	82 0f       	add	r24, r18
     d48:	93 1f       	adc	r25, r19
     d4a:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <stopwatchclock+0x1>
     d4e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <stopwatchclock>
     d52:	08 95       	ret

00000d54 <stopwatch_run>:


 
void stopwatch_run()
{
	set_fnd_data(stopwatchclock); // FND에 출력할 data가 넘어간다. 
     d54:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <stopwatchclock>
     d58:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <stopwatchclock+0x1>
     d5c:	55 da       	rcall	.-2902   	; 0x208 <set_fnd_data>
	
	if (get_BUTTON2())
     d5e:	f6 d9       	rcall	.-3092   	; 0x14c <get_BUTTON2>
     d60:	89 2b       	or	r24, r25
     d62:	21 f0       	breq	.+8      	; 0xd6c <stopwatch_run+0x18>
     d64:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <stopwatch_state+0x1>
	{
		stopwatch_state = STOP; 
     d68:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <stopwatch_state>
     d6c:	08 95       	ret

00000d6e <stopwatch_stop>:
     d6e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <stopwatchclock>
	}
}

void stopwatch_stop()
{
	set_fnd_data(stopwatchclock); // FND에 출력할 data가 넘어간다.
     d72:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <stopwatchclock+0x1>
     d76:	48 da       	rcall	.-2928   	; 0x208 <set_fnd_data>
	
	if (get_BUTTON2())
     d78:	e9 d9       	rcall	.-3118   	; 0x14c <get_BUTTON2>
     d7a:	89 2b       	or	r24, r25
     d7c:	31 f0       	breq	.+12     	; 0xd8a <stopwatch_stop+0x1c>
     d7e:	81 e0       	ldi	r24, 0x01	; 1
	{
		stopwatch_state = RUN; 
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <stopwatch_state+0x1>
     d86:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <stopwatch_state>
		
	}
	if (get_BUTTON3())
     d8a:	0f da       	rcall	.-3042   	; 0x1aa <get_BUTTON3>
     d8c:	89 2b       	or	r24, r25
     d8e:	31 f0       	breq	.+12     	; 0xd9c <stopwatch_stop+0x2e>
     d90:	82 e0       	ldi	r24, 0x02	; 2
	{
		stopwatch_state = RESET; 
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <stopwatch_state+0x1>
     d98:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <stopwatch_state>
     d9c:	08 95       	ret

00000d9e <stopwatch_reset>:
     d9e:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <stopwatchclock+0x1>
	}
}

void stopwatch_reset()
{
	stopwatchclock = 0; 
     da2:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <stopwatchclock>
	stopwatch_state = 0;
     da6:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <stopwatch_state+0x1>
     daa:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <stopwatch_state>
	stopwatch_hour = 0;
     dae:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <stopwatch_hour+0x1>
     db2:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <stopwatch_hour>
	stopwatch_min = 0;
     db6:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <stopwatch_min+0x1>
     dba:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <stopwatch_min>
	stopwatch_sec = 0;
     dbe:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <stopwatch_sec+0x1>
     dc2:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <stopwatch_sec>
	count = 0;
     dc6:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <count>
	
	set_fnd_data(stopwatchclock);
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	1c da       	rcall	.-3016   	; 0x208 <set_fnd_data>
	stopwatch_state = STOP;
     dd0:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <stopwatch_state+0x1>
     dd4:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <stopwatch_state>
     dd8:	08 95       	ret

00000dda <get_time_clock>:
	 *time=time_clock;			// call by ref 
	
}
void set_time_clock(TIME time) // *time 은 TIME의 주소를 갖는다.
{
	time_clock = time;		   // call by value
     dda:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <time_clock>
     dde:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <time_clock+0x1>
     de2:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <time_clock+0x2>
     de6:	fc 01       	movw	r30, r24
     de8:	20 83       	st	Z, r18
     dea:	31 83       	std	Z+1, r19	; 0x01
     dec:	42 83       	std	Z+2, r20	; 0x02
     dee:	08 95       	ret

00000df0 <inc_time_sec>:
	
}
// 1초에 한 번씩 Call을 한다. 
void inc_time_sec(void)
{
	time_clock.sec++;
     df0:	e6 e0       	ldi	r30, 0x06	; 6
     df2:	f2 e0       	ldi	r31, 0x02	; 2
     df4:	82 81       	ldd	r24, Z+2	; 0x02
     df6:	8f 5f       	subi	r24, 0xFF	; 255
     df8:	82 83       	std	Z+2, r24	; 0x02
	if(time_clock.sec >= 60)
     dfa:	8c 33       	cpi	r24, 0x3C	; 60
     dfc:	70 f0       	brcs	.+28     	; 0xe1a <inc_time_sec+0x2a>
	{
		time_clock.sec = 0; // 다음 초를 위해 CLEAR
     dfe:	12 82       	std	Z+2, r1	; 0x02
		time_clock.min++; 
     e00:	81 81       	ldd	r24, Z+1	; 0x01
     e02:	8f 5f       	subi	r24, 0xFF	; 255
     e04:	81 83       	std	Z+1, r24	; 0x01
		
		if(time_clock.min >= 60)
     e06:	8c 33       	cpi	r24, 0x3C	; 60
     e08:	40 f0       	brcs	.+16     	; 0xe1a <inc_time_sec+0x2a>
		{
			time_clock.min = 0;
     e0a:	11 82       	std	Z+1, r1	; 0x01
			time_clock.hour++; 
     e0c:	80 81       	ld	r24, Z
     e0e:	8f 5f       	subi	r24, 0xFF	; 255
     e10:	80 83       	st	Z, r24
			
			if(time_clock.hour >=24)
     e12:	88 31       	cpi	r24, 0x18	; 24
     e14:	10 f0       	brcs	.+4      	; 0xe1a <inc_time_sec+0x2a>
			{
				time_clock.hour = 0;
     e16:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <time_clock>
     e1a:	08 95       	ret

00000e1c <__vector_18>:




ISR(USART0_RX_vect)
{
     e1c:	1f 92       	push	r1
     e1e:	0f 92       	push	r0
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	0f 92       	push	r0
     e24:	11 24       	eor	r1, r1
     e26:	0b b6       	in	r0, 0x3b	; 59
     e28:	0f 92       	push	r0
     e2a:	2f 93       	push	r18
     e2c:	3f 93       	push	r19
     e2e:	4f 93       	push	r20
     e30:	5f 93       	push	r21
     e32:	8f 93       	push	r24
     e34:	ef 93       	push	r30
     e36:	ff 93       	push	r31
	unsigned char data;	
	
	data = UDR0; // uart0의 h/w register (URD0)로 1byte를 읽어 들인다. 
     e38:	8c b1       	in	r24, 0x0c	; 12
	
	if (data == '\r' || data == '\n')// 문장의 끝인 경우 
     e3a:	8d 30       	cpi	r24, 0x0D	; 13
     e3c:	11 f0       	breq	.+4      	; 0xe42 <__vector_18+0x26>
     e3e:	8a 30       	cpi	r24, 0x0A	; 10
     e40:	79 f4       	brne	.+30     	; 0xe60 <__vector_18+0x44>
	{
		rx_buffer[i] = '\0'; // 문장의 끝을 알려줌 (NULL)
     e42:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <i>
     e46:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <i+0x1>
     e4a:	ef 5a       	subi	r30, 0xAF	; 175
     e4c:	fd 4f       	sbci	r31, 0xFD	; 253
     e4e:	10 82       	st	Z, r1
		i = 0;				 // 개선점 : circular queue (환형큐)로 개선을 해야한다. 
     e50:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <i+0x1>
     e54:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <i>
							 // 이렇게 프로그램을 작성하면, 새로운 메세지가 왔을 때 덮어 쓴다. 
							 
		rx_ready_flag = 1;	 // 완전한 문장이 들어 왔을 때 1로 set 된다. 
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <rx_ready_flag>
     e5e:	0f c0       	rjmp	.+30     	; 0xe7e <__vector_18+0x62>
	} 
	else
	{
		rx_buffer[i++] = data; // 1. rx_buffer[i] = data  / 2. i++ 
     e60:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <i>
     e64:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <i+0x1>
     e68:	a9 01       	movw	r20, r18
     e6a:	4f 5f       	subi	r20, 0xFF	; 255
     e6c:	5f 4f       	sbci	r21, 0xFF	; 255
     e6e:	50 93 0a 02 	sts	0x020A, r21	; 0x80020a <i+0x1>
     e72:	40 93 09 02 	sts	0x0209, r20	; 0x800209 <i>
     e76:	f9 01       	movw	r30, r18
     e78:	ef 5a       	subi	r30, 0xAF	; 175
     e7a:	fd 4f       	sbci	r31, 0xFD	; 253
     e7c:	80 83       	st	Z, r24
	}
}
     e7e:	ff 91       	pop	r31
     e80:	ef 91       	pop	r30
     e82:	8f 91       	pop	r24
     e84:	5f 91       	pop	r21
     e86:	4f 91       	pop	r20
     e88:	3f 91       	pop	r19
     e8a:	2f 91       	pop	r18
     e8c:	0f 90       	pop	r0
     e8e:	0b be       	out	0x3b, r0	; 59
     e90:	0f 90       	pop	r0
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	0f 90       	pop	r0
     e96:	1f 90       	pop	r1
     e98:	18 95       	reti

00000e9a <init_uart0>:

void init_uart0()
{
	UBRR0H = 0x00; 
     e9a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207; // 9600bps 
     e9e:	8f ec       	ldi	r24, 0xCF	; 207
     ea0:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A |= (1 << U2X0); // 2배속 통신
     ea2:	8b b1       	in	r24, 0x0b	; 11
     ea4:	82 60       	ori	r24, 0x02	; 2
     ea6:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // ASYNC(비동기) data 8 bit, none parity 
     ea8:	e5 e9       	ldi	r30, 0x95	; 149
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	86 60       	ori	r24, 0x06	; 6
     eb0:	80 83       	st	Z, r24
	
	// RXEN0 : UART0로 부터 수신이 가능 하도록 설정 
	// TXEN0 : UART0로 부터 송신이 가능 하도록 설정
	// RXCIE0 : UART0로 부터 1 byte가 들어 오면 RX(수신) Interrupt를 발생시켜라
	
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);  // 송수신 활성 및 수신 시 Interrupt (alram)발생 
     eb2:	88 e9       	ldi	r24, 0x98	; 152
     eb4:	8a b9       	out	0x0a, r24	; 10
     eb6:	08 95       	ret

00000eb8 <UART0_transmit>:
	// 19번 인터럽트 발생 
}
// UART0 로 1 byte를 보내는 함수 
void UART0_transmit(uint8_t data) 
{
	while (!(UCSR0A & (1 << UDRE0))) // data가 전송 중이면 data가 다 전송이 될 때 까지 기다린다. 
     eb8:	5d 9b       	sbis	0x0b, 5	; 11
     eba:	fe cf       	rjmp	.-4      	; 0xeb8 <UART0_transmit>
		;  // No Operation (아무 action도 취하지 않는다.)
	UDR0 = data; // HW 전송 register에 data를 쏴준다. 
     ebc:	8c b9       	out	0x0c, r24	; 12
     ebe:	08 95       	ret

00000ec0 <pc_command_processing>:
extern int led_command; // flag setting 


void pc_command_processing()
{
	if(rx_ready_flag)	
     ec0:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <rx_ready_flag>
     ec4:	88 23       	and	r24, r24
     ec6:	09 f4       	brne	.+2      	; 0xeca <pc_command_processing+0xa>
     ec8:	91 c0       	rjmp	.+290    	; 0xfec <pc_command_processing+0x12c>
	{
		rx_ready_flag = 0; // 0으로 변환하여 다음 메세지를 받을 수 있도록 초기화 
     eca:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <rx_ready_flag>
		printf("%s\n", rx_buffer);
     ece:	81 e5       	ldi	r24, 0x51	; 81
     ed0:	92 e0       	ldi	r25, 0x02	; 2
     ed2:	16 d4       	rcall	.+2092   	; 0x1700 <puts>
		
		if(strncmp(rx_buffer, "ledallon" ,strlen("ledallon")-1 )== 0) // 내용이 같으면 0이나옴 // -1은 NULL 문자 제거를 위함 ('\n')
     ed4:	47 e0       	ldi	r20, 0x07	; 7
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	63 e4       	ldi	r22, 0x43	; 67
     eda:	71 e0       	ldi	r23, 0x01	; 1
     edc:	81 e5       	ldi	r24, 0x51	; 81
     ede:	92 e0       	ldi	r25, 0x02	; 2
     ee0:	01 d4       	rcall	.+2050   	; 0x16e4 <strncmp>
     ee2:	89 2b       	or	r24, r25
     ee4:	11 f4       	brne	.+4      	; 0xeea <pc_command_processing+0x2a>
			PORTA = 0xff;
     ee6:	8f ef       	ldi	r24, 0xFF	; 255
     ee8:	8b bb       	out	0x1b, r24	; 27
		
		if(strncmp(rx_buffer, "ledalloff" ,strlen("ledalloff")-1 )== 0)
     eea:	48 e0       	ldi	r20, 0x08	; 8
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	6c e4       	ldi	r22, 0x4C	; 76
     ef0:	71 e0       	ldi	r23, 0x01	; 1
     ef2:	81 e5       	ldi	r24, 0x51	; 81
     ef4:	92 e0       	ldi	r25, 0x02	; 2
     ef6:	f6 d3       	rcall	.+2028   	; 0x16e4 <strncmp>
     ef8:	89 2b       	or	r24, r25
     efa:	09 f4       	brne	.+2      	; 0xefe <pc_command_processing+0x3e>
			PORTA = 0x00;
     efc:	1b ba       	out	0x1b, r1	; 27
			
		if(strncmp(rx_buffer, "reset" ,strlen("reset")-1 )== 0)
     efe:	44 e0       	ldi	r20, 0x04	; 4
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	66 e5       	ldi	r22, 0x56	; 86
     f04:	71 e0       	ldi	r23, 0x01	; 1
     f06:	81 e5       	ldi	r24, 0x51	; 81
     f08:	92 e0       	ldi	r25, 0x02	; 2
     f0a:	ec d3       	rcall	.+2008   	; 0x16e4 <strncmp>
     f0c:	89 2b       	or	r24, r25
     f0e:	09 f4       	brne	.+2      	; 0xf12 <pc_command_processing+0x52>
			PORTA = 0x00;
     f10:	1b ba       	out	0x1b, r1	; 27
			led_command = 0;
     f12:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <led_command+0x1>
     f16:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <led_command>
		
		if(strncmp(rx_buffer, "ledalltoggle" ,strlen("ledalltoggle")-1 )== 0) // state를 확인 할 command flag가 필요 
     f1a:	4b e0       	ldi	r20, 0x0B	; 11
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	6c e5       	ldi	r22, 0x5C	; 92
     f20:	71 e0       	ldi	r23, 0x01	; 1
     f22:	81 e5       	ldi	r24, 0x51	; 81
     f24:	92 e0       	ldi	r25, 0x02	; 2
     f26:	de d3       	rcall	.+1980   	; 0x16e4 <strncmp>
     f28:	89 2b       	or	r24, r25
     f2a:	31 f4       	brne	.+12     	; 0xf38 <pc_command_processing+0x78>

			led_command = 1; 
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <led_command+0x1>
     f34:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <led_command>
		
		if(strncmp(rx_buffer, "shiftleftledon" ,strlen("shiftleftledon")-1 )== 0) 
     f38:	4d e0       	ldi	r20, 0x0D	; 13
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	69 e6       	ldi	r22, 0x69	; 105
     f3e:	71 e0       	ldi	r23, 0x01	; 1
     f40:	81 e5       	ldi	r24, 0x51	; 81
     f42:	92 e0       	ldi	r25, 0x02	; 2
     f44:	cf d3       	rcall	.+1950   	; 0x16e4 <strncmp>
     f46:	89 2b       	or	r24, r25
     f48:	31 f4       	brne	.+12     	; 0xf56 <pc_command_processing+0x96>
			led_command = 2;
     f4a:	82 e0       	ldi	r24, 0x02	; 2
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <led_command+0x1>
     f52:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <led_command>
		
		if(strncmp(rx_buffer, "shiftrightledon" ,strlen("shiftrightledon")-1 )== 0) 
     f56:	4e e0       	ldi	r20, 0x0E	; 14
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	68 e7       	ldi	r22, 0x78	; 120
     f5c:	71 e0       	ldi	r23, 0x01	; 1
     f5e:	81 e5       	ldi	r24, 0x51	; 81
     f60:	92 e0       	ldi	r25, 0x02	; 2
     f62:	c0 d3       	rcall	.+1920   	; 0x16e4 <strncmp>
     f64:	89 2b       	or	r24, r25
     f66:	31 f4       	brne	.+12     	; 0xf74 <pc_command_processing+0xb4>
			led_command = 3;
     f68:	83 e0       	ldi	r24, 0x03	; 3
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <led_command+0x1>
     f70:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <led_command>
		
		if(strncmp(rx_buffer, "shiftleftholdledon" ,strlen("shiftleftholdledon")-1 )== 0) 
     f74:	41 e1       	ldi	r20, 0x11	; 17
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	68 e8       	ldi	r22, 0x88	; 136
     f7a:	71 e0       	ldi	r23, 0x01	; 1
     f7c:	81 e5       	ldi	r24, 0x51	; 81
     f7e:	92 e0       	ldi	r25, 0x02	; 2
     f80:	b1 d3       	rcall	.+1890   	; 0x16e4 <strncmp>
     f82:	89 2b       	or	r24, r25
     f84:	31 f4       	brne	.+12     	; 0xf92 <pc_command_processing+0xd2>
			led_command = 4;
     f86:	84 e0       	ldi	r24, 0x04	; 4
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <led_command+0x1>
     f8e:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <led_command>
		
		if(strncmp(rx_buffer, "shiftrightholdledon" ,strlen("shiftrightholdledon")-1 )== 0) 
     f92:	42 e1       	ldi	r20, 0x12	; 18
     f94:	50 e0       	ldi	r21, 0x00	; 0
     f96:	6b e9       	ldi	r22, 0x9B	; 155
     f98:	71 e0       	ldi	r23, 0x01	; 1
     f9a:	81 e5       	ldi	r24, 0x51	; 81
     f9c:	92 e0       	ldi	r25, 0x02	; 2
     f9e:	a2 d3       	rcall	.+1860   	; 0x16e4 <strncmp>
     fa0:	89 2b       	or	r24, r25
     fa2:	31 f4       	brne	.+12     	; 0xfb0 <pc_command_processing+0xf0>
			led_command = 5;
     fa4:	85 e0       	ldi	r24, 0x05	; 5
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <led_command+0x1>
     fac:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <led_command>
		
		if(strncmp(rx_buffer, "f_off" ,strlen("f_off")-1 )== 0) 
     fb0:	44 e0       	ldi	r20, 0x04	; 4
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	6f ea       	ldi	r22, 0xAF	; 175
     fb6:	71 e0       	ldi	r23, 0x01	; 1
     fb8:	81 e5       	ldi	r24, 0x51	; 81
     fba:	92 e0       	ldi	r25, 0x02	; 2
     fbc:	93 d3       	rcall	.+1830   	; 0x16e4 <strncmp>
     fbe:	89 2b       	or	r24, r25
     fc0:	31 f4       	brne	.+12     	; 0xfce <pc_command_processing+0x10e>
			led_command = 6;
     fc2:	86 e0       	ldi	r24, 0x06	; 6
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <led_command+0x1>
     fca:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <led_command>
		
		if(strncmp(rx_buffer, "flower_on" ,strlen("flower_on")-1 )== 0) 
     fce:	48 e0       	ldi	r20, 0x08	; 8
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	65 eb       	ldi	r22, 0xB5	; 181
     fd4:	71 e0       	ldi	r23, 0x01	; 1
     fd6:	81 e5       	ldi	r24, 0x51	; 81
     fd8:	92 e0       	ldi	r25, 0x02	; 2
     fda:	84 d3       	rcall	.+1800   	; 0x16e4 <strncmp>
     fdc:	89 2b       	or	r24, r25
     fde:	31 f4       	brne	.+12     	; 0xfec <pc_command_processing+0x12c>
			led_command = 7;
     fe0:	87 e0       	ldi	r24, 0x07	; 7
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <led_command+0x1>
     fe8:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <led_command>
		
		
		 
		
	}
	 switch(led_command)
     fec:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <led_command>
     ff0:	f0 91 d6 01 	lds	r31, 0x01D6	; 0x8001d6 <led_command+0x1>
     ff4:	31 97       	sbiw	r30, 0x01	; 1
     ff6:	e7 30       	cpi	r30, 0x07	; 7
     ff8:	f1 05       	cpc	r31, r1
	 {
		
		 
		 case 1:
		 ledalltoggle();
     ffa:	80 f4       	brcc	.+32     	; 0x101c <__DATA_REGION_LENGTH__+0x1c>
		 
		 break;
     ffc:	ea 5b       	subi	r30, 0xBA	; 186
		 
		 case 2:
		 shiftleftledon();
     ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    1000:	45 c3       	rjmp	.+1674   	; 0x168c <__tablejump2__>
		 
		 break;
    1002:	c4 ca       	rjmp	.-2680   	; 0x58c <ledalltoggle>
		 
		 case 3:
		 shiftrightledon();
    1004:	08 95       	ret
    1006:	d3 ca       	rjmp	.-2650   	; 0x5ae <shiftleftledon>
		 break;
    1008:	08 95       	ret
		 
		 case 4:
		 shiftleftholdledon();
    100a:	f7 ca       	rjmp	.-2578   	; 0x5fa <shiftrightledon>
    100c:	08 95       	ret
		 break;
    100e:	1b cb       	rjmp	.-2506   	; 0x646 <shiftleftholdledon>
		 
		 case 5:
		 shiftrightholdledon();
    1010:	08 95       	ret
    1012:	3e cb       	rjmp	.-2436   	; 0x690 <shiftrightholdledon>
		 break;
    1014:	08 95       	ret
		 
		 case 6:
		 f_off();
    1016:	61 cb       	rjmp	.-2366   	; 0x6da <f_off>
    1018:	08 95       	ret
		 break;
    101a:	8f cb       	rjmp	.-2274   	; 0x73a <flower_on>
		 
		 case 7:
		 flower_on();
    101c:	08 95       	ret

0000101e <init_UART1>:
    101e:	ea e9       	ldi	r30, 0x9A	; 154
    1020:	f0 e0       	ldi	r31, 0x00	; 0
extern uint32_t led_command; 

ISR(USART1_RX_vect)
{
	UART1_ISR_Receive();		 // 1char가 들어올 떄마다 call 
}
    1022:	80 81       	ld	r24, Z
    1024:	88 69       	ori	r24, 0x98	; 152
    1026:	80 83       	st	Z, r24
    1028:	eb e9       	ldi	r30, 0x9B	; 155
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	82 60       	ori	r24, 0x02	; 2
    1030:	80 83       	st	Z, r24
    1032:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1036:	8f ec       	ldi	r24, 0xCF	; 207
    1038:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    103c:	08 95       	ret

0000103e <bt_command_processing>:
	}
}

void bt_command_processing()
{
	if(rx1ReadyFlag)
    103e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <rx1ReadyFlag>
    1042:	88 23       	and	r24, r24
    1044:	09 f4       	brne	.+2      	; 0x1048 <bt_command_processing+0xa>
    1046:	bf c0       	rjmp	.+382    	; 0x11c6 <__stack+0xc7>
	{
		rx1ReadyFlag = 0; // 0으로 변환하여 다음 메세지를 받을 수 있도록 초기화
    1048:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <rx1ReadyFlag>
		printf("%s\n", rx1String);
    104c:	8d e0       	ldi	r24, 0x0D	; 13
    104e:	92 e0       	ldi	r25, 0x02	; 2
    1050:	57 d3       	rcall	.+1710   	; 0x1700 <puts>
		
		if(strncmp(rx1String, "ledallon" ,strlen("ledallon")-1 )== 0) // 내용이 같으면 0이나옴 // -1은 NULL 문자 제거를 위함 ('\n')
    1052:	47 e0       	ldi	r20, 0x07	; 7
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	63 e4       	ldi	r22, 0x43	; 67
    1058:	71 e0       	ldi	r23, 0x01	; 1
    105a:	8d e0       	ldi	r24, 0x0D	; 13
    105c:	92 e0       	ldi	r25, 0x02	; 2
    105e:	42 d3       	rcall	.+1668   	; 0x16e4 <strncmp>
    1060:	89 2b       	or	r24, r25
    1062:	11 f4       	brne	.+4      	; 0x1068 <bt_command_processing+0x2a>
		PORTA = 0xff;
    1064:	8f ef       	ldi	r24, 0xFF	; 255
    1066:	8b bb       	out	0x1b, r24	; 27
		
		if(strncmp(rx1String, "ledalloff" ,strlen("ledalloff")-1 )== 0)
    1068:	48 e0       	ldi	r20, 0x08	; 8
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	6c e4       	ldi	r22, 0x4C	; 76
    106e:	71 e0       	ldi	r23, 0x01	; 1
    1070:	8d e0       	ldi	r24, 0x0D	; 13
    1072:	92 e0       	ldi	r25, 0x02	; 2
    1074:	37 d3       	rcall	.+1646   	; 0x16e4 <strncmp>
    1076:	89 2b       	or	r24, r25
    1078:	09 f4       	brne	.+2      	; 0x107c <bt_command_processing+0x3e>
		PORTA = 0x00;
    107a:	1b ba       	out	0x1b, r1	; 27
		
		if(strncmp(rx1String, "reset" ,strlen("reset")-1 )== 0)
    107c:	44 e0       	ldi	r20, 0x04	; 4
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	66 e5       	ldi	r22, 0x56	; 86
    1082:	71 e0       	ldi	r23, 0x01	; 1
    1084:	8d e0       	ldi	r24, 0x0D	; 13
    1086:	92 e0       	ldi	r25, 0x02	; 2
    1088:	2d d3       	rcall	.+1626   	; 0x16e4 <strncmp>
    108a:	89 2b       	or	r24, r25
    108c:	09 f4       	brne	.+2      	; 0x1090 <bt_command_processing+0x52>
		PORTA = 0x00;
    108e:	1b ba       	out	0x1b, r1	; 27
		led_command = 0;
    1090:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <led_command>
    1094:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <led_command+0x1>
    1098:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <led_command+0x2>
    109c:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <led_command+0x3>
		
		if(strncmp(rx1String, "ledalltoggle" ,strlen("ledalltoggle")-1 )== 0) // state를 확인 할 command flag가 필요
    10a0:	4b e0       	ldi	r20, 0x0B	; 11
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	6c e5       	ldi	r22, 0x5C	; 92
    10a6:	71 e0       	ldi	r23, 0x01	; 1
    10a8:	8d e0       	ldi	r24, 0x0D	; 13
    10aa:	92 e0       	ldi	r25, 0x02	; 2
    10ac:	1b d3       	rcall	.+1590   	; 0x16e4 <strncmp>
    10ae:	89 2b       	or	r24, r25
    10b0:	61 f4       	brne	.+24     	; 0x10ca <bt_command_processing+0x8c>

		led_command = 1;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	a0 e0       	ldi	r26, 0x00	; 0
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <led_command>
    10be:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <led_command+0x1>
    10c2:	a0 93 d7 01 	sts	0x01D7, r26	; 0x8001d7 <led_command+0x2>
    10c6:	b0 93 d8 01 	sts	0x01D8, r27	; 0x8001d8 <led_command+0x3>
		
		if(strncmp(rx1String, "shiftleftledon" ,strlen("shiftleftledon")-1 )== 0)
    10ca:	4d e0       	ldi	r20, 0x0D	; 13
    10cc:	50 e0       	ldi	r21, 0x00	; 0
    10ce:	69 e6       	ldi	r22, 0x69	; 105
    10d0:	71 e0       	ldi	r23, 0x01	; 1
    10d2:	8d e0       	ldi	r24, 0x0D	; 13
    10d4:	92 e0       	ldi	r25, 0x02	; 2
    10d6:	06 d3       	rcall	.+1548   	; 0x16e4 <strncmp>
    10d8:	89 2b       	or	r24, r25
    10da:	61 f4       	brne	.+24     	; 0x10f4 <bt_command_processing+0xb6>
		led_command = 2;
    10dc:	82 e0       	ldi	r24, 0x02	; 2
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	a0 e0       	ldi	r26, 0x00	; 0
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <led_command>
    10e8:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <led_command+0x1>
    10ec:	a0 93 d7 01 	sts	0x01D7, r26	; 0x8001d7 <led_command+0x2>
    10f0:	b0 93 d8 01 	sts	0x01D8, r27	; 0x8001d8 <led_command+0x3>
		
		if(strncmp(rx1String, "shiftrightledon" ,strlen("shiftrightledon")-1 )== 0)
    10f4:	4e e0       	ldi	r20, 0x0E	; 14
    10f6:	50 e0       	ldi	r21, 0x00	; 0
    10f8:	68 e7       	ldi	r22, 0x78	; 120
    10fa:	71 e0       	ldi	r23, 0x01	; 1
    10fc:	8d e0       	ldi	r24, 0x0D	; 13
    10fe:	92 e0       	ldi	r25, 0x02	; 2
    1100:	f1 d2       	rcall	.+1506   	; 0x16e4 <strncmp>
    1102:	89 2b       	or	r24, r25
    1104:	61 f4       	brne	.+24     	; 0x111e <__stack+0x1f>
		led_command = 3;
    1106:	83 e0       	ldi	r24, 0x03	; 3
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a0 e0       	ldi	r26, 0x00	; 0
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <led_command>
    1112:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <led_command+0x1>
    1116:	a0 93 d7 01 	sts	0x01D7, r26	; 0x8001d7 <led_command+0x2>
    111a:	b0 93 d8 01 	sts	0x01D8, r27	; 0x8001d8 <led_command+0x3>
		
		if(strncmp(rx1String, "shiftleftholdledon" ,strlen("shiftleftholdledon")-1 )== 0)
    111e:	41 e1       	ldi	r20, 0x11	; 17
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	68 e8       	ldi	r22, 0x88	; 136
    1124:	71 e0       	ldi	r23, 0x01	; 1
    1126:	8d e0       	ldi	r24, 0x0D	; 13
    1128:	92 e0       	ldi	r25, 0x02	; 2
    112a:	dc d2       	rcall	.+1464   	; 0x16e4 <strncmp>
    112c:	89 2b       	or	r24, r25
    112e:	61 f4       	brne	.+24     	; 0x1148 <__stack+0x49>
		led_command = 4;
    1130:	84 e0       	ldi	r24, 0x04	; 4
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	a0 e0       	ldi	r26, 0x00	; 0
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <led_command>
    113c:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <led_command+0x1>
    1140:	a0 93 d7 01 	sts	0x01D7, r26	; 0x8001d7 <led_command+0x2>
    1144:	b0 93 d8 01 	sts	0x01D8, r27	; 0x8001d8 <led_command+0x3>
		
		if(strncmp(rx1String, "shiftrightholdledon" ,strlen("shiftrightholdledon")-1 )== 0)
    1148:	42 e1       	ldi	r20, 0x12	; 18
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	6b e9       	ldi	r22, 0x9B	; 155
    114e:	71 e0       	ldi	r23, 0x01	; 1
    1150:	8d e0       	ldi	r24, 0x0D	; 13
    1152:	92 e0       	ldi	r25, 0x02	; 2
    1154:	c7 d2       	rcall	.+1422   	; 0x16e4 <strncmp>
    1156:	89 2b       	or	r24, r25
    1158:	61 f4       	brne	.+24     	; 0x1172 <__stack+0x73>
		led_command = 5;
    115a:	85 e0       	ldi	r24, 0x05	; 5
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a0 e0       	ldi	r26, 0x00	; 0
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <led_command>
    1166:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <led_command+0x1>
    116a:	a0 93 d7 01 	sts	0x01D7, r26	; 0x8001d7 <led_command+0x2>
    116e:	b0 93 d8 01 	sts	0x01D8, r27	; 0x8001d8 <led_command+0x3>
		
		if(strncmp(rx1String, "f_off" ,strlen("f_off")-1 )== 0)
    1172:	44 e0       	ldi	r20, 0x04	; 4
    1174:	50 e0       	ldi	r21, 0x00	; 0
    1176:	6f ea       	ldi	r22, 0xAF	; 175
    1178:	71 e0       	ldi	r23, 0x01	; 1
    117a:	8d e0       	ldi	r24, 0x0D	; 13
    117c:	92 e0       	ldi	r25, 0x02	; 2
    117e:	b2 d2       	rcall	.+1380   	; 0x16e4 <strncmp>
    1180:	89 2b       	or	r24, r25
    1182:	61 f4       	brne	.+24     	; 0x119c <__stack+0x9d>
		led_command = 6;
    1184:	86 e0       	ldi	r24, 0x06	; 6
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a0 e0       	ldi	r26, 0x00	; 0
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <led_command>
    1190:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <led_command+0x1>
    1194:	a0 93 d7 01 	sts	0x01D7, r26	; 0x8001d7 <led_command+0x2>
    1198:	b0 93 d8 01 	sts	0x01D8, r27	; 0x8001d8 <led_command+0x3>
		
		if(strncmp(rx1String, "flower_on" ,strlen("flower_on")-1 )== 0)
    119c:	48 e0       	ldi	r20, 0x08	; 8
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	65 eb       	ldi	r22, 0xB5	; 181
    11a2:	71 e0       	ldi	r23, 0x01	; 1
    11a4:	8d e0       	ldi	r24, 0x0D	; 13
    11a6:	92 e0       	ldi	r25, 0x02	; 2
    11a8:	9d d2       	rcall	.+1338   	; 0x16e4 <strncmp>
    11aa:	89 2b       	or	r24, r25
    11ac:	61 f4       	brne	.+24     	; 0x11c6 <__stack+0xc7>
		led_command = 7;	
    11ae:	87 e0       	ldi	r24, 0x07	; 7
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	a0 e0       	ldi	r26, 0x00	; 0
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <led_command>
    11ba:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <led_command+0x1>
    11be:	a0 93 d7 01 	sts	0x01D7, r26	; 0x8001d7 <led_command+0x2>
    11c2:	b0 93 d8 01 	sts	0x01D8, r27	; 0x8001d8 <led_command+0x3>
	}
	switch(led_command)
    11c6:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <led_command>
    11ca:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <led_command+0x1>
    11ce:	a0 91 d7 01 	lds	r26, 0x01D7	; 0x8001d7 <led_command+0x2>
    11d2:	b0 91 d8 01 	lds	r27, 0x01D8	; 0x8001d8 <led_command+0x3>
    11d6:	fc 01       	movw	r30, r24
    11d8:	31 97       	sbiw	r30, 0x01	; 1
    11da:	e7 30       	cpi	r30, 0x07	; 7
    11dc:	f1 05       	cpc	r31, r1
	{
		
		
		case 1:
		ledalltoggle();
    11de:	80 f4       	brcc	.+32     	; 0x1200 <__stack+0x101>
		
		break;
    11e0:	e3 5b       	subi	r30, 0xB3	; 179
		
		case 2:
		shiftleftledon();
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	53 c2       	rjmp	.+1190   	; 0x168c <__tablejump2__>
		
		break;
    11e6:	d2 c9       	rjmp	.-3164   	; 0x58c <ledalltoggle>
		
		case 3:
		shiftrightledon();
    11e8:	08 95       	ret
    11ea:	e1 c9       	rjmp	.-3134   	; 0x5ae <shiftleftledon>
		break;
    11ec:	08 95       	ret
		
		case 4:
		shiftleftholdledon();
    11ee:	05 ca       	rjmp	.-3062   	; 0x5fa <shiftrightledon>
    11f0:	08 95       	ret
		break;
    11f2:	29 ca       	rjmp	.-2990   	; 0x646 <shiftleftholdledon>
		
		case 5:
		shiftrightholdledon();
    11f4:	08 95       	ret
    11f6:	4c ca       	rjmp	.-2920   	; 0x690 <shiftrightholdledon>
		break;
    11f8:	08 95       	ret
		
		case 6:
		f_off();
    11fa:	6f ca       	rjmp	.-2850   	; 0x6da <f_off>
    11fc:	08 95       	ret
		break;
    11fe:	9d ca       	rjmp	.-2758   	; 0x73a <flower_on>
		
		case 7:
		flower_on();
    1200:	08 95       	ret

00001202 <__vector_5>:
volatile int ultrasonic_distance; 
char scm[50]; 

//PE4 : external interrupt 4 초음파 센서 상승, 하강에지 둘다 이쪽으로 들어온다. 
ISR(INT4_vect)
{
    1202:	1f 92       	push	r1
    1204:	0f 92       	push	r0
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	0f 92       	push	r0
    120a:	11 24       	eor	r1, r1
    120c:	0b b6       	in	r0, 0x3b	; 59
    120e:	0f 92       	push	r0
    1210:	2f 93       	push	r18
    1212:	3f 93       	push	r19
    1214:	4f 93       	push	r20
    1216:	5f 93       	push	r21
    1218:	6f 93       	push	r22
    121a:	7f 93       	push	r23
    121c:	8f 93       	push	r24
    121e:	9f 93       	push	r25
    1220:	af 93       	push	r26
    1222:	bf 93       	push	r27
    1224:	ef 93       	push	r30
    1226:	ff 93       	push	r31
	if(ECHO_PIN & (1<<ECHO)) // 상승 에지 
    1228:	0c 9b       	sbis	0x01, 4	; 1
    122a:	03 c0       	rjmp	.+6      	; 0x1232 <__vector_5+0x30>
	{
		TCNT1 = 0;
    122c:	1d bc       	out	0x2d, r1	; 45
    122e:	1c bc       	out	0x2c, r1	; 44
    1230:	31 c0       	rjmp	.+98     	; 0x1294 <__vector_5+0x92>
	}	
	else					// 하강 에지
	{
		// 에코핀의 펄스 길이를 us 단위로 환산 
		ultrasonic_distance = 1000000.0 * TCNT1 * 1024 / F_CPU;
    1232:	6c b5       	in	r22, 0x2c	; 44
    1234:	7d b5       	in	r23, 0x2d	; 45
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 d1       	rcall	.+516    	; 0x1440 <__floatunsisf>
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	34 e2       	ldi	r19, 0x24	; 36
    1240:	44 e7       	ldi	r20, 0x74	; 116
    1242:	59 e4       	ldi	r21, 0x49	; 73
    1244:	8b d1       	rcall	.+790    	; 0x155c <__mulsf3>
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e8       	ldi	r20, 0x80	; 128
    124c:	54 e4       	ldi	r21, 0x44	; 68
    124e:	86 d1       	rcall	.+780    	; 0x155c <__mulsf3>
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	34 e2       	ldi	r19, 0x24	; 36
    1254:	44 e7       	ldi	r20, 0x74	; 116
    1256:	5b e4       	ldi	r21, 0x4B	; 75
    1258:	5a d0       	rcall	.+180    	; 0x130e <__divsf3>
    125a:	c1 d0       	rcall	.+386    	; 0x13de <__fixsfsi>
    125c:	70 93 e8 02 	sts	0x02E8, r23	; 0x8002e8 <ultrasonic_distance+0x1>
    1260:	60 93 e7 02 	sts	0x02E7, r22	; 0x8002e7 <ultrasonic_distance>
		// 1cm : 58us 소요 
		sprintf(scm, "distance : %dcm", ultrasonic_distance/ 58); // cm로 환산 
    1264:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <ultrasonic_distance>
    1268:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <ultrasonic_distance+0x1>
    126c:	6a e3       	ldi	r22, 0x3A	; 58
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	d8 d1       	rcall	.+944    	; 0x1622 <__divmodhi4>
    1272:	7f 93       	push	r23
    1274:	6f 93       	push	r22
    1276:	8f eb       	ldi	r24, 0xBF	; 191
    1278:	91 e0       	ldi	r25, 0x01	; 1
    127a:	9f 93       	push	r25
    127c:	8f 93       	push	r24
    127e:	85 eb       	ldi	r24, 0xB5	; 181
    1280:	92 e0       	ldi	r25, 0x02	; 2
    1282:	9f 93       	push	r25
    1284:	8f 93       	push	r24
    1286:	6c d2       	rcall	.+1240   	; 0x1760 <sprintf>
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
	}
}
    1294:	ff 91       	pop	r31
    1296:	ef 91       	pop	r30
    1298:	bf 91       	pop	r27
    129a:	af 91       	pop	r26
    129c:	9f 91       	pop	r25
    129e:	8f 91       	pop	r24
    12a0:	7f 91       	pop	r23
    12a2:	6f 91       	pop	r22
    12a4:	5f 91       	pop	r21
    12a6:	4f 91       	pop	r20
    12a8:	3f 91       	pop	r19
    12aa:	2f 91       	pop	r18
    12ac:	0f 90       	pop	r0
    12ae:	0b be       	out	0x3b, r0	; 59
    12b0:	0f 90       	pop	r0
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	0f 90       	pop	r0
    12b6:	1f 90       	pop	r1
    12b8:	18 95       	reti

000012ba <init_ultrasonic>:
//PG4 : trigger
//PE4 : ECHO (INT4) External Interrupt 4
void init_ultrasonic()
{
	TRIG_DDR |= (1<< TRIG);		// 출력으로
    12ba:	e4 e6       	ldi	r30, 0x64	; 100
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	80 61       	ori	r24, 0x10	; 16
    12c2:	80 83       	st	Z, r24
	ECHO_DDR &= ~(1 << ECHO);	// 입력으로 사용 
    12c4:	82 b1       	in	r24, 0x02	; 2
    12c6:	8f 7e       	andi	r24, 0xEF	; 239
    12c8:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 어떠한 형태로든지 신호 변화가 발생이 되면 Interrupt 요청 (Rising, Falling edge 둘다 )
	EICRB |= (0 << ISC41) | (1 << ISC40); 
    12ca:	8a b7       	in	r24, 0x3a	; 58
    12cc:	81 60       	ori	r24, 0x01	; 1
    12ce:	8a bf       	out	0x3a, r24	; 58
	TCCR1B |=(1<<CS12) | (1 << CS10);	// 1024분주 
    12d0:	8e b5       	in	r24, 0x2e	; 46
    12d2:	85 60       	ori	r24, 0x05	; 5
    12d4:	8e bd       	out	0x2e, r24	; 46
	// 16비트 timmer 1번을 1024 분주 해서 공급 
	// 16MHz를 1024분주 한다. >> 15625 ==> 15.625kHz
	// 1펄스의 길이 : t = 1/f = 1/15625 = 0.000064 > 64us  
	
	EIMSK |= (1 << INT4); // 외부 INT4(ECHO) 사용 
    12d6:	89 b7       	in	r24, 0x39	; 57
    12d8:	80 61       	ori	r24, 0x10	; 16
    12da:	89 bf       	out	0x39, r24	; 57
    12dc:	08 95       	ret

000012de <ultrasonic_trigger>:
	
}
void ultrasonic_trigger()
{
	TRIG_PORT &= ~(1 << TRIG); // low
    12de:	e5 e6       	ldi	r30, 0x65	; 101
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8f 7e       	andi	r24, 0xEF	; 239
    12e6:	80 83       	st	Z, r24
    12e8:	8f e9       	ldi	r24, 0x9F	; 159
    12ea:	9f e0       	ldi	r25, 0x0F	; 15
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <ultrasonic_trigger+0xe>
    12f0:	00 c0       	rjmp	.+0      	; 0x12f2 <ultrasonic_trigger+0x14>
    12f2:	00 00       	nop
	_delay_ms(1);
	TRIG_PORT |= (1 << TRIG); // high
    12f4:	80 81       	ld	r24, Z
    12f6:	80 61       	ori	r24, 0x10	; 16
    12f8:	80 83       	st	Z, r24
    12fa:	8f e5       	ldi	r24, 0x5F	; 95
    12fc:	9a ee       	ldi	r25, 0xEA	; 234
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <ultrasonic_trigger+0x20>
    1302:	00 c0       	rjmp	.+0      	; 0x1304 <ultrasonic_trigger+0x26>
    1304:	00 00       	nop
	_delay_ms(15);
	TRIG_PORT &= ~(1 << TRIG); // low 
    1306:	80 81       	ld	r24, Z
    1308:	8f 7e       	andi	r24, 0xEF	; 239
    130a:	80 83       	st	Z, r24
    130c:	08 95       	ret

0000130e <__divsf3>:
    130e:	0c d0       	rcall	.+24     	; 0x1328 <__divsf3x>
    1310:	eb c0       	rjmp	.+470    	; 0x14e8 <__fp_round>
    1312:	e3 d0       	rcall	.+454    	; 0x14da <__fp_pscB>
    1314:	40 f0       	brcs	.+16     	; 0x1326 <__divsf3+0x18>
    1316:	da d0       	rcall	.+436    	; 0x14cc <__fp_pscA>
    1318:	30 f0       	brcs	.+12     	; 0x1326 <__divsf3+0x18>
    131a:	21 f4       	brne	.+8      	; 0x1324 <__divsf3+0x16>
    131c:	5f 3f       	cpi	r21, 0xFF	; 255
    131e:	19 f0       	breq	.+6      	; 0x1326 <__divsf3+0x18>
    1320:	cc c0       	rjmp	.+408    	; 0x14ba <__fp_inf>
    1322:	51 11       	cpse	r21, r1
    1324:	15 c1       	rjmp	.+554    	; 0x1550 <__fp_szero>
    1326:	cf c0       	rjmp	.+414    	; 0x14c6 <__fp_nan>

00001328 <__divsf3x>:
    1328:	f0 d0       	rcall	.+480    	; 0x150a <__fp_split3>
    132a:	98 f3       	brcs	.-26     	; 0x1312 <__divsf3+0x4>

0000132c <__divsf3_pse>:
    132c:	99 23       	and	r25, r25
    132e:	c9 f3       	breq	.-14     	; 0x1322 <__divsf3+0x14>
    1330:	55 23       	and	r21, r21
    1332:	b1 f3       	breq	.-20     	; 0x1320 <__divsf3+0x12>
    1334:	95 1b       	sub	r25, r21
    1336:	55 0b       	sbc	r21, r21
    1338:	bb 27       	eor	r27, r27
    133a:	aa 27       	eor	r26, r26
    133c:	62 17       	cp	r22, r18
    133e:	73 07       	cpc	r23, r19
    1340:	84 07       	cpc	r24, r20
    1342:	38 f0       	brcs	.+14     	; 0x1352 <__divsf3_pse+0x26>
    1344:	9f 5f       	subi	r25, 0xFF	; 255
    1346:	5f 4f       	sbci	r21, 0xFF	; 255
    1348:	22 0f       	add	r18, r18
    134a:	33 1f       	adc	r19, r19
    134c:	44 1f       	adc	r20, r20
    134e:	aa 1f       	adc	r26, r26
    1350:	a9 f3       	breq	.-22     	; 0x133c <__divsf3_pse+0x10>
    1352:	33 d0       	rcall	.+102    	; 0x13ba <__divsf3_pse+0x8e>
    1354:	0e 2e       	mov	r0, r30
    1356:	3a f0       	brmi	.+14     	; 0x1366 <__divsf3_pse+0x3a>
    1358:	e0 e8       	ldi	r30, 0x80	; 128
    135a:	30 d0       	rcall	.+96     	; 0x13bc <__divsf3_pse+0x90>
    135c:	91 50       	subi	r25, 0x01	; 1
    135e:	50 40       	sbci	r21, 0x00	; 0
    1360:	e6 95       	lsr	r30
    1362:	00 1c       	adc	r0, r0
    1364:	ca f7       	brpl	.-14     	; 0x1358 <__divsf3_pse+0x2c>
    1366:	29 d0       	rcall	.+82     	; 0x13ba <__divsf3_pse+0x8e>
    1368:	fe 2f       	mov	r31, r30
    136a:	27 d0       	rcall	.+78     	; 0x13ba <__divsf3_pse+0x8e>
    136c:	66 0f       	add	r22, r22
    136e:	77 1f       	adc	r23, r23
    1370:	88 1f       	adc	r24, r24
    1372:	bb 1f       	adc	r27, r27
    1374:	26 17       	cp	r18, r22
    1376:	37 07       	cpc	r19, r23
    1378:	48 07       	cpc	r20, r24
    137a:	ab 07       	cpc	r26, r27
    137c:	b0 e8       	ldi	r27, 0x80	; 128
    137e:	09 f0       	breq	.+2      	; 0x1382 <__divsf3_pse+0x56>
    1380:	bb 0b       	sbc	r27, r27
    1382:	80 2d       	mov	r24, r0
    1384:	bf 01       	movw	r22, r30
    1386:	ff 27       	eor	r31, r31
    1388:	93 58       	subi	r25, 0x83	; 131
    138a:	5f 4f       	sbci	r21, 0xFF	; 255
    138c:	2a f0       	brmi	.+10     	; 0x1398 <__divsf3_pse+0x6c>
    138e:	9e 3f       	cpi	r25, 0xFE	; 254
    1390:	51 05       	cpc	r21, r1
    1392:	68 f0       	brcs	.+26     	; 0x13ae <__divsf3_pse+0x82>
    1394:	92 c0       	rjmp	.+292    	; 0x14ba <__fp_inf>
    1396:	dc c0       	rjmp	.+440    	; 0x1550 <__fp_szero>
    1398:	5f 3f       	cpi	r21, 0xFF	; 255
    139a:	ec f3       	brlt	.-6      	; 0x1396 <__divsf3_pse+0x6a>
    139c:	98 3e       	cpi	r25, 0xE8	; 232
    139e:	dc f3       	brlt	.-10     	; 0x1396 <__divsf3_pse+0x6a>
    13a0:	86 95       	lsr	r24
    13a2:	77 95       	ror	r23
    13a4:	67 95       	ror	r22
    13a6:	b7 95       	ror	r27
    13a8:	f7 95       	ror	r31
    13aa:	9f 5f       	subi	r25, 0xFF	; 255
    13ac:	c9 f7       	brne	.-14     	; 0x13a0 <__divsf3_pse+0x74>
    13ae:	88 0f       	add	r24, r24
    13b0:	91 1d       	adc	r25, r1
    13b2:	96 95       	lsr	r25
    13b4:	87 95       	ror	r24
    13b6:	97 f9       	bld	r25, 7
    13b8:	08 95       	ret
    13ba:	e1 e0       	ldi	r30, 0x01	; 1
    13bc:	66 0f       	add	r22, r22
    13be:	77 1f       	adc	r23, r23
    13c0:	88 1f       	adc	r24, r24
    13c2:	bb 1f       	adc	r27, r27
    13c4:	62 17       	cp	r22, r18
    13c6:	73 07       	cpc	r23, r19
    13c8:	84 07       	cpc	r24, r20
    13ca:	ba 07       	cpc	r27, r26
    13cc:	20 f0       	brcs	.+8      	; 0x13d6 <__divsf3_pse+0xaa>
    13ce:	62 1b       	sub	r22, r18
    13d0:	73 0b       	sbc	r23, r19
    13d2:	84 0b       	sbc	r24, r20
    13d4:	ba 0b       	sbc	r27, r26
    13d6:	ee 1f       	adc	r30, r30
    13d8:	88 f7       	brcc	.-30     	; 0x13bc <__divsf3_pse+0x90>
    13da:	e0 95       	com	r30
    13dc:	08 95       	ret

000013de <__fixsfsi>:
    13de:	04 d0       	rcall	.+8      	; 0x13e8 <__fixunssfsi>
    13e0:	68 94       	set
    13e2:	b1 11       	cpse	r27, r1
    13e4:	b5 c0       	rjmp	.+362    	; 0x1550 <__fp_szero>
    13e6:	08 95       	ret

000013e8 <__fixunssfsi>:
    13e8:	98 d0       	rcall	.+304    	; 0x151a <__fp_splitA>
    13ea:	88 f0       	brcs	.+34     	; 0x140e <__fixunssfsi+0x26>
    13ec:	9f 57       	subi	r25, 0x7F	; 127
    13ee:	90 f0       	brcs	.+36     	; 0x1414 <__fixunssfsi+0x2c>
    13f0:	b9 2f       	mov	r27, r25
    13f2:	99 27       	eor	r25, r25
    13f4:	b7 51       	subi	r27, 0x17	; 23
    13f6:	a0 f0       	brcs	.+40     	; 0x1420 <__fixunssfsi+0x38>
    13f8:	d1 f0       	breq	.+52     	; 0x142e <__fixunssfsi+0x46>
    13fa:	66 0f       	add	r22, r22
    13fc:	77 1f       	adc	r23, r23
    13fe:	88 1f       	adc	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	1a f0       	brmi	.+6      	; 0x140a <__fixunssfsi+0x22>
    1404:	ba 95       	dec	r27
    1406:	c9 f7       	brne	.-14     	; 0x13fa <__fixunssfsi+0x12>
    1408:	12 c0       	rjmp	.+36     	; 0x142e <__fixunssfsi+0x46>
    140a:	b1 30       	cpi	r27, 0x01	; 1
    140c:	81 f0       	breq	.+32     	; 0x142e <__fixunssfsi+0x46>
    140e:	9f d0       	rcall	.+318    	; 0x154e <__fp_zero>
    1410:	b1 e0       	ldi	r27, 0x01	; 1
    1412:	08 95       	ret
    1414:	9c c0       	rjmp	.+312    	; 0x154e <__fp_zero>
    1416:	67 2f       	mov	r22, r23
    1418:	78 2f       	mov	r23, r24
    141a:	88 27       	eor	r24, r24
    141c:	b8 5f       	subi	r27, 0xF8	; 248
    141e:	39 f0       	breq	.+14     	; 0x142e <__fixunssfsi+0x46>
    1420:	b9 3f       	cpi	r27, 0xF9	; 249
    1422:	cc f3       	brlt	.-14     	; 0x1416 <__fixunssfsi+0x2e>
    1424:	86 95       	lsr	r24
    1426:	77 95       	ror	r23
    1428:	67 95       	ror	r22
    142a:	b3 95       	inc	r27
    142c:	d9 f7       	brne	.-10     	; 0x1424 <__fixunssfsi+0x3c>
    142e:	3e f4       	brtc	.+14     	; 0x143e <__fixunssfsi+0x56>
    1430:	90 95       	com	r25
    1432:	80 95       	com	r24
    1434:	70 95       	com	r23
    1436:	61 95       	neg	r22
    1438:	7f 4f       	sbci	r23, 0xFF	; 255
    143a:	8f 4f       	sbci	r24, 0xFF	; 255
    143c:	9f 4f       	sbci	r25, 0xFF	; 255
    143e:	08 95       	ret

00001440 <__floatunsisf>:
    1440:	e8 94       	clt
    1442:	09 c0       	rjmp	.+18     	; 0x1456 <__floatsisf+0x12>

00001444 <__floatsisf>:
    1444:	97 fb       	bst	r25, 7
    1446:	3e f4       	brtc	.+14     	; 0x1456 <__floatsisf+0x12>
    1448:	90 95       	com	r25
    144a:	80 95       	com	r24
    144c:	70 95       	com	r23
    144e:	61 95       	neg	r22
    1450:	7f 4f       	sbci	r23, 0xFF	; 255
    1452:	8f 4f       	sbci	r24, 0xFF	; 255
    1454:	9f 4f       	sbci	r25, 0xFF	; 255
    1456:	99 23       	and	r25, r25
    1458:	a9 f0       	breq	.+42     	; 0x1484 <__floatsisf+0x40>
    145a:	f9 2f       	mov	r31, r25
    145c:	96 e9       	ldi	r25, 0x96	; 150
    145e:	bb 27       	eor	r27, r27
    1460:	93 95       	inc	r25
    1462:	f6 95       	lsr	r31
    1464:	87 95       	ror	r24
    1466:	77 95       	ror	r23
    1468:	67 95       	ror	r22
    146a:	b7 95       	ror	r27
    146c:	f1 11       	cpse	r31, r1
    146e:	f8 cf       	rjmp	.-16     	; 0x1460 <__floatsisf+0x1c>
    1470:	fa f4       	brpl	.+62     	; 0x14b0 <__floatsisf+0x6c>
    1472:	bb 0f       	add	r27, r27
    1474:	11 f4       	brne	.+4      	; 0x147a <__floatsisf+0x36>
    1476:	60 ff       	sbrs	r22, 0
    1478:	1b c0       	rjmp	.+54     	; 0x14b0 <__floatsisf+0x6c>
    147a:	6f 5f       	subi	r22, 0xFF	; 255
    147c:	7f 4f       	sbci	r23, 0xFF	; 255
    147e:	8f 4f       	sbci	r24, 0xFF	; 255
    1480:	9f 4f       	sbci	r25, 0xFF	; 255
    1482:	16 c0       	rjmp	.+44     	; 0x14b0 <__floatsisf+0x6c>
    1484:	88 23       	and	r24, r24
    1486:	11 f0       	breq	.+4      	; 0x148c <__floatsisf+0x48>
    1488:	96 e9       	ldi	r25, 0x96	; 150
    148a:	11 c0       	rjmp	.+34     	; 0x14ae <__floatsisf+0x6a>
    148c:	77 23       	and	r23, r23
    148e:	21 f0       	breq	.+8      	; 0x1498 <__floatsisf+0x54>
    1490:	9e e8       	ldi	r25, 0x8E	; 142
    1492:	87 2f       	mov	r24, r23
    1494:	76 2f       	mov	r23, r22
    1496:	05 c0       	rjmp	.+10     	; 0x14a2 <__floatsisf+0x5e>
    1498:	66 23       	and	r22, r22
    149a:	71 f0       	breq	.+28     	; 0x14b8 <__floatsisf+0x74>
    149c:	96 e8       	ldi	r25, 0x86	; 134
    149e:	86 2f       	mov	r24, r22
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	2a f0       	brmi	.+10     	; 0x14b0 <__floatsisf+0x6c>
    14a6:	9a 95       	dec	r25
    14a8:	66 0f       	add	r22, r22
    14aa:	77 1f       	adc	r23, r23
    14ac:	88 1f       	adc	r24, r24
    14ae:	da f7       	brpl	.-10     	; 0x14a6 <__floatsisf+0x62>
    14b0:	88 0f       	add	r24, r24
    14b2:	96 95       	lsr	r25
    14b4:	87 95       	ror	r24
    14b6:	97 f9       	bld	r25, 7
    14b8:	08 95       	ret

000014ba <__fp_inf>:
    14ba:	97 f9       	bld	r25, 7
    14bc:	9f 67       	ori	r25, 0x7F	; 127
    14be:	80 e8       	ldi	r24, 0x80	; 128
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	08 95       	ret

000014c6 <__fp_nan>:
    14c6:	9f ef       	ldi	r25, 0xFF	; 255
    14c8:	80 ec       	ldi	r24, 0xC0	; 192
    14ca:	08 95       	ret

000014cc <__fp_pscA>:
    14cc:	00 24       	eor	r0, r0
    14ce:	0a 94       	dec	r0
    14d0:	16 16       	cp	r1, r22
    14d2:	17 06       	cpc	r1, r23
    14d4:	18 06       	cpc	r1, r24
    14d6:	09 06       	cpc	r0, r25
    14d8:	08 95       	ret

000014da <__fp_pscB>:
    14da:	00 24       	eor	r0, r0
    14dc:	0a 94       	dec	r0
    14de:	12 16       	cp	r1, r18
    14e0:	13 06       	cpc	r1, r19
    14e2:	14 06       	cpc	r1, r20
    14e4:	05 06       	cpc	r0, r21
    14e6:	08 95       	ret

000014e8 <__fp_round>:
    14e8:	09 2e       	mov	r0, r25
    14ea:	03 94       	inc	r0
    14ec:	00 0c       	add	r0, r0
    14ee:	11 f4       	brne	.+4      	; 0x14f4 <__fp_round+0xc>
    14f0:	88 23       	and	r24, r24
    14f2:	52 f0       	brmi	.+20     	; 0x1508 <__fp_round+0x20>
    14f4:	bb 0f       	add	r27, r27
    14f6:	40 f4       	brcc	.+16     	; 0x1508 <__fp_round+0x20>
    14f8:	bf 2b       	or	r27, r31
    14fa:	11 f4       	brne	.+4      	; 0x1500 <__fp_round+0x18>
    14fc:	60 ff       	sbrs	r22, 0
    14fe:	04 c0       	rjmp	.+8      	; 0x1508 <__fp_round+0x20>
    1500:	6f 5f       	subi	r22, 0xFF	; 255
    1502:	7f 4f       	sbci	r23, 0xFF	; 255
    1504:	8f 4f       	sbci	r24, 0xFF	; 255
    1506:	9f 4f       	sbci	r25, 0xFF	; 255
    1508:	08 95       	ret

0000150a <__fp_split3>:
    150a:	57 fd       	sbrc	r21, 7
    150c:	90 58       	subi	r25, 0x80	; 128
    150e:	44 0f       	add	r20, r20
    1510:	55 1f       	adc	r21, r21
    1512:	59 f0       	breq	.+22     	; 0x152a <__fp_splitA+0x10>
    1514:	5f 3f       	cpi	r21, 0xFF	; 255
    1516:	71 f0       	breq	.+28     	; 0x1534 <__fp_splitA+0x1a>
    1518:	47 95       	ror	r20

0000151a <__fp_splitA>:
    151a:	88 0f       	add	r24, r24
    151c:	97 fb       	bst	r25, 7
    151e:	99 1f       	adc	r25, r25
    1520:	61 f0       	breq	.+24     	; 0x153a <__fp_splitA+0x20>
    1522:	9f 3f       	cpi	r25, 0xFF	; 255
    1524:	79 f0       	breq	.+30     	; 0x1544 <__fp_splitA+0x2a>
    1526:	87 95       	ror	r24
    1528:	08 95       	ret
    152a:	12 16       	cp	r1, r18
    152c:	13 06       	cpc	r1, r19
    152e:	14 06       	cpc	r1, r20
    1530:	55 1f       	adc	r21, r21
    1532:	f2 cf       	rjmp	.-28     	; 0x1518 <__fp_split3+0xe>
    1534:	46 95       	lsr	r20
    1536:	f1 df       	rcall	.-30     	; 0x151a <__fp_splitA>
    1538:	08 c0       	rjmp	.+16     	; 0x154a <__fp_splitA+0x30>
    153a:	16 16       	cp	r1, r22
    153c:	17 06       	cpc	r1, r23
    153e:	18 06       	cpc	r1, r24
    1540:	99 1f       	adc	r25, r25
    1542:	f1 cf       	rjmp	.-30     	; 0x1526 <__fp_splitA+0xc>
    1544:	86 95       	lsr	r24
    1546:	71 05       	cpc	r23, r1
    1548:	61 05       	cpc	r22, r1
    154a:	08 94       	sec
    154c:	08 95       	ret

0000154e <__fp_zero>:
    154e:	e8 94       	clt

00001550 <__fp_szero>:
    1550:	bb 27       	eor	r27, r27
    1552:	66 27       	eor	r22, r22
    1554:	77 27       	eor	r23, r23
    1556:	cb 01       	movw	r24, r22
    1558:	97 f9       	bld	r25, 7
    155a:	08 95       	ret

0000155c <__mulsf3>:
    155c:	0b d0       	rcall	.+22     	; 0x1574 <__mulsf3x>
    155e:	c4 cf       	rjmp	.-120    	; 0x14e8 <__fp_round>
    1560:	b5 df       	rcall	.-150    	; 0x14cc <__fp_pscA>
    1562:	28 f0       	brcs	.+10     	; 0x156e <__mulsf3+0x12>
    1564:	ba df       	rcall	.-140    	; 0x14da <__fp_pscB>
    1566:	18 f0       	brcs	.+6      	; 0x156e <__mulsf3+0x12>
    1568:	95 23       	and	r25, r21
    156a:	09 f0       	breq	.+2      	; 0x156e <__mulsf3+0x12>
    156c:	a6 cf       	rjmp	.-180    	; 0x14ba <__fp_inf>
    156e:	ab cf       	rjmp	.-170    	; 0x14c6 <__fp_nan>
    1570:	11 24       	eor	r1, r1
    1572:	ee cf       	rjmp	.-36     	; 0x1550 <__fp_szero>

00001574 <__mulsf3x>:
    1574:	ca df       	rcall	.-108    	; 0x150a <__fp_split3>
    1576:	a0 f3       	brcs	.-24     	; 0x1560 <__mulsf3+0x4>

00001578 <__mulsf3_pse>:
    1578:	95 9f       	mul	r25, r21
    157a:	d1 f3       	breq	.-12     	; 0x1570 <__mulsf3+0x14>
    157c:	95 0f       	add	r25, r21
    157e:	50 e0       	ldi	r21, 0x00	; 0
    1580:	55 1f       	adc	r21, r21
    1582:	62 9f       	mul	r22, r18
    1584:	f0 01       	movw	r30, r0
    1586:	72 9f       	mul	r23, r18
    1588:	bb 27       	eor	r27, r27
    158a:	f0 0d       	add	r31, r0
    158c:	b1 1d       	adc	r27, r1
    158e:	63 9f       	mul	r22, r19
    1590:	aa 27       	eor	r26, r26
    1592:	f0 0d       	add	r31, r0
    1594:	b1 1d       	adc	r27, r1
    1596:	aa 1f       	adc	r26, r26
    1598:	64 9f       	mul	r22, r20
    159a:	66 27       	eor	r22, r22
    159c:	b0 0d       	add	r27, r0
    159e:	a1 1d       	adc	r26, r1
    15a0:	66 1f       	adc	r22, r22
    15a2:	82 9f       	mul	r24, r18
    15a4:	22 27       	eor	r18, r18
    15a6:	b0 0d       	add	r27, r0
    15a8:	a1 1d       	adc	r26, r1
    15aa:	62 1f       	adc	r22, r18
    15ac:	73 9f       	mul	r23, r19
    15ae:	b0 0d       	add	r27, r0
    15b0:	a1 1d       	adc	r26, r1
    15b2:	62 1f       	adc	r22, r18
    15b4:	83 9f       	mul	r24, r19
    15b6:	a0 0d       	add	r26, r0
    15b8:	61 1d       	adc	r22, r1
    15ba:	22 1f       	adc	r18, r18
    15bc:	74 9f       	mul	r23, r20
    15be:	33 27       	eor	r19, r19
    15c0:	a0 0d       	add	r26, r0
    15c2:	61 1d       	adc	r22, r1
    15c4:	23 1f       	adc	r18, r19
    15c6:	84 9f       	mul	r24, r20
    15c8:	60 0d       	add	r22, r0
    15ca:	21 1d       	adc	r18, r1
    15cc:	82 2f       	mov	r24, r18
    15ce:	76 2f       	mov	r23, r22
    15d0:	6a 2f       	mov	r22, r26
    15d2:	11 24       	eor	r1, r1
    15d4:	9f 57       	subi	r25, 0x7F	; 127
    15d6:	50 40       	sbci	r21, 0x00	; 0
    15d8:	8a f0       	brmi	.+34     	; 0x15fc <__mulsf3_pse+0x84>
    15da:	e1 f0       	breq	.+56     	; 0x1614 <__mulsf3_pse+0x9c>
    15dc:	88 23       	and	r24, r24
    15de:	4a f0       	brmi	.+18     	; 0x15f2 <__mulsf3_pse+0x7a>
    15e0:	ee 0f       	add	r30, r30
    15e2:	ff 1f       	adc	r31, r31
    15e4:	bb 1f       	adc	r27, r27
    15e6:	66 1f       	adc	r22, r22
    15e8:	77 1f       	adc	r23, r23
    15ea:	88 1f       	adc	r24, r24
    15ec:	91 50       	subi	r25, 0x01	; 1
    15ee:	50 40       	sbci	r21, 0x00	; 0
    15f0:	a9 f7       	brne	.-22     	; 0x15dc <__mulsf3_pse+0x64>
    15f2:	9e 3f       	cpi	r25, 0xFE	; 254
    15f4:	51 05       	cpc	r21, r1
    15f6:	70 f0       	brcs	.+28     	; 0x1614 <__mulsf3_pse+0x9c>
    15f8:	60 cf       	rjmp	.-320    	; 0x14ba <__fp_inf>
    15fa:	aa cf       	rjmp	.-172    	; 0x1550 <__fp_szero>
    15fc:	5f 3f       	cpi	r21, 0xFF	; 255
    15fe:	ec f3       	brlt	.-6      	; 0x15fa <__mulsf3_pse+0x82>
    1600:	98 3e       	cpi	r25, 0xE8	; 232
    1602:	dc f3       	brlt	.-10     	; 0x15fa <__mulsf3_pse+0x82>
    1604:	86 95       	lsr	r24
    1606:	77 95       	ror	r23
    1608:	67 95       	ror	r22
    160a:	b7 95       	ror	r27
    160c:	f7 95       	ror	r31
    160e:	e7 95       	ror	r30
    1610:	9f 5f       	subi	r25, 0xFF	; 255
    1612:	c1 f7       	brne	.-16     	; 0x1604 <__mulsf3_pse+0x8c>
    1614:	fe 2b       	or	r31, r30
    1616:	88 0f       	add	r24, r24
    1618:	91 1d       	adc	r25, r1
    161a:	96 95       	lsr	r25
    161c:	87 95       	ror	r24
    161e:	97 f9       	bld	r25, 7
    1620:	08 95       	ret

00001622 <__divmodhi4>:
    1622:	97 fb       	bst	r25, 7
    1624:	07 2e       	mov	r0, r23
    1626:	16 f4       	brtc	.+4      	; 0x162c <__divmodhi4+0xa>
    1628:	00 94       	com	r0
    162a:	06 d0       	rcall	.+12     	; 0x1638 <__divmodhi4_neg1>
    162c:	77 fd       	sbrc	r23, 7
    162e:	08 d0       	rcall	.+16     	; 0x1640 <__divmodhi4_neg2>
    1630:	45 d0       	rcall	.+138    	; 0x16bc <__udivmodhi4>
    1632:	07 fc       	sbrc	r0, 7
    1634:	05 d0       	rcall	.+10     	; 0x1640 <__divmodhi4_neg2>
    1636:	3e f4       	brtc	.+14     	; 0x1646 <__divmodhi4_exit>

00001638 <__divmodhi4_neg1>:
    1638:	90 95       	com	r25
    163a:	81 95       	neg	r24
    163c:	9f 4f       	sbci	r25, 0xFF	; 255
    163e:	08 95       	ret

00001640 <__divmodhi4_neg2>:
    1640:	70 95       	com	r23
    1642:	61 95       	neg	r22
    1644:	7f 4f       	sbci	r23, 0xFF	; 255

00001646 <__divmodhi4_exit>:
    1646:	08 95       	ret

00001648 <__udivmodsi4>:
    1648:	a1 e2       	ldi	r26, 0x21	; 33
    164a:	1a 2e       	mov	r1, r26
    164c:	aa 1b       	sub	r26, r26
    164e:	bb 1b       	sub	r27, r27
    1650:	fd 01       	movw	r30, r26
    1652:	0d c0       	rjmp	.+26     	; 0x166e <__udivmodsi4_ep>

00001654 <__udivmodsi4_loop>:
    1654:	aa 1f       	adc	r26, r26
    1656:	bb 1f       	adc	r27, r27
    1658:	ee 1f       	adc	r30, r30
    165a:	ff 1f       	adc	r31, r31
    165c:	a2 17       	cp	r26, r18
    165e:	b3 07       	cpc	r27, r19
    1660:	e4 07       	cpc	r30, r20
    1662:	f5 07       	cpc	r31, r21
    1664:	20 f0       	brcs	.+8      	; 0x166e <__udivmodsi4_ep>
    1666:	a2 1b       	sub	r26, r18
    1668:	b3 0b       	sbc	r27, r19
    166a:	e4 0b       	sbc	r30, r20
    166c:	f5 0b       	sbc	r31, r21

0000166e <__udivmodsi4_ep>:
    166e:	66 1f       	adc	r22, r22
    1670:	77 1f       	adc	r23, r23
    1672:	88 1f       	adc	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	1a 94       	dec	r1
    1678:	69 f7       	brne	.-38     	; 0x1654 <__udivmodsi4_loop>
    167a:	60 95       	com	r22
    167c:	70 95       	com	r23
    167e:	80 95       	com	r24
    1680:	90 95       	com	r25
    1682:	9b 01       	movw	r18, r22
    1684:	ac 01       	movw	r20, r24
    1686:	bd 01       	movw	r22, r26
    1688:	cf 01       	movw	r24, r30
    168a:	08 95       	ret

0000168c <__tablejump2__>:
    168c:	ee 0f       	add	r30, r30
    168e:	ff 1f       	adc	r31, r31
    1690:	00 24       	eor	r0, r0
    1692:	00 1c       	adc	r0, r0
    1694:	0b be       	out	0x3b, r0	; 59
    1696:	07 90       	elpm	r0, Z+
    1698:	f6 91       	elpm	r31, Z
    169a:	e0 2d       	mov	r30, r0
    169c:	09 94       	ijmp

0000169e <__umulhisi3>:
    169e:	a2 9f       	mul	r26, r18
    16a0:	b0 01       	movw	r22, r0
    16a2:	b3 9f       	mul	r27, r19
    16a4:	c0 01       	movw	r24, r0
    16a6:	a3 9f       	mul	r26, r19
    16a8:	70 0d       	add	r23, r0
    16aa:	81 1d       	adc	r24, r1
    16ac:	11 24       	eor	r1, r1
    16ae:	91 1d       	adc	r25, r1
    16b0:	b2 9f       	mul	r27, r18
    16b2:	70 0d       	add	r23, r0
    16b4:	81 1d       	adc	r24, r1
    16b6:	11 24       	eor	r1, r1
    16b8:	91 1d       	adc	r25, r1
    16ba:	08 95       	ret

000016bc <__udivmodhi4>:
    16bc:	aa 1b       	sub	r26, r26
    16be:	bb 1b       	sub	r27, r27
    16c0:	51 e1       	ldi	r21, 0x11	; 17
    16c2:	07 c0       	rjmp	.+14     	; 0x16d2 <__udivmodhi4_ep>

000016c4 <__udivmodhi4_loop>:
    16c4:	aa 1f       	adc	r26, r26
    16c6:	bb 1f       	adc	r27, r27
    16c8:	a6 17       	cp	r26, r22
    16ca:	b7 07       	cpc	r27, r23
    16cc:	10 f0       	brcs	.+4      	; 0x16d2 <__udivmodhi4_ep>
    16ce:	a6 1b       	sub	r26, r22
    16d0:	b7 0b       	sbc	r27, r23

000016d2 <__udivmodhi4_ep>:
    16d2:	88 1f       	adc	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	5a 95       	dec	r21
    16d8:	a9 f7       	brne	.-22     	; 0x16c4 <__udivmodhi4_loop>
    16da:	80 95       	com	r24
    16dc:	90 95       	com	r25
    16de:	bc 01       	movw	r22, r24
    16e0:	cd 01       	movw	r24, r26
    16e2:	08 95       	ret

000016e4 <strncmp>:
    16e4:	fb 01       	movw	r30, r22
    16e6:	dc 01       	movw	r26, r24
    16e8:	41 50       	subi	r20, 0x01	; 1
    16ea:	50 40       	sbci	r21, 0x00	; 0
    16ec:	30 f0       	brcs	.+12     	; 0x16fa <strncmp+0x16>
    16ee:	8d 91       	ld	r24, X+
    16f0:	01 90       	ld	r0, Z+
    16f2:	80 19       	sub	r24, r0
    16f4:	19 f4       	brne	.+6      	; 0x16fc <strncmp+0x18>
    16f6:	00 20       	and	r0, r0
    16f8:	b9 f7       	brne	.-18     	; 0x16e8 <strncmp+0x4>
    16fa:	88 1b       	sub	r24, r24
    16fc:	99 0b       	sbc	r25, r25
    16fe:	08 95       	ret

00001700 <puts>:
    1700:	0f 93       	push	r16
    1702:	1f 93       	push	r17
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <__iob+0x2>
    170c:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <__iob+0x3>
    1710:	23 81       	ldd	r18, Z+3	; 0x03
    1712:	21 ff       	sbrs	r18, 1
    1714:	1b c0       	rjmp	.+54     	; 0x174c <puts+0x4c>
    1716:	8c 01       	movw	r16, r24
    1718:	d0 e0       	ldi	r29, 0x00	; 0
    171a:	c0 e0       	ldi	r28, 0x00	; 0
    171c:	f8 01       	movw	r30, r16
    171e:	81 91       	ld	r24, Z+
    1720:	8f 01       	movw	r16, r30
    1722:	60 91 eb 02 	lds	r22, 0x02EB	; 0x8002eb <__iob+0x2>
    1726:	70 91 ec 02 	lds	r23, 0x02EC	; 0x8002ec <__iob+0x3>
    172a:	db 01       	movw	r26, r22
    172c:	18 96       	adiw	r26, 0x08	; 8
    172e:	ed 91       	ld	r30, X+
    1730:	fc 91       	ld	r31, X
    1732:	19 97       	sbiw	r26, 0x09	; 9
    1734:	88 23       	and	r24, r24
    1736:	31 f0       	breq	.+12     	; 0x1744 <puts+0x44>
    1738:	09 95       	icall
    173a:	89 2b       	or	r24, r25
    173c:	79 f3       	breq	.-34     	; 0x171c <puts+0x1c>
    173e:	df ef       	ldi	r29, 0xFF	; 255
    1740:	cf ef       	ldi	r28, 0xFF	; 255
    1742:	ec cf       	rjmp	.-40     	; 0x171c <puts+0x1c>
    1744:	8a e0       	ldi	r24, 0x0A	; 10
    1746:	09 95       	icall
    1748:	89 2b       	or	r24, r25
    174a:	19 f0       	breq	.+6      	; 0x1752 <puts+0x52>
    174c:	8f ef       	ldi	r24, 0xFF	; 255
    174e:	9f ef       	ldi	r25, 0xFF	; 255
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <puts+0x56>
    1752:	8d 2f       	mov	r24, r29
    1754:	9c 2f       	mov	r25, r28
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	1f 91       	pop	r17
    175c:	0f 91       	pop	r16
    175e:	08 95       	ret

00001760 <sprintf>:
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	2e 97       	sbiw	r28, 0x0e	; 14
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	cd bf       	out	0x3d, r28	; 61
    1778:	0d 89       	ldd	r16, Y+21	; 0x15
    177a:	1e 89       	ldd	r17, Y+22	; 0x16
    177c:	86 e0       	ldi	r24, 0x06	; 6
    177e:	8c 83       	std	Y+4, r24	; 0x04
    1780:	1a 83       	std	Y+2, r17	; 0x02
    1782:	09 83       	std	Y+1, r16	; 0x01
    1784:	8f ef       	ldi	r24, 0xFF	; 255
    1786:	9f e7       	ldi	r25, 0x7F	; 127
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	8d 83       	std	Y+5, r24	; 0x05
    178c:	ae 01       	movw	r20, r28
    178e:	47 5e       	subi	r20, 0xE7	; 231
    1790:	5f 4f       	sbci	r21, 0xFF	; 255
    1792:	6f 89       	ldd	r22, Y+23	; 0x17
    1794:	78 8d       	ldd	r23, Y+24	; 0x18
    1796:	ce 01       	movw	r24, r28
    1798:	01 96       	adiw	r24, 0x01	; 1
    179a:	10 d0       	rcall	.+32     	; 0x17bc <vfprintf>
    179c:	ef 81       	ldd	r30, Y+7	; 0x07
    179e:	f8 85       	ldd	r31, Y+8	; 0x08
    17a0:	e0 0f       	add	r30, r16
    17a2:	f1 1f       	adc	r31, r17
    17a4:	10 82       	st	Z, r1
    17a6:	2e 96       	adiw	r28, 0x0e	; 14
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	08 95       	ret

000017bc <vfprintf>:
    17bc:	2f 92       	push	r2
    17be:	3f 92       	push	r3
    17c0:	4f 92       	push	r4
    17c2:	5f 92       	push	r5
    17c4:	6f 92       	push	r6
    17c6:	7f 92       	push	r7
    17c8:	8f 92       	push	r8
    17ca:	9f 92       	push	r9
    17cc:	af 92       	push	r10
    17ce:	bf 92       	push	r11
    17d0:	cf 92       	push	r12
    17d2:	df 92       	push	r13
    17d4:	ef 92       	push	r14
    17d6:	ff 92       	push	r15
    17d8:	0f 93       	push	r16
    17da:	1f 93       	push	r17
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	2b 97       	sbiw	r28, 0x0b	; 11
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	6c 01       	movw	r12, r24
    17f2:	7b 01       	movw	r14, r22
    17f4:	8a 01       	movw	r16, r20
    17f6:	fc 01       	movw	r30, r24
    17f8:	17 82       	std	Z+7, r1	; 0x07
    17fa:	16 82       	std	Z+6, r1	; 0x06
    17fc:	83 81       	ldd	r24, Z+3	; 0x03
    17fe:	81 ff       	sbrs	r24, 1
    1800:	bf c1       	rjmp	.+894    	; 0x1b80 <vfprintf+0x3c4>
    1802:	ce 01       	movw	r24, r28
    1804:	01 96       	adiw	r24, 0x01	; 1
    1806:	3c 01       	movw	r6, r24
    1808:	f6 01       	movw	r30, r12
    180a:	93 81       	ldd	r25, Z+3	; 0x03
    180c:	f7 01       	movw	r30, r14
    180e:	93 fd       	sbrc	r25, 3
    1810:	85 91       	lpm	r24, Z+
    1812:	93 ff       	sbrs	r25, 3
    1814:	81 91       	ld	r24, Z+
    1816:	7f 01       	movw	r14, r30
    1818:	88 23       	and	r24, r24
    181a:	09 f4       	brne	.+2      	; 0x181e <vfprintf+0x62>
    181c:	ad c1       	rjmp	.+858    	; 0x1b78 <vfprintf+0x3bc>
    181e:	85 32       	cpi	r24, 0x25	; 37
    1820:	39 f4       	brne	.+14     	; 0x1830 <vfprintf+0x74>
    1822:	93 fd       	sbrc	r25, 3
    1824:	85 91       	lpm	r24, Z+
    1826:	93 ff       	sbrs	r25, 3
    1828:	81 91       	ld	r24, Z+
    182a:	7f 01       	movw	r14, r30
    182c:	85 32       	cpi	r24, 0x25	; 37
    182e:	21 f4       	brne	.+8      	; 0x1838 <vfprintf+0x7c>
    1830:	b6 01       	movw	r22, r12
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	d6 d1       	rcall	.+940    	; 0x1be2 <fputc>
    1836:	e8 cf       	rjmp	.-48     	; 0x1808 <vfprintf+0x4c>
    1838:	91 2c       	mov	r9, r1
    183a:	21 2c       	mov	r2, r1
    183c:	31 2c       	mov	r3, r1
    183e:	ff e1       	ldi	r31, 0x1F	; 31
    1840:	f3 15       	cp	r31, r3
    1842:	d8 f0       	brcs	.+54     	; 0x187a <vfprintf+0xbe>
    1844:	8b 32       	cpi	r24, 0x2B	; 43
    1846:	79 f0       	breq	.+30     	; 0x1866 <vfprintf+0xaa>
    1848:	38 f4       	brcc	.+14     	; 0x1858 <vfprintf+0x9c>
    184a:	80 32       	cpi	r24, 0x20	; 32
    184c:	79 f0       	breq	.+30     	; 0x186c <vfprintf+0xb0>
    184e:	83 32       	cpi	r24, 0x23	; 35
    1850:	a1 f4       	brne	.+40     	; 0x187a <vfprintf+0xbe>
    1852:	23 2d       	mov	r18, r3
    1854:	20 61       	ori	r18, 0x10	; 16
    1856:	1d c0       	rjmp	.+58     	; 0x1892 <vfprintf+0xd6>
    1858:	8d 32       	cpi	r24, 0x2D	; 45
    185a:	61 f0       	breq	.+24     	; 0x1874 <vfprintf+0xb8>
    185c:	80 33       	cpi	r24, 0x30	; 48
    185e:	69 f4       	brne	.+26     	; 0x187a <vfprintf+0xbe>
    1860:	23 2d       	mov	r18, r3
    1862:	21 60       	ori	r18, 0x01	; 1
    1864:	16 c0       	rjmp	.+44     	; 0x1892 <vfprintf+0xd6>
    1866:	83 2d       	mov	r24, r3
    1868:	82 60       	ori	r24, 0x02	; 2
    186a:	38 2e       	mov	r3, r24
    186c:	e3 2d       	mov	r30, r3
    186e:	e4 60       	ori	r30, 0x04	; 4
    1870:	3e 2e       	mov	r3, r30
    1872:	2a c0       	rjmp	.+84     	; 0x18c8 <vfprintf+0x10c>
    1874:	f3 2d       	mov	r31, r3
    1876:	f8 60       	ori	r31, 0x08	; 8
    1878:	1d c0       	rjmp	.+58     	; 0x18b4 <vfprintf+0xf8>
    187a:	37 fc       	sbrc	r3, 7
    187c:	2d c0       	rjmp	.+90     	; 0x18d8 <vfprintf+0x11c>
    187e:	20 ed       	ldi	r18, 0xD0	; 208
    1880:	28 0f       	add	r18, r24
    1882:	2a 30       	cpi	r18, 0x0A	; 10
    1884:	40 f0       	brcs	.+16     	; 0x1896 <vfprintf+0xda>
    1886:	8e 32       	cpi	r24, 0x2E	; 46
    1888:	b9 f4       	brne	.+46     	; 0x18b8 <vfprintf+0xfc>
    188a:	36 fc       	sbrc	r3, 6
    188c:	75 c1       	rjmp	.+746    	; 0x1b78 <vfprintf+0x3bc>
    188e:	23 2d       	mov	r18, r3
    1890:	20 64       	ori	r18, 0x40	; 64
    1892:	32 2e       	mov	r3, r18
    1894:	19 c0       	rjmp	.+50     	; 0x18c8 <vfprintf+0x10c>
    1896:	36 fe       	sbrs	r3, 6
    1898:	06 c0       	rjmp	.+12     	; 0x18a6 <vfprintf+0xea>
    189a:	8a e0       	ldi	r24, 0x0A	; 10
    189c:	98 9e       	mul	r9, r24
    189e:	20 0d       	add	r18, r0
    18a0:	11 24       	eor	r1, r1
    18a2:	92 2e       	mov	r9, r18
    18a4:	11 c0       	rjmp	.+34     	; 0x18c8 <vfprintf+0x10c>
    18a6:	ea e0       	ldi	r30, 0x0A	; 10
    18a8:	2e 9e       	mul	r2, r30
    18aa:	20 0d       	add	r18, r0
    18ac:	11 24       	eor	r1, r1
    18ae:	22 2e       	mov	r2, r18
    18b0:	f3 2d       	mov	r31, r3
    18b2:	f0 62       	ori	r31, 0x20	; 32
    18b4:	3f 2e       	mov	r3, r31
    18b6:	08 c0       	rjmp	.+16     	; 0x18c8 <vfprintf+0x10c>
    18b8:	8c 36       	cpi	r24, 0x6C	; 108
    18ba:	21 f4       	brne	.+8      	; 0x18c4 <vfprintf+0x108>
    18bc:	83 2d       	mov	r24, r3
    18be:	80 68       	ori	r24, 0x80	; 128
    18c0:	38 2e       	mov	r3, r24
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <vfprintf+0x10c>
    18c4:	88 36       	cpi	r24, 0x68	; 104
    18c6:	41 f4       	brne	.+16     	; 0x18d8 <vfprintf+0x11c>
    18c8:	f7 01       	movw	r30, r14
    18ca:	93 fd       	sbrc	r25, 3
    18cc:	85 91       	lpm	r24, Z+
    18ce:	93 ff       	sbrs	r25, 3
    18d0:	81 91       	ld	r24, Z+
    18d2:	7f 01       	movw	r14, r30
    18d4:	81 11       	cpse	r24, r1
    18d6:	b3 cf       	rjmp	.-154    	; 0x183e <vfprintf+0x82>
    18d8:	98 2f       	mov	r25, r24
    18da:	9f 7d       	andi	r25, 0xDF	; 223
    18dc:	95 54       	subi	r25, 0x45	; 69
    18de:	93 30       	cpi	r25, 0x03	; 3
    18e0:	28 f4       	brcc	.+10     	; 0x18ec <vfprintf+0x130>
    18e2:	0c 5f       	subi	r16, 0xFC	; 252
    18e4:	1f 4f       	sbci	r17, 0xFF	; 255
    18e6:	9f e3       	ldi	r25, 0x3F	; 63
    18e8:	99 83       	std	Y+1, r25	; 0x01
    18ea:	0d c0       	rjmp	.+26     	; 0x1906 <vfprintf+0x14a>
    18ec:	83 36       	cpi	r24, 0x63	; 99
    18ee:	31 f0       	breq	.+12     	; 0x18fc <vfprintf+0x140>
    18f0:	83 37       	cpi	r24, 0x73	; 115
    18f2:	71 f0       	breq	.+28     	; 0x1910 <vfprintf+0x154>
    18f4:	83 35       	cpi	r24, 0x53	; 83
    18f6:	09 f0       	breq	.+2      	; 0x18fa <vfprintf+0x13e>
    18f8:	55 c0       	rjmp	.+170    	; 0x19a4 <vfprintf+0x1e8>
    18fa:	20 c0       	rjmp	.+64     	; 0x193c <vfprintf+0x180>
    18fc:	f8 01       	movw	r30, r16
    18fe:	80 81       	ld	r24, Z
    1900:	89 83       	std	Y+1, r24	; 0x01
    1902:	0e 5f       	subi	r16, 0xFE	; 254
    1904:	1f 4f       	sbci	r17, 0xFF	; 255
    1906:	88 24       	eor	r8, r8
    1908:	83 94       	inc	r8
    190a:	91 2c       	mov	r9, r1
    190c:	53 01       	movw	r10, r6
    190e:	12 c0       	rjmp	.+36     	; 0x1934 <vfprintf+0x178>
    1910:	28 01       	movw	r4, r16
    1912:	f2 e0       	ldi	r31, 0x02	; 2
    1914:	4f 0e       	add	r4, r31
    1916:	51 1c       	adc	r5, r1
    1918:	f8 01       	movw	r30, r16
    191a:	a0 80       	ld	r10, Z
    191c:	b1 80       	ldd	r11, Z+1	; 0x01
    191e:	36 fe       	sbrs	r3, 6
    1920:	03 c0       	rjmp	.+6      	; 0x1928 <vfprintf+0x16c>
    1922:	69 2d       	mov	r22, r9
    1924:	70 e0       	ldi	r23, 0x00	; 0
    1926:	02 c0       	rjmp	.+4      	; 0x192c <vfprintf+0x170>
    1928:	6f ef       	ldi	r22, 0xFF	; 255
    192a:	7f ef       	ldi	r23, 0xFF	; 255
    192c:	c5 01       	movw	r24, r10
    192e:	4e d1       	rcall	.+668    	; 0x1bcc <strnlen>
    1930:	4c 01       	movw	r8, r24
    1932:	82 01       	movw	r16, r4
    1934:	f3 2d       	mov	r31, r3
    1936:	ff 77       	andi	r31, 0x7F	; 127
    1938:	3f 2e       	mov	r3, r31
    193a:	15 c0       	rjmp	.+42     	; 0x1966 <vfprintf+0x1aa>
    193c:	28 01       	movw	r4, r16
    193e:	22 e0       	ldi	r18, 0x02	; 2
    1940:	42 0e       	add	r4, r18
    1942:	51 1c       	adc	r5, r1
    1944:	f8 01       	movw	r30, r16
    1946:	a0 80       	ld	r10, Z
    1948:	b1 80       	ldd	r11, Z+1	; 0x01
    194a:	36 fe       	sbrs	r3, 6
    194c:	03 c0       	rjmp	.+6      	; 0x1954 <vfprintf+0x198>
    194e:	69 2d       	mov	r22, r9
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <vfprintf+0x19c>
    1954:	6f ef       	ldi	r22, 0xFF	; 255
    1956:	7f ef       	ldi	r23, 0xFF	; 255
    1958:	c5 01       	movw	r24, r10
    195a:	2d d1       	rcall	.+602    	; 0x1bb6 <strnlen_P>
    195c:	4c 01       	movw	r8, r24
    195e:	f3 2d       	mov	r31, r3
    1960:	f0 68       	ori	r31, 0x80	; 128
    1962:	3f 2e       	mov	r3, r31
    1964:	82 01       	movw	r16, r4
    1966:	33 fc       	sbrc	r3, 3
    1968:	19 c0       	rjmp	.+50     	; 0x199c <vfprintf+0x1e0>
    196a:	82 2d       	mov	r24, r2
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	88 16       	cp	r8, r24
    1970:	99 06       	cpc	r9, r25
    1972:	a0 f4       	brcc	.+40     	; 0x199c <vfprintf+0x1e0>
    1974:	b6 01       	movw	r22, r12
    1976:	80 e2       	ldi	r24, 0x20	; 32
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	33 d1       	rcall	.+614    	; 0x1be2 <fputc>
    197c:	2a 94       	dec	r2
    197e:	f5 cf       	rjmp	.-22     	; 0x196a <vfprintf+0x1ae>
    1980:	f5 01       	movw	r30, r10
    1982:	37 fc       	sbrc	r3, 7
    1984:	85 91       	lpm	r24, Z+
    1986:	37 fe       	sbrs	r3, 7
    1988:	81 91       	ld	r24, Z+
    198a:	5f 01       	movw	r10, r30
    198c:	b6 01       	movw	r22, r12
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	28 d1       	rcall	.+592    	; 0x1be2 <fputc>
    1992:	21 10       	cpse	r2, r1
    1994:	2a 94       	dec	r2
    1996:	21 e0       	ldi	r18, 0x01	; 1
    1998:	82 1a       	sub	r8, r18
    199a:	91 08       	sbc	r9, r1
    199c:	81 14       	cp	r8, r1
    199e:	91 04       	cpc	r9, r1
    19a0:	79 f7       	brne	.-34     	; 0x1980 <vfprintf+0x1c4>
    19a2:	e1 c0       	rjmp	.+450    	; 0x1b66 <vfprintf+0x3aa>
    19a4:	84 36       	cpi	r24, 0x64	; 100
    19a6:	11 f0       	breq	.+4      	; 0x19ac <vfprintf+0x1f0>
    19a8:	89 36       	cpi	r24, 0x69	; 105
    19aa:	39 f5       	brne	.+78     	; 0x19fa <vfprintf+0x23e>
    19ac:	f8 01       	movw	r30, r16
    19ae:	37 fe       	sbrs	r3, 7
    19b0:	07 c0       	rjmp	.+14     	; 0x19c0 <vfprintf+0x204>
    19b2:	60 81       	ld	r22, Z
    19b4:	71 81       	ldd	r23, Z+1	; 0x01
    19b6:	82 81       	ldd	r24, Z+2	; 0x02
    19b8:	93 81       	ldd	r25, Z+3	; 0x03
    19ba:	0c 5f       	subi	r16, 0xFC	; 252
    19bc:	1f 4f       	sbci	r17, 0xFF	; 255
    19be:	08 c0       	rjmp	.+16     	; 0x19d0 <vfprintf+0x214>
    19c0:	60 81       	ld	r22, Z
    19c2:	71 81       	ldd	r23, Z+1	; 0x01
    19c4:	07 2e       	mov	r0, r23
    19c6:	00 0c       	add	r0, r0
    19c8:	88 0b       	sbc	r24, r24
    19ca:	99 0b       	sbc	r25, r25
    19cc:	0e 5f       	subi	r16, 0xFE	; 254
    19ce:	1f 4f       	sbci	r17, 0xFF	; 255
    19d0:	f3 2d       	mov	r31, r3
    19d2:	ff 76       	andi	r31, 0x6F	; 111
    19d4:	3f 2e       	mov	r3, r31
    19d6:	97 ff       	sbrs	r25, 7
    19d8:	09 c0       	rjmp	.+18     	; 0x19ec <vfprintf+0x230>
    19da:	90 95       	com	r25
    19dc:	80 95       	com	r24
    19de:	70 95       	com	r23
    19e0:	61 95       	neg	r22
    19e2:	7f 4f       	sbci	r23, 0xFF	; 255
    19e4:	8f 4f       	sbci	r24, 0xFF	; 255
    19e6:	9f 4f       	sbci	r25, 0xFF	; 255
    19e8:	f0 68       	ori	r31, 0x80	; 128
    19ea:	3f 2e       	mov	r3, r31
    19ec:	2a e0       	ldi	r18, 0x0A	; 10
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	a3 01       	movw	r20, r6
    19f2:	33 d1       	rcall	.+614    	; 0x1c5a <__ultoa_invert>
    19f4:	88 2e       	mov	r8, r24
    19f6:	86 18       	sub	r8, r6
    19f8:	44 c0       	rjmp	.+136    	; 0x1a82 <vfprintf+0x2c6>
    19fa:	85 37       	cpi	r24, 0x75	; 117
    19fc:	31 f4       	brne	.+12     	; 0x1a0a <vfprintf+0x24e>
    19fe:	23 2d       	mov	r18, r3
    1a00:	2f 7e       	andi	r18, 0xEF	; 239
    1a02:	b2 2e       	mov	r11, r18
    1a04:	2a e0       	ldi	r18, 0x0A	; 10
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	25 c0       	rjmp	.+74     	; 0x1a54 <vfprintf+0x298>
    1a0a:	93 2d       	mov	r25, r3
    1a0c:	99 7f       	andi	r25, 0xF9	; 249
    1a0e:	b9 2e       	mov	r11, r25
    1a10:	8f 36       	cpi	r24, 0x6F	; 111
    1a12:	c1 f0       	breq	.+48     	; 0x1a44 <vfprintf+0x288>
    1a14:	18 f4       	brcc	.+6      	; 0x1a1c <vfprintf+0x260>
    1a16:	88 35       	cpi	r24, 0x58	; 88
    1a18:	79 f0       	breq	.+30     	; 0x1a38 <vfprintf+0x27c>
    1a1a:	ae c0       	rjmp	.+348    	; 0x1b78 <vfprintf+0x3bc>
    1a1c:	80 37       	cpi	r24, 0x70	; 112
    1a1e:	19 f0       	breq	.+6      	; 0x1a26 <vfprintf+0x26a>
    1a20:	88 37       	cpi	r24, 0x78	; 120
    1a22:	21 f0       	breq	.+8      	; 0x1a2c <vfprintf+0x270>
    1a24:	a9 c0       	rjmp	.+338    	; 0x1b78 <vfprintf+0x3bc>
    1a26:	e9 2f       	mov	r30, r25
    1a28:	e0 61       	ori	r30, 0x10	; 16
    1a2a:	be 2e       	mov	r11, r30
    1a2c:	b4 fe       	sbrs	r11, 4
    1a2e:	0d c0       	rjmp	.+26     	; 0x1a4a <vfprintf+0x28e>
    1a30:	fb 2d       	mov	r31, r11
    1a32:	f4 60       	ori	r31, 0x04	; 4
    1a34:	bf 2e       	mov	r11, r31
    1a36:	09 c0       	rjmp	.+18     	; 0x1a4a <vfprintf+0x28e>
    1a38:	34 fe       	sbrs	r3, 4
    1a3a:	0a c0       	rjmp	.+20     	; 0x1a50 <vfprintf+0x294>
    1a3c:	29 2f       	mov	r18, r25
    1a3e:	26 60       	ori	r18, 0x06	; 6
    1a40:	b2 2e       	mov	r11, r18
    1a42:	06 c0       	rjmp	.+12     	; 0x1a50 <vfprintf+0x294>
    1a44:	28 e0       	ldi	r18, 0x08	; 8
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	05 c0       	rjmp	.+10     	; 0x1a54 <vfprintf+0x298>
    1a4a:	20 e1       	ldi	r18, 0x10	; 16
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <vfprintf+0x298>
    1a50:	20 e1       	ldi	r18, 0x10	; 16
    1a52:	32 e0       	ldi	r19, 0x02	; 2
    1a54:	f8 01       	movw	r30, r16
    1a56:	b7 fe       	sbrs	r11, 7
    1a58:	07 c0       	rjmp	.+14     	; 0x1a68 <vfprintf+0x2ac>
    1a5a:	60 81       	ld	r22, Z
    1a5c:	71 81       	ldd	r23, Z+1	; 0x01
    1a5e:	82 81       	ldd	r24, Z+2	; 0x02
    1a60:	93 81       	ldd	r25, Z+3	; 0x03
    1a62:	0c 5f       	subi	r16, 0xFC	; 252
    1a64:	1f 4f       	sbci	r17, 0xFF	; 255
    1a66:	06 c0       	rjmp	.+12     	; 0x1a74 <vfprintf+0x2b8>
    1a68:	60 81       	ld	r22, Z
    1a6a:	71 81       	ldd	r23, Z+1	; 0x01
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 5f       	subi	r16, 0xFE	; 254
    1a72:	1f 4f       	sbci	r17, 0xFF	; 255
    1a74:	a3 01       	movw	r20, r6
    1a76:	f1 d0       	rcall	.+482    	; 0x1c5a <__ultoa_invert>
    1a78:	88 2e       	mov	r8, r24
    1a7a:	86 18       	sub	r8, r6
    1a7c:	fb 2d       	mov	r31, r11
    1a7e:	ff 77       	andi	r31, 0x7F	; 127
    1a80:	3f 2e       	mov	r3, r31
    1a82:	36 fe       	sbrs	r3, 6
    1a84:	0d c0       	rjmp	.+26     	; 0x1aa0 <vfprintf+0x2e4>
    1a86:	23 2d       	mov	r18, r3
    1a88:	2e 7f       	andi	r18, 0xFE	; 254
    1a8a:	a2 2e       	mov	r10, r18
    1a8c:	89 14       	cp	r8, r9
    1a8e:	58 f4       	brcc	.+22     	; 0x1aa6 <vfprintf+0x2ea>
    1a90:	34 fe       	sbrs	r3, 4
    1a92:	0b c0       	rjmp	.+22     	; 0x1aaa <vfprintf+0x2ee>
    1a94:	32 fc       	sbrc	r3, 2
    1a96:	09 c0       	rjmp	.+18     	; 0x1aaa <vfprintf+0x2ee>
    1a98:	83 2d       	mov	r24, r3
    1a9a:	8e 7e       	andi	r24, 0xEE	; 238
    1a9c:	a8 2e       	mov	r10, r24
    1a9e:	05 c0       	rjmp	.+10     	; 0x1aaa <vfprintf+0x2ee>
    1aa0:	b8 2c       	mov	r11, r8
    1aa2:	a3 2c       	mov	r10, r3
    1aa4:	03 c0       	rjmp	.+6      	; 0x1aac <vfprintf+0x2f0>
    1aa6:	b8 2c       	mov	r11, r8
    1aa8:	01 c0       	rjmp	.+2      	; 0x1aac <vfprintf+0x2f0>
    1aaa:	b9 2c       	mov	r11, r9
    1aac:	a4 fe       	sbrs	r10, 4
    1aae:	0f c0       	rjmp	.+30     	; 0x1ace <vfprintf+0x312>
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	e8 0d       	add	r30, r8
    1ab4:	f1 1d       	adc	r31, r1
    1ab6:	80 81       	ld	r24, Z
    1ab8:	80 33       	cpi	r24, 0x30	; 48
    1aba:	21 f4       	brne	.+8      	; 0x1ac4 <vfprintf+0x308>
    1abc:	9a 2d       	mov	r25, r10
    1abe:	99 7e       	andi	r25, 0xE9	; 233
    1ac0:	a9 2e       	mov	r10, r25
    1ac2:	09 c0       	rjmp	.+18     	; 0x1ad6 <vfprintf+0x31a>
    1ac4:	a2 fe       	sbrs	r10, 2
    1ac6:	06 c0       	rjmp	.+12     	; 0x1ad4 <vfprintf+0x318>
    1ac8:	b3 94       	inc	r11
    1aca:	b3 94       	inc	r11
    1acc:	04 c0       	rjmp	.+8      	; 0x1ad6 <vfprintf+0x31a>
    1ace:	8a 2d       	mov	r24, r10
    1ad0:	86 78       	andi	r24, 0x86	; 134
    1ad2:	09 f0       	breq	.+2      	; 0x1ad6 <vfprintf+0x31a>
    1ad4:	b3 94       	inc	r11
    1ad6:	a3 fc       	sbrc	r10, 3
    1ad8:	10 c0       	rjmp	.+32     	; 0x1afa <vfprintf+0x33e>
    1ada:	a0 fe       	sbrs	r10, 0
    1adc:	06 c0       	rjmp	.+12     	; 0x1aea <vfprintf+0x32e>
    1ade:	b2 14       	cp	r11, r2
    1ae0:	80 f4       	brcc	.+32     	; 0x1b02 <vfprintf+0x346>
    1ae2:	28 0c       	add	r2, r8
    1ae4:	92 2c       	mov	r9, r2
    1ae6:	9b 18       	sub	r9, r11
    1ae8:	0d c0       	rjmp	.+26     	; 0x1b04 <vfprintf+0x348>
    1aea:	b2 14       	cp	r11, r2
    1aec:	58 f4       	brcc	.+22     	; 0x1b04 <vfprintf+0x348>
    1aee:	b6 01       	movw	r22, r12
    1af0:	80 e2       	ldi	r24, 0x20	; 32
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	76 d0       	rcall	.+236    	; 0x1be2 <fputc>
    1af6:	b3 94       	inc	r11
    1af8:	f8 cf       	rjmp	.-16     	; 0x1aea <vfprintf+0x32e>
    1afa:	b2 14       	cp	r11, r2
    1afc:	18 f4       	brcc	.+6      	; 0x1b04 <vfprintf+0x348>
    1afe:	2b 18       	sub	r2, r11
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <vfprintf+0x34a>
    1b02:	98 2c       	mov	r9, r8
    1b04:	21 2c       	mov	r2, r1
    1b06:	a4 fe       	sbrs	r10, 4
    1b08:	0f c0       	rjmp	.+30     	; 0x1b28 <vfprintf+0x36c>
    1b0a:	b6 01       	movw	r22, r12
    1b0c:	80 e3       	ldi	r24, 0x30	; 48
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	68 d0       	rcall	.+208    	; 0x1be2 <fputc>
    1b12:	a2 fe       	sbrs	r10, 2
    1b14:	16 c0       	rjmp	.+44     	; 0x1b42 <vfprintf+0x386>
    1b16:	a1 fc       	sbrc	r10, 1
    1b18:	03 c0       	rjmp	.+6      	; 0x1b20 <vfprintf+0x364>
    1b1a:	88 e7       	ldi	r24, 0x78	; 120
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <vfprintf+0x368>
    1b20:	88 e5       	ldi	r24, 0x58	; 88
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	b6 01       	movw	r22, r12
    1b26:	0c c0       	rjmp	.+24     	; 0x1b40 <vfprintf+0x384>
    1b28:	8a 2d       	mov	r24, r10
    1b2a:	86 78       	andi	r24, 0x86	; 134
    1b2c:	51 f0       	breq	.+20     	; 0x1b42 <vfprintf+0x386>
    1b2e:	a1 fe       	sbrs	r10, 1
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <vfprintf+0x37a>
    1b32:	8b e2       	ldi	r24, 0x2B	; 43
    1b34:	01 c0       	rjmp	.+2      	; 0x1b38 <vfprintf+0x37c>
    1b36:	80 e2       	ldi	r24, 0x20	; 32
    1b38:	a7 fc       	sbrc	r10, 7
    1b3a:	8d e2       	ldi	r24, 0x2D	; 45
    1b3c:	b6 01       	movw	r22, r12
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	50 d0       	rcall	.+160    	; 0x1be2 <fputc>
    1b42:	89 14       	cp	r8, r9
    1b44:	30 f4       	brcc	.+12     	; 0x1b52 <vfprintf+0x396>
    1b46:	b6 01       	movw	r22, r12
    1b48:	80 e3       	ldi	r24, 0x30	; 48
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	4a d0       	rcall	.+148    	; 0x1be2 <fputc>
    1b4e:	9a 94       	dec	r9
    1b50:	f8 cf       	rjmp	.-16     	; 0x1b42 <vfprintf+0x386>
    1b52:	8a 94       	dec	r8
    1b54:	f3 01       	movw	r30, r6
    1b56:	e8 0d       	add	r30, r8
    1b58:	f1 1d       	adc	r31, r1
    1b5a:	80 81       	ld	r24, Z
    1b5c:	b6 01       	movw	r22, r12
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	40 d0       	rcall	.+128    	; 0x1be2 <fputc>
    1b62:	81 10       	cpse	r8, r1
    1b64:	f6 cf       	rjmp	.-20     	; 0x1b52 <vfprintf+0x396>
    1b66:	22 20       	and	r2, r2
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <vfprintf+0x3b0>
    1b6a:	4e ce       	rjmp	.-868    	; 0x1808 <vfprintf+0x4c>
    1b6c:	b6 01       	movw	r22, r12
    1b6e:	80 e2       	ldi	r24, 0x20	; 32
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	37 d0       	rcall	.+110    	; 0x1be2 <fputc>
    1b74:	2a 94       	dec	r2
    1b76:	f7 cf       	rjmp	.-18     	; 0x1b66 <vfprintf+0x3aa>
    1b78:	f6 01       	movw	r30, r12
    1b7a:	86 81       	ldd	r24, Z+6	; 0x06
    1b7c:	97 81       	ldd	r25, Z+7	; 0x07
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <vfprintf+0x3c8>
    1b80:	8f ef       	ldi	r24, 0xFF	; 255
    1b82:	9f ef       	ldi	r25, 0xFF	; 255
    1b84:	2b 96       	adiw	r28, 0x0b	; 11
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	1f 91       	pop	r17
    1b96:	0f 91       	pop	r16
    1b98:	ff 90       	pop	r15
    1b9a:	ef 90       	pop	r14
    1b9c:	df 90       	pop	r13
    1b9e:	cf 90       	pop	r12
    1ba0:	bf 90       	pop	r11
    1ba2:	af 90       	pop	r10
    1ba4:	9f 90       	pop	r9
    1ba6:	8f 90       	pop	r8
    1ba8:	7f 90       	pop	r7
    1baa:	6f 90       	pop	r6
    1bac:	5f 90       	pop	r5
    1bae:	4f 90       	pop	r4
    1bb0:	3f 90       	pop	r3
    1bb2:	2f 90       	pop	r2
    1bb4:	08 95       	ret

00001bb6 <strnlen_P>:
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	05 90       	lpm	r0, Z+
    1bba:	61 50       	subi	r22, 0x01	; 1
    1bbc:	70 40       	sbci	r23, 0x00	; 0
    1bbe:	01 10       	cpse	r0, r1
    1bc0:	d8 f7       	brcc	.-10     	; 0x1bb8 <strnlen_P+0x2>
    1bc2:	80 95       	com	r24
    1bc4:	90 95       	com	r25
    1bc6:	8e 0f       	add	r24, r30
    1bc8:	9f 1f       	adc	r25, r31
    1bca:	08 95       	ret

00001bcc <strnlen>:
    1bcc:	fc 01       	movw	r30, r24
    1bce:	61 50       	subi	r22, 0x01	; 1
    1bd0:	70 40       	sbci	r23, 0x00	; 0
    1bd2:	01 90       	ld	r0, Z+
    1bd4:	01 10       	cpse	r0, r1
    1bd6:	d8 f7       	brcc	.-10     	; 0x1bce <strnlen+0x2>
    1bd8:	80 95       	com	r24
    1bda:	90 95       	com	r25
    1bdc:	8e 0f       	add	r24, r30
    1bde:	9f 1f       	adc	r25, r31
    1be0:	08 95       	ret

00001be2 <fputc>:
    1be2:	0f 93       	push	r16
    1be4:	1f 93       	push	r17
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	fb 01       	movw	r30, r22
    1bec:	23 81       	ldd	r18, Z+3	; 0x03
    1bee:	21 fd       	sbrc	r18, 1
    1bf0:	03 c0       	rjmp	.+6      	; 0x1bf8 <fputc+0x16>
    1bf2:	8f ef       	ldi	r24, 0xFF	; 255
    1bf4:	9f ef       	ldi	r25, 0xFF	; 255
    1bf6:	2c c0       	rjmp	.+88     	; 0x1c50 <fputc+0x6e>
    1bf8:	22 ff       	sbrs	r18, 2
    1bfa:	16 c0       	rjmp	.+44     	; 0x1c28 <fputc+0x46>
    1bfc:	46 81       	ldd	r20, Z+6	; 0x06
    1bfe:	57 81       	ldd	r21, Z+7	; 0x07
    1c00:	24 81       	ldd	r18, Z+4	; 0x04
    1c02:	35 81       	ldd	r19, Z+5	; 0x05
    1c04:	42 17       	cp	r20, r18
    1c06:	53 07       	cpc	r21, r19
    1c08:	44 f4       	brge	.+16     	; 0x1c1a <fputc+0x38>
    1c0a:	a0 81       	ld	r26, Z
    1c0c:	b1 81       	ldd	r27, Z+1	; 0x01
    1c0e:	9d 01       	movw	r18, r26
    1c10:	2f 5f       	subi	r18, 0xFF	; 255
    1c12:	3f 4f       	sbci	r19, 0xFF	; 255
    1c14:	31 83       	std	Z+1, r19	; 0x01
    1c16:	20 83       	st	Z, r18
    1c18:	8c 93       	st	X, r24
    1c1a:	26 81       	ldd	r18, Z+6	; 0x06
    1c1c:	37 81       	ldd	r19, Z+7	; 0x07
    1c1e:	2f 5f       	subi	r18, 0xFF	; 255
    1c20:	3f 4f       	sbci	r19, 0xFF	; 255
    1c22:	37 83       	std	Z+7, r19	; 0x07
    1c24:	26 83       	std	Z+6, r18	; 0x06
    1c26:	14 c0       	rjmp	.+40     	; 0x1c50 <fputc+0x6e>
    1c28:	8b 01       	movw	r16, r22
    1c2a:	ec 01       	movw	r28, r24
    1c2c:	fb 01       	movw	r30, r22
    1c2e:	00 84       	ldd	r0, Z+8	; 0x08
    1c30:	f1 85       	ldd	r31, Z+9	; 0x09
    1c32:	e0 2d       	mov	r30, r0
    1c34:	09 95       	icall
    1c36:	89 2b       	or	r24, r25
    1c38:	e1 f6       	brne	.-72     	; 0x1bf2 <fputc+0x10>
    1c3a:	d8 01       	movw	r26, r16
    1c3c:	16 96       	adiw	r26, 0x06	; 6
    1c3e:	8d 91       	ld	r24, X+
    1c40:	9c 91       	ld	r25, X
    1c42:	17 97       	sbiw	r26, 0x07	; 7
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	17 96       	adiw	r26, 0x07	; 7
    1c48:	9c 93       	st	X, r25
    1c4a:	8e 93       	st	-X, r24
    1c4c:	16 97       	sbiw	r26, 0x06	; 6
    1c4e:	ce 01       	movw	r24, r28
    1c50:	df 91       	pop	r29
    1c52:	cf 91       	pop	r28
    1c54:	1f 91       	pop	r17
    1c56:	0f 91       	pop	r16
    1c58:	08 95       	ret

00001c5a <__ultoa_invert>:
    1c5a:	fa 01       	movw	r30, r20
    1c5c:	aa 27       	eor	r26, r26
    1c5e:	28 30       	cpi	r18, 0x08	; 8
    1c60:	51 f1       	breq	.+84     	; 0x1cb6 <__ultoa_invert+0x5c>
    1c62:	20 31       	cpi	r18, 0x10	; 16
    1c64:	81 f1       	breq	.+96     	; 0x1cc6 <__ultoa_invert+0x6c>
    1c66:	e8 94       	clt
    1c68:	6f 93       	push	r22
    1c6a:	6e 7f       	andi	r22, 0xFE	; 254
    1c6c:	6e 5f       	subi	r22, 0xFE	; 254
    1c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c70:	8f 4f       	sbci	r24, 0xFF	; 255
    1c72:	9f 4f       	sbci	r25, 0xFF	; 255
    1c74:	af 4f       	sbci	r26, 0xFF	; 255
    1c76:	b1 e0       	ldi	r27, 0x01	; 1
    1c78:	3e d0       	rcall	.+124    	; 0x1cf6 <__ultoa_invert+0x9c>
    1c7a:	b4 e0       	ldi	r27, 0x04	; 4
    1c7c:	3c d0       	rcall	.+120    	; 0x1cf6 <__ultoa_invert+0x9c>
    1c7e:	67 0f       	add	r22, r23
    1c80:	78 1f       	adc	r23, r24
    1c82:	89 1f       	adc	r24, r25
    1c84:	9a 1f       	adc	r25, r26
    1c86:	a1 1d       	adc	r26, r1
    1c88:	68 0f       	add	r22, r24
    1c8a:	79 1f       	adc	r23, r25
    1c8c:	8a 1f       	adc	r24, r26
    1c8e:	91 1d       	adc	r25, r1
    1c90:	a1 1d       	adc	r26, r1
    1c92:	6a 0f       	add	r22, r26
    1c94:	71 1d       	adc	r23, r1
    1c96:	81 1d       	adc	r24, r1
    1c98:	91 1d       	adc	r25, r1
    1c9a:	a1 1d       	adc	r26, r1
    1c9c:	20 d0       	rcall	.+64     	; 0x1cde <__ultoa_invert+0x84>
    1c9e:	09 f4       	brne	.+2      	; 0x1ca2 <__ultoa_invert+0x48>
    1ca0:	68 94       	set
    1ca2:	3f 91       	pop	r19
    1ca4:	2a e0       	ldi	r18, 0x0A	; 10
    1ca6:	26 9f       	mul	r18, r22
    1ca8:	11 24       	eor	r1, r1
    1caa:	30 19       	sub	r19, r0
    1cac:	30 5d       	subi	r19, 0xD0	; 208
    1cae:	31 93       	st	Z+, r19
    1cb0:	de f6       	brtc	.-74     	; 0x1c68 <__ultoa_invert+0xe>
    1cb2:	cf 01       	movw	r24, r30
    1cb4:	08 95       	ret
    1cb6:	46 2f       	mov	r20, r22
    1cb8:	47 70       	andi	r20, 0x07	; 7
    1cba:	40 5d       	subi	r20, 0xD0	; 208
    1cbc:	41 93       	st	Z+, r20
    1cbe:	b3 e0       	ldi	r27, 0x03	; 3
    1cc0:	0f d0       	rcall	.+30     	; 0x1ce0 <__ultoa_invert+0x86>
    1cc2:	c9 f7       	brne	.-14     	; 0x1cb6 <__ultoa_invert+0x5c>
    1cc4:	f6 cf       	rjmp	.-20     	; 0x1cb2 <__ultoa_invert+0x58>
    1cc6:	46 2f       	mov	r20, r22
    1cc8:	4f 70       	andi	r20, 0x0F	; 15
    1cca:	40 5d       	subi	r20, 0xD0	; 208
    1ccc:	4a 33       	cpi	r20, 0x3A	; 58
    1cce:	18 f0       	brcs	.+6      	; 0x1cd6 <__ultoa_invert+0x7c>
    1cd0:	49 5d       	subi	r20, 0xD9	; 217
    1cd2:	31 fd       	sbrc	r19, 1
    1cd4:	40 52       	subi	r20, 0x20	; 32
    1cd6:	41 93       	st	Z+, r20
    1cd8:	02 d0       	rcall	.+4      	; 0x1cde <__ultoa_invert+0x84>
    1cda:	a9 f7       	brne	.-22     	; 0x1cc6 <__ultoa_invert+0x6c>
    1cdc:	ea cf       	rjmp	.-44     	; 0x1cb2 <__ultoa_invert+0x58>
    1cde:	b4 e0       	ldi	r27, 0x04	; 4
    1ce0:	a6 95       	lsr	r26
    1ce2:	97 95       	ror	r25
    1ce4:	87 95       	ror	r24
    1ce6:	77 95       	ror	r23
    1ce8:	67 95       	ror	r22
    1cea:	ba 95       	dec	r27
    1cec:	c9 f7       	brne	.-14     	; 0x1ce0 <__ultoa_invert+0x86>
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	61 05       	cpc	r22, r1
    1cf2:	71 05       	cpc	r23, r1
    1cf4:	08 95       	ret
    1cf6:	9b 01       	movw	r18, r22
    1cf8:	ac 01       	movw	r20, r24
    1cfa:	0a 2e       	mov	r0, r26
    1cfc:	06 94       	lsr	r0
    1cfe:	57 95       	ror	r21
    1d00:	47 95       	ror	r20
    1d02:	37 95       	ror	r19
    1d04:	27 95       	ror	r18
    1d06:	ba 95       	dec	r27
    1d08:	c9 f7       	brne	.-14     	; 0x1cfc <__ultoa_invert+0xa2>
    1d0a:	62 0f       	add	r22, r18
    1d0c:	73 1f       	adc	r23, r19
    1d0e:	84 1f       	adc	r24, r20
    1d10:	95 1f       	adc	r25, r21
    1d12:	a0 1d       	adc	r26, r0
    1d14:	08 95       	ret

00001d16 <_exit>:
    1d16:	f8 94       	cli

00001d18 <__stop_program>:
    1d18:	ff cf       	rjmp	.-2      	; 0x1d18 <__stop_program>
