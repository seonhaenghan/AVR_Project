
BUTTON_TOGGLE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  0000043c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e42  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096b  00000000  00000000  0000135e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b8  00000000  00000000  00001cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00002384  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cf  00000000  00000000  0000242c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004bc  00000000  00000000  000028fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002db7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a9 30       	cpi	r26, 0x09	; 9
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	85 d1       	rcall	.+778    	; 0x3b4 <main>
  aa:	8c c1       	rjmp	.+792    	; 0x3c4 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <init_BUTTON>:
int get_BUTTON2();
void init_BUTTON();

void init_BUTTON()
{
	BUTTON_DDR &= ~((1 << BUTTON1) | (1 << BUTTON2) | (1 << BUTTON3) | (1 << BUTTON4));
  ae:	81 b3       	in	r24, 0x11	; 17
  b0:	8f 70       	andi	r24, 0x0F	; 15
  b2:	81 bb       	out	0x11, r24	; 17
  b4:	08 95       	ret

000000b6 <get_BUTTON1>:
{
	 
	static uint8_t prev_state1 = 0; // 버튼의 상태 0: OFF , 1 : ON / 함수 실행 후에도 값이 변하지 않음
	uint8_t current_state; // unsigned char와 동일함 == unsigned int 8bit  // unsigned char current_state 
	
	current_state = BUTTON_PIN & (1 << BUTTON1); // Button1의 값을 읽는다. , 읽었을 때 (0x10)
  b6:	80 b3       	in	r24, 0x10	; 16
  b8:	80 71       	andi	r24, 0x10	; 16
	
	if(prev_state1 == 0 && current_state != 0) // 버튼이 처음 눌려진 상태 	
  ba:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <prev_state1.1735>
  be:	91 11       	cpse	r25, r1
  c0:	11 c0       	rjmp	.+34     	; 0xe4 <get_BUTTON1+0x2e>
  c2:	88 23       	and	r24, r24
  c4:	79 f0       	breq	.+30     	; 0xe4 <get_BUTTON1+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	8d ee       	ldi	r24, 0xED	; 237
  ca:	92 e0       	ldi	r25, 0x02	; 2
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <get_BUTTON1+0x16>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <get_BUTTON1+0x20>
  d6:	00 00       	nop
	{
		_delay_ms(60);	// 노이즈가 지나가기를 기다림
		prev_state1 = 1; // 처음 눌러진 상태가 아니다. 
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <prev_state1.1735>
		return 0;		// 아직은 진짜로 눌러진 상태가 아니라 0을 return 
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	08 95       	ret
		
	}
	else if(prev_state1 == 1 && current_state == 0) // 버튼이 눌렸다 떼어진 상태 
  e4:	91 30       	cpi	r25, 0x01	; 1
  e6:	81 f4       	brne	.+32     	; 0x108 <get_BUTTON1+0x52>
  e8:	81 11       	cpse	r24, r1
  ea:	11 c0       	rjmp	.+34     	; 0x10e <get_BUTTON1+0x58>
	{
		prev_state1 = 0; 
  ec:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <prev_state1.1735>
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	86 e7       	ldi	r24, 0x76	; 118
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <get_BUTTON1+0x40>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <get_BUTTON1+0x4a>
 100:	00 00       	nop
		_delay_ms(30);	// 노이즈가 지나가기를 기다림
		return 1; // 완전히 눌렸다 떼어진 상태로 인정
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	08 95       	ret
	}
	return 0; // 아직 완전히 sw 을 눌렀다 떼어지지 않은 상태
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	08 95       	ret
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
}
 112:	08 95       	ret

00000114 <get_BUTTON2>:
{
	 
	static uint8_t prev_state2 = 0;
	uint8_t current_state; // unsigned char와 동일함 == unsigned int 8bit  // unsigned char current_state
	
	current_state = BUTTON_PIN & (1 << BUTTON2); // Button1의 값을 읽는다. , 읽었을 때 (0x10)
 114:	80 b3       	in	r24, 0x10	; 16
 116:	80 72       	andi	r24, 0x20	; 32
	
	if(prev_state2 == 0 && current_state != 0) // 버튼이 처음 눌려진 상태
 118:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <prev_state2.1739>
 11c:	91 11       	cpse	r25, r1
 11e:	11 c0       	rjmp	.+34     	; 0x142 <get_BUTTON2+0x2e>
 120:	88 23       	and	r24, r24
 122:	79 f0       	breq	.+30     	; 0x142 <get_BUTTON2+0x2e>
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	8d ee       	ldi	r24, 0xED	; 237
 128:	92 e0       	ldi	r25, 0x02	; 2
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <get_BUTTON2+0x16>
 132:	00 c0       	rjmp	.+0      	; 0x134 <get_BUTTON2+0x20>
 134:	00 00       	nop
	{
		_delay_ms(60);	// 노이즈가 지나가기를 기다림
		prev_state2 = 1; // 처음 눌러진 상태가 아니다.
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <prev_state2.1739>
		return 0;		// 아직은 진짜로 눌러진 상태가 아니라 0을 return
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	08 95       	ret
		
	}
	else if(prev_state2 == 1 && current_state == 0) // 버튼이 눌렸다 떼어진 상태
 142:	91 30       	cpi	r25, 0x01	; 1
 144:	81 f4       	brne	.+32     	; 0x166 <get_BUTTON2+0x52>
 146:	81 11       	cpse	r24, r1
 148:	11 c0       	rjmp	.+34     	; 0x16c <get_BUTTON2+0x58>
	{
		prev_state2 = 0;
 14a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <prev_state2.1739>
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	86 e7       	ldi	r24, 0x76	; 118
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <get_BUTTON2+0x40>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <get_BUTTON2+0x4a>
 15e:	00 00       	nop
		_delay_ms(30);	// 노이즈가 지나가기를 기다림
		return 1; // 완전히 눌렸다 떼어진 상태로 인정
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	08 95       	ret
	}
	return 0; // 아직 완전히 sw 을 눌렀다 떼어지지 않은 상태
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	08 95       	ret
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
}
 170:	08 95       	ret

00000172 <get_BUTTON3>:
{
	
	static uint8_t prev_state3 = 0;
	uint8_t current_state; // unsigned char와 동일함 == unsigned int 8bit  // unsigned char current_state
	
	current_state = BUTTON_PIN & (1 << BUTTON3); // Button1의 값을 읽는다. , 읽었을 때 (0x10)
 172:	80 b3       	in	r24, 0x10	; 16
 174:	80 74       	andi	r24, 0x40	; 64
	
	if(prev_state3 == 0 && current_state != 0) // 버튼이 처음 눌려진 상태
 176:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17a:	91 11       	cpse	r25, r1
 17c:	11 c0       	rjmp	.+34     	; 0x1a0 <get_BUTTON3+0x2e>
 17e:	88 23       	and	r24, r24
 180:	79 f0       	breq	.+30     	; 0x1a0 <get_BUTTON3+0x2e>
 182:	2f ef       	ldi	r18, 0xFF	; 255
 184:	8d ee       	ldi	r24, 0xED	; 237
 186:	92 e0       	ldi	r25, 0x02	; 2
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <get_BUTTON3+0x16>
 190:	00 c0       	rjmp	.+0      	; 0x192 <get_BUTTON3+0x20>
 192:	00 00       	nop
	{
		_delay_ms(60);	// 노이즈가 지나가기를 기다림
		prev_state3 = 1; // 처음 눌러진 상태가 아니다.
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		return 0;		// 아직은 진짜로 눌러진 상태가 아니라 0을 return
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	08 95       	ret
		
	}
	else if(prev_state3 == 1 && current_state == 0) // 버튼이 눌렸다 떼어진 상태
 1a0:	91 30       	cpi	r25, 0x01	; 1
 1a2:	81 f4       	brne	.+32     	; 0x1c4 <get_BUTTON3+0x52>
 1a4:	81 11       	cpse	r24, r1
 1a6:	11 c0       	rjmp	.+34     	; 0x1ca <get_BUTTON3+0x58>
	{
		prev_state3 = 0;
 1a8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	86 e7       	ldi	r24, 0x76	; 118
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <get_BUTTON3+0x40>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <get_BUTTON3+0x4a>
 1bc:	00 00       	nop
		_delay_ms(30);	// 노이즈가 지나가기를 기다림
		return 1; // 완전히 눌렸다 떼어진 상태로 인정
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	08 95       	ret
	}
	return 0; // 아직 완전히 sw 을 눌렀다 떼어지지 않은 상태
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	08 95       	ret
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
}
 1ce:	08 95       	ret

000001d0 <button1_play>:

void button1_play()
{


		if(get_BUTTON1()) // 버튼을 1번 눌렀다 떼면
 1d0:	72 df       	rcall	.-284    	; 0xb6 <get_BUTTON1>
 1d2:	89 2b       	or	r24, r25
 1d4:	09 f4       	brne	.+2      	; 0x1d8 <button1_play+0x8>
 1d6:	43 c0       	rjmp	.+134    	; 0x25e <button1_play+0x8e>
		{
			BUTTON1_state = !BUTTON1_state;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <BUTTON1_state>
 1e0:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <BUTTON1_state+0x1>
 1e4:	23 2b       	or	r18, r19
 1e6:	11 f0       	breq	.+4      	; 0x1ec <button1_play+0x1c>
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <BUTTON1_state+0x1>
 1f0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <BUTTON1_state>
			// if(BUTTON1_state ==0)
			//    BUTTON1_state = 1;    logic이 동일함
			// else BUTTON1_state = 0;
			if(BUTTON1_state)	// if(BUTTON1_state >= 1)
 1f4:	89 2b       	or	r24, r25
 1f6:	b9 f4       	brne	.+46     	; 0x226 <button1_play+0x56>
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	2d c0       	rjmp	.+90     	; 0x258 <button1_play+0x88>
			{
				
				for(int i = 0; i < 8; i++)
				{
					LED_PORT = 0x01 << i;
 1fe:	21 e0       	ldi	r18, 0x01	; 1
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	08 2e       	mov	r0, r24
 204:	02 c0       	rjmp	.+4      	; 0x20a <button1_play+0x3a>
 206:	22 0f       	add	r18, r18
 208:	33 1f       	adc	r19, r19
 20a:	0a 94       	dec	r0
 20c:	e2 f7       	brpl	.-8      	; 0x206 <button1_play+0x36>
 20e:	2b bb       	out	0x1b, r18	; 27
 210:	2f ef       	ldi	r18, 0xFF	; 255
 212:	31 ee       	ldi	r19, 0xE1	; 225
 214:	44 e0       	ldi	r20, 0x04	; 4
 216:	21 50       	subi	r18, 0x01	; 1
 218:	30 40       	sbci	r19, 0x00	; 0
 21a:	40 40       	sbci	r20, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <button1_play+0x46>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <button1_play+0x50>
 220:	00 00       	nop
			//    BUTTON1_state = 1;    logic이 동일함
			// else BUTTON1_state = 0;
			if(BUTTON1_state)	// if(BUTTON1_state >= 1)
			{
				
				for(int i = 0; i < 8; i++)
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	02 c0       	rjmp	.+4      	; 0x22a <button1_play+0x5a>
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	88 30       	cpi	r24, 0x08	; 8
 22c:	91 05       	cpc	r25, r1
 22e:	3c f3       	brlt	.-50     	; 0x1fe <button1_play+0x2e>
 230:	08 95       	ret
			else
			{
				
				for(int i = 0; i < 8; i++)
				{
					LED_PORT = 0x80 >> i;
 232:	20 e8       	ldi	r18, 0x80	; 128
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	08 2e       	mov	r0, r24
 238:	02 c0       	rjmp	.+4      	; 0x23e <button1_play+0x6e>
 23a:	35 95       	asr	r19
 23c:	27 95       	ror	r18
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <button1_play+0x6a>
 242:	2b bb       	out	0x1b, r18	; 27
 244:	2f ef       	ldi	r18, 0xFF	; 255
 246:	31 ee       	ldi	r19, 0xE1	; 225
 248:	44 e0       	ldi	r20, 0x04	; 4
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	30 40       	sbci	r19, 0x00	; 0
 24e:	40 40       	sbci	r20, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <button1_play+0x7a>
 252:	00 c0       	rjmp	.+0      	; 0x254 <button1_play+0x84>
 254:	00 00       	nop
				//BUTTON1_state = !BUTTON1_state;
			}
			else
			{
				
				for(int i = 0; i < 8; i++)
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	88 30       	cpi	r24, 0x08	; 8
 25a:	91 05       	cpc	r25, r1
 25c:	54 f3       	brlt	.-44     	; 0x232 <button1_play+0x62>
 25e:	08 95       	ret

00000260 <button2_play>:
}


void button2_play()
{
		if(get_BUTTON2()) // 버튼을 1번 눌렀다 떼면
 260:	59 df       	rcall	.-334    	; 0x114 <get_BUTTON2>
 262:	89 2b       	or	r24, r25
 264:	09 f4       	brne	.+2      	; 0x268 <button2_play+0x8>
 266:	47 c0       	rjmp	.+142    	; 0x2f6 <button2_play+0x96>
		{
			BUTTON2_state = !BUTTON2_state;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <BUTTON2_state>
 270:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <BUTTON2_state+0x1>
 274:	23 2b       	or	r18, r19
 276:	11 f0       	breq	.+4      	; 0x27c <button2_play+0x1c>
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <BUTTON2_state+0x1>
 280:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <BUTTON2_state>
			// if(BUTTON1_state ==0)
			//    BUTTON1_state = 1;    logic이 동일함
			// else BUTTON1_state = 0;
			if(BUTTON2_state)	// if(BUTTON1_state >= 1)
 284:	89 2b       	or	r24, r25
 286:	d1 f4       	brne	.+52     	; 0x2bc <button2_play+0x5c>
 288:	88 e0       	ldi	r24, 0x08	; 8
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	32 c0       	rjmp	.+100    	; 0x2f2 <button2_play+0x92>
			{
				
				for(int i = 8; i >= 0 ; i--)
				{
					LED_PORT = 0xff >> i;
 28e:	2f ef       	ldi	r18, 0xFF	; 255
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	08 2e       	mov	r0, r24
 294:	02 c0       	rjmp	.+4      	; 0x29a <button2_play+0x3a>
 296:	35 95       	asr	r19
 298:	27 95       	ror	r18
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <button2_play+0x36>
 29e:	2b bb       	out	0x1b, r18	; 27
 2a0:	2f ef       	ldi	r18, 0xFF	; 255
 2a2:	31 ee       	ldi	r19, 0xE1	; 225
 2a4:	44 e0       	ldi	r20, 0x04	; 4
 2a6:	21 50       	subi	r18, 0x01	; 1
 2a8:	30 40       	sbci	r19, 0x00	; 0
 2aa:	40 40       	sbci	r20, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <button2_play+0x46>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <button2_play+0x50>
 2b0:	00 00       	nop
					_delay_ms(100);
					if(!i)
 2b2:	00 97       	sbiw	r24, 0x00	; 0
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <button2_play+0x58>
					LED_PORT = 0x00;
 2b6:	1b ba       	out	0x1b, r1	; 27
			//    BUTTON1_state = 1;    logic이 동일함
			// else BUTTON1_state = 0;
			if(BUTTON2_state)	// if(BUTTON1_state >= 1)
			{
				
				for(int i = 8; i >= 0 ; i--)
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <button2_play+0x60>
 2bc:	88 e0       	ldi	r24, 0x08	; 8
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	99 23       	and	r25, r25
 2c2:	2c f7       	brge	.-54     	; 0x28e <button2_play+0x2e>
 2c4:	08 95       	ret
			{
				
				for(int i = 8; i >= 0; i--)
				{
					
					LED_PORT = 0xff << i;
 2c6:	2f ef       	ldi	r18, 0xFF	; 255
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	08 2e       	mov	r0, r24
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <button2_play+0x72>
 2ce:	22 0f       	add	r18, r18
 2d0:	33 1f       	adc	r19, r19
 2d2:	0a 94       	dec	r0
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <button2_play+0x6e>
 2d6:	2b bb       	out	0x1b, r18	; 27
 2d8:	2f ef       	ldi	r18, 0xFF	; 255
 2da:	31 ee       	ldi	r19, 0xE1	; 225
 2dc:	44 e0       	ldi	r20, 0x04	; 4
 2de:	21 50       	subi	r18, 0x01	; 1
 2e0:	30 40       	sbci	r19, 0x00	; 0
 2e2:	40 40       	sbci	r20, 0x00	; 0
 2e4:	e1 f7       	brne	.-8      	; 0x2de <button2_play+0x7e>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <button2_play+0x88>
 2e8:	00 00       	nop
					_delay_ms(100);
					if(!i)
 2ea:	00 97       	sbiw	r24, 0x00	; 0
 2ec:	09 f4       	brne	.+2      	; 0x2f0 <button2_play+0x90>
					LED_PORT = 0x00;
 2ee:	1b ba       	out	0x1b, r1	; 27
				}
			}
			else
			{
				
				for(int i = 8; i >= 0; i--)
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	99 23       	and	r25, r25
 2f4:	44 f7       	brge	.-48     	; 0x2c6 <button2_play+0x66>
 2f6:	08 95       	ret

000002f8 <button3_play>:
void button3_play()
{

	
		
		if(get_BUTTON3()) // 버튼을 1번 눌렀다 떼면
 2f8:	3c df       	rcall	.-392    	; 0x172 <get_BUTTON3>
 2fa:	89 2b       	or	r24, r25
 2fc:	09 f4       	brne	.+2      	; 0x300 <button3_play+0x8>
 2fe:	59 c0       	rjmp	.+178    	; 0x3b2 <button3_play+0xba>
		{
			BUTTON3_state = !BUTTON3_state;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <BUTTON3_state>
 308:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <BUTTON3_state+0x1>
 30c:	23 2b       	or	r18, r19
 30e:	11 f0       	breq	.+4      	; 0x314 <button3_play+0x1c>
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <BUTTON3_state+0x1>
 318:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <BUTTON3_state>
			
			if(BUTTON3_state)
 31c:	89 2b       	or	r24, r25
 31e:	11 f5       	brne	.+68     	; 0x364 <button3_play+0x6c>
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	43 c0       	rjmp	.+134    	; 0x3ac <button3_play+0xb4>
			{
				int h,l;
				for(int i = 0; i < 4; i++)
				{
					h = 0x80 >> i;
 326:	80 e8       	ldi	r24, 0x80	; 128
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	ac 01       	movw	r20, r24
 32c:	02 2e       	mov	r0, r18
 32e:	02 c0       	rjmp	.+4      	; 0x334 <button3_play+0x3c>
 330:	55 95       	asr	r21
 332:	47 95       	ror	r20
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <button3_play+0x38>
					l = 0x01 << i;
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 2e       	mov	r0, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <button3_play+0x4c>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	0a 94       	dec	r0
 346:	e2 f7       	brpl	.-8      	; 0x340 <button3_play+0x48>
					LED_PORT = h | l ;
 348:	84 2b       	or	r24, r20
 34a:	8b bb       	out	0x1b, r24	; 27
 34c:	4f ef       	ldi	r20, 0xFF	; 255
 34e:	83 ed       	ldi	r24, 0xD3	; 211
 350:	90 e3       	ldi	r25, 0x30	; 48
 352:	41 50       	subi	r20, 0x01	; 1
 354:	80 40       	sbci	r24, 0x00	; 0
 356:	90 40       	sbci	r25, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <button3_play+0x5a>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <button3_play+0x64>
 35c:	00 00       	nop
			BUTTON3_state = !BUTTON3_state;
			
			if(BUTTON3_state)
			{
				int h,l;
				for(int i = 0; i < 4; i++)
 35e:	2f 5f       	subi	r18, 0xFF	; 255
 360:	3f 4f       	sbci	r19, 0xFF	; 255
 362:	02 c0       	rjmp	.+4      	; 0x368 <button3_play+0x70>
 364:	20 e0       	ldi	r18, 0x00	; 0
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	24 30       	cpi	r18, 0x04	; 4
 36a:	31 05       	cpc	r19, r1
 36c:	e4 f2       	brlt	.-72     	; 0x326 <button3_play+0x2e>
 36e:	08 95       	ret
			{
				
				int h2,l2;
				for(int i = 0; i < 4; i++)
				{
					h2 = 0x10 << i;
 370:	80 e1       	ldi	r24, 0x10	; 16
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	ac 01       	movw	r20, r24
 376:	02 2e       	mov	r0, r18
 378:	02 c0       	rjmp	.+4      	; 0x37e <button3_play+0x86>
 37a:	44 0f       	add	r20, r20
 37c:	55 1f       	adc	r21, r21
 37e:	0a 94       	dec	r0
 380:	e2 f7       	brpl	.-8      	; 0x37a <button3_play+0x82>
					l2 = 0x08 >> i;
 382:	88 e0       	ldi	r24, 0x08	; 8
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 2e       	mov	r0, r18
 388:	02 c0       	rjmp	.+4      	; 0x38e <button3_play+0x96>
 38a:	95 95       	asr	r25
 38c:	87 95       	ror	r24
 38e:	0a 94       	dec	r0
 390:	e2 f7       	brpl	.-8      	; 0x38a <button3_play+0x92>
					LED_PORT = h2 | l2 ;
 392:	84 2b       	or	r24, r20
 394:	8b bb       	out	0x1b, r24	; 27
 396:	4f ef       	ldi	r20, 0xFF	; 255
 398:	83 ed       	ldi	r24, 0xD3	; 211
 39a:	90 e3       	ldi	r25, 0x30	; 48
 39c:	41 50       	subi	r20, 0x01	; 1
 39e:	80 40       	sbci	r24, 0x00	; 0
 3a0:	90 40       	sbci	r25, 0x00	; 0
 3a2:	e1 f7       	brne	.-8      	; 0x39c <button3_play+0xa4>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <button3_play+0xae>
 3a6:	00 00       	nop
			}
			else
			{
				
				int h2,l2;
				for(int i = 0; i < 4; i++)
 3a8:	2f 5f       	subi	r18, 0xFF	; 255
 3aa:	3f 4f       	sbci	r19, 0xFF	; 255
 3ac:	24 30       	cpi	r18, 0x04	; 4
 3ae:	31 05       	cpc	r19, r1
 3b0:	fc f2       	brlt	.-66     	; 0x370 <button3_play+0x78>
 3b2:	08 95       	ret

000003b4 <main>:
int BUTTON3_state = 0;


int main(void)
{
	LED_DDR = 0xff;		//DDRA = 0xff; LED 출력 모드 이기 때문에 1로
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	8a bb       	out	0x1a, r24	; 26
	LED_PORT = 0x00;	//LED port all off
 3b8:	1b ba       	out	0x1b, r1	; 27
	
	init_BUTTON();
 3ba:	79 de       	rcall	.-782    	; 0xae <init_BUTTON>

	
	
	while (1)
	{
	button1_play();
 3bc:	09 df       	rcall	.-494    	; 0x1d0 <button1_play>
	button2_play();	
 3be:	50 df       	rcall	.-352    	; 0x260 <button2_play>
 3c0:	9b df       	rcall	.-202    	; 0x2f8 <button3_play>
	button3_play();	
 3c2:	fc cf       	rjmp	.-8      	; 0x3bc <main+0x8>

000003c4 <_exit>:
 3c4:	f8 94       	cli

000003c6 <__stop_program>:
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <__stop_program>
