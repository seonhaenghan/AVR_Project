
07.make_sw_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000926  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000848  00000000  00000000  00000b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f5  00000000  00000000  00001352  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001648  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000426  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b2  00000000  00000000  00001aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	16 d0       	rcall	.+44     	; 0xc6 <main>
  9a:	2b c0       	rjmp	.+86     	; 0xf2 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <led_on_pwm>:
    }
}

void led_on_pwm(dim)
{ 
	PORTA = 0xff; 
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	2b bb       	out	0x1b, r18	; 27
	
	for (int i = 0; i < 256; i++)
  a2:	20 e0       	ldi	r18, 0x00	; 0
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	0a c0       	rjmp	.+20     	; 0xbc <led_on_pwm+0x1e>
	{
		if(i > dim)
  a8:	82 17       	cp	r24, r18
  aa:	93 07       	cpc	r25, r19
  ac:	0c f4       	brge	.+2      	; 0xb0 <led_on_pwm+0x12>
			PORTA = 0x00;	// duty cycle이 넘어 가면 led off 
  ae:	1b ba       	out	0x1b, r1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	4a e6       	ldi	r20, 0x6A	; 106
  b2:	4a 95       	dec	r20
  b4:	f1 f7       	brne	.-4      	; 0xb2 <led_on_pwm+0x14>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <led_on_pwm+0x1a>

void led_on_pwm(dim)
{ 
	PORTA = 0xff; 
	
	for (int i = 0; i < 256; i++)
  b8:	2f 5f       	subi	r18, 0xFF	; 255
  ba:	3f 4f       	sbci	r19, 0xFF	; 255
  bc:	2f 3f       	cpi	r18, 0xFF	; 255
  be:	31 05       	cpc	r19, r1
  c0:	99 f3       	breq	.-26     	; 0xa8 <led_on_pwm+0xa>
  c2:	94 f3       	brlt	.-28     	; 0xa8 <led_on_pwm+0xa>
		if(i > dim)
			PORTA = 0x00;	// duty cycle이 넘어 가면 led off 
		_delay_us(20); 
		
	} 
  c4:	08 95       	ret

000000c6 <main>:
int main(void)
{
	int  dim = 0;	   // LED 밝기 조절
	int direction = 1; // 밝기 증가 (1) 감소 (-1)
	
	DDRA = 0xff;	// PORTA OUTPUT MODE
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xff;   // led all on
  ca:	8b bb       	out	0x1b, r24	; 27


int main(void)
{
	int  dim = 0;	   // LED 밝기 조절
	int direction = 1; // 밝기 증가 (1) 감소 (-1)
  cc:	01 e0       	ldi	r16, 0x01	; 1
  ce:	10 e0       	ldi	r17, 0x00	; 0
#include <string.h> // strcpy, strcat, strcmp 등이 들어 있음


int main(void)
{
	int  dim = 0;	   // LED 밝기 조절
  d0:	c0 e0       	ldi	r28, 0x00	; 0
  d2:	d0 e0       	ldi	r29, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <main+0x14>
    while (1) 
    {
		led_on_pwm(dim); 
		dim += direction; // 밝기 조절
		if(dim == 0) direction = 1; 
		if(dim == 255 ) direction = -1;  			
  d6:	0f ef       	ldi	r16, 0xFF	; 255
  d8:	1f ef       	ldi	r17, 0xFF	; 255
	PORTA = 0xff;   // led all on
					// d >> b  b >> d 
	// us 단위로 led switching을 해야 빛이 유지되는 것 처럼 보임 
    while (1) 
    {
		led_on_pwm(dim); 
  da:	ce 01       	movw	r24, r28
  dc:	e0 df       	rcall	.-64     	; 0x9e <led_on_pwm>
		dim += direction; // 밝기 조절
  de:	c0 0f       	add	r28, r16
  e0:	d1 1f       	adc	r29, r17
		if(dim == 0) direction = 1; 
  e2:	20 97       	sbiw	r28, 0x00	; 0
  e4:	11 f4       	brne	.+4      	; 0xea <main+0x24>
  e6:	01 e0       	ldi	r16, 0x01	; 1
  e8:	10 e0       	ldi	r17, 0x00	; 0
		if(dim == 255 ) direction = -1;  			
  ea:	cf 3f       	cpi	r28, 0xFF	; 255
  ec:	d1 05       	cpc	r29, r1
  ee:	a9 f7       	brne	.-22     	; 0xda <main+0x14>
  f0:	f2 cf       	rjmp	.-28     	; 0xd6 <main+0x10>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
