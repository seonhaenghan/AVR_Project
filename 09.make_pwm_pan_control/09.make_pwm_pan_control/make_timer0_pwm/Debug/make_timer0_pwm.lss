
make_timer0_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  000003b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bdf  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091f  00000000  00000000  00001077  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d9  00000000  00000000  00001996  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001f70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c4  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000034d  00000000  00000000  00002500  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000284d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	c7 c0       	rjmp	.+398    	; 0x1d0 <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 30       	cpi	r26, 0x05	; 5
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	cc d0       	rcall	.+408    	; 0x242 <main>
  aa:	46 c1       	rjmp	.+652    	; 0x338 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <init_BUTTON>:
int get_BUTTON3();
void init_BUTTON();

void init_BUTTON()
{
	BUTTON_DDR &= ~((1 << BUTTON1) | (1 << BUTTON2) | (1 << BUTTON3) | (1 << BUTTON4));
  ae:	81 b3       	in	r24, 0x11	; 17
  b0:	8f 70       	andi	r24, 0x0F	; 15
  b2:	81 bb       	out	0x11, r24	; 17
  b4:	08 95       	ret

000000b6 <get_BUTTON1>:
{
	 
	static uint8_t prev_state = 0; // 버튼의 상태 0: OFF , 1 : ON / 함수 실행 후에도 값이 변하지 않음
	uint8_t current_state; // unsigned char와 동일함 == unsigned int 8bit  // unsigned char current_state 
	
	current_state = BUTTON_PIN & (1 << BUTTON1); // Button1의 값을 읽는다. , 읽었을 때 (0x10)
  b6:	80 b3       	in	r24, 0x10	; 16
  b8:	80 71       	andi	r24, 0x10	; 16
	
	if(prev_state == 0 && current_state != 0) // 버튼이 처음 눌려진 상태 	
  ba:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <prev_state.1736>
  be:	91 11       	cpse	r25, r1
  c0:	11 c0       	rjmp	.+34     	; 0xe4 <get_BUTTON1+0x2e>
  c2:	88 23       	and	r24, r24
  c4:	79 f0       	breq	.+30     	; 0xe4 <get_BUTTON1+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	8d ee       	ldi	r24, 0xED	; 237
  ca:	92 e0       	ldi	r25, 0x02	; 2
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <get_BUTTON1+0x16>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <get_BUTTON1+0x20>
  d6:	00 00       	nop
	{
		_delay_ms(60);	// 노이즈가 지나가기를 기다림
		prev_state = 1; // 처음 눌러진 상태가 아니다. 
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <prev_state.1736>
		return 0;		// 아직은 진짜로 눌러진 상태가 아니라 0을 return 
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	08 95       	ret
		
	}
	else if(prev_state == 1 && current_state == 0) // 버튼이 눌렸다 떼어진 상태 
  e4:	91 30       	cpi	r25, 0x01	; 1
  e6:	81 f4       	brne	.+32     	; 0x108 <get_BUTTON1+0x52>
  e8:	81 11       	cpse	r24, r1
  ea:	11 c0       	rjmp	.+34     	; 0x10e <get_BUTTON1+0x58>
	{
		prev_state = 0; 
  ec:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <prev_state.1736>
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	86 e7       	ldi	r24, 0x76	; 118
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <get_BUTTON1+0x40>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <get_BUTTON1+0x4a>
 100:	00 00       	nop
		_delay_ms(30);	// 노이즈가 지나가기를 기다림
		return 1; // 완전히 눌렸다 떼어진 상태로 인정
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	08 95       	ret
	}
	return 0; // 아직 완전히 sw 을 눌렀다 떼어지지 않은 상태
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	08 95       	ret
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
}
 112:	08 95       	ret

00000114 <get_BUTTON2>:
{
	 
	static uint8_t prev_state = 0;
	uint8_t current_state; // unsigned char와 동일함 == unsigned int 8bit  // unsigned char current_state
	
	current_state = BUTTON_PIN & (1 << BUTTON2); // Button1의 값을 읽는다. , 읽었을 때 (0x10)
 114:	80 b3       	in	r24, 0x10	; 16
 116:	80 72       	andi	r24, 0x20	; 32
	
	if(prev_state == 0 && current_state != 0) // 버튼이 처음 눌려진 상태
 118:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <prev_state.1740>
 11c:	91 11       	cpse	r25, r1
 11e:	11 c0       	rjmp	.+34     	; 0x142 <get_BUTTON2+0x2e>
 120:	88 23       	and	r24, r24
 122:	79 f0       	breq	.+30     	; 0x142 <get_BUTTON2+0x2e>
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	8d ee       	ldi	r24, 0xED	; 237
 128:	92 e0       	ldi	r25, 0x02	; 2
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <get_BUTTON2+0x16>
 132:	00 c0       	rjmp	.+0      	; 0x134 <get_BUTTON2+0x20>
 134:	00 00       	nop
	{
		_delay_ms(60);	// 노이즈가 지나가기를 기다림
		prev_state = 1; // 처음 눌러진 상태가 아니다.
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <prev_state.1740>
		return 0;		// 아직은 진짜로 눌러진 상태가 아니라 0을 return
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	08 95       	ret
		
	}
	else if(prev_state == 1 && current_state == 0) // 버튼이 눌렸다 떼어진 상태
 142:	91 30       	cpi	r25, 0x01	; 1
 144:	81 f4       	brne	.+32     	; 0x166 <get_BUTTON2+0x52>
 146:	81 11       	cpse	r24, r1
 148:	11 c0       	rjmp	.+34     	; 0x16c <get_BUTTON2+0x58>
	{
		prev_state = 0;
 14a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <prev_state.1740>
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	86 e7       	ldi	r24, 0x76	; 118
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <get_BUTTON2+0x40>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <get_BUTTON2+0x4a>
 15e:	00 00       	nop
		_delay_ms(30);	// 노이즈가 지나가기를 기다림
		return 1; // 완전히 눌렸다 떼어진 상태로 인정
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	08 95       	ret
	}
	return 0; // 아직 완전히 sw 을 눌렀다 떼어지지 않은 상태
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	08 95       	ret
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
}
 170:	08 95       	ret

00000172 <get_BUTTON3>:
{
	
	static uint8_t prev_state = 0;
	uint8_t current_state; // unsigned char와 동일함 == unsigned int 8bit  // unsigned char current_state
	
	current_state = BUTTON_PIN & (1 << BUTTON3); // Button1의 값을 읽는다. , 읽었을 때 (0x10)
 172:	80 b3       	in	r24, 0x10	; 16
 174:	80 74       	andi	r24, 0x40	; 64
	
	if(prev_state == 0 && current_state != 0) // 버튼이 처음 눌려진 상태
 176:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17a:	91 11       	cpse	r25, r1
 17c:	11 c0       	rjmp	.+34     	; 0x1a0 <get_BUTTON3+0x2e>
 17e:	88 23       	and	r24, r24
 180:	79 f0       	breq	.+30     	; 0x1a0 <get_BUTTON3+0x2e>
 182:	2f ef       	ldi	r18, 0xFF	; 255
 184:	8d ee       	ldi	r24, 0xED	; 237
 186:	92 e0       	ldi	r25, 0x02	; 2
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <get_BUTTON3+0x16>
 190:	00 c0       	rjmp	.+0      	; 0x192 <get_BUTTON3+0x20>
 192:	00 00       	nop
	{
		_delay_ms(60);	// 노이즈가 지나가기를 기다림
		prev_state = 1; // 처음 눌러진 상태가 아니다.
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		return 0;		// 아직은 진짜로 눌러진 상태가 아니라 0을 return
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	08 95       	ret
		
	}
	else if(prev_state == 1 && current_state == 0) // 버튼이 눌렸다 떼어진 상태
 1a0:	91 30       	cpi	r25, 0x01	; 1
 1a2:	81 f4       	brne	.+32     	; 0x1c4 <get_BUTTON3+0x52>
 1a4:	81 11       	cpse	r24, r1
 1a6:	11 c0       	rjmp	.+34     	; 0x1ca <get_BUTTON3+0x58>
	{
		prev_state = 0;
 1a8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	86 e7       	ldi	r24, 0x76	; 118
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <get_BUTTON3+0x40>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <get_BUTTON3+0x4a>
 1bc:	00 00       	nop
		_delay_ms(30);	// 노이즈가 지나가기를 기다림
		return 1; // 완전히 눌렸다 떼어진 상태로 인정
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	08 95       	ret
	}
	return 0; // 아직 완전히 sw 을 눌렀다 떼어지지 않은 상태
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	08 95       	ret
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
}
 1ce:	08 95       	ret

000001d0 <__vector_16>:
	// 분주비 1024 설정 16000000/1024(분주비) = 15625Hz 
	// t = 1/15625 = 64usec 
	// 8bit Timer/count / 64u * 256 = 16.4ms 마다 Timer0 Overflow interrupt가 발생 
	TCCR0 |= (1 << CS02) | (1 << CS01) | (1 << CS00);
	TIMSK |= (1 << TOIE0); // Timer overflow interrupt enable No.0 활성 
	TCNT0 = 0; // Timer count initial 
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
 1de:	12 be       	out	0x32, r1	; 50
 1e0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tim_16ms>
 1e4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <tim_16ms+0x1>
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <tim_16ms+0x1>
 1ee:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <tim_16ms>
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <init_pwm>:
 BTN3 : Speed-down(OCR3C : 20씩 감소 min 50)
 */

void init_pwm()
{
	DDRE |= (1<<3 ) | (1<<4) | (1<<5); 
 200:	82 b1       	in	r24, 0x02	; 2
 202:	88 63       	ori	r24, 0x38	; 56
 204:	82 b9       	out	0x02, r24	; 2
	// 모드 5 : 8비트 고속 PWM timer3
	TCCR3A |= (1<< WGM30); 
 206:	ab e8       	ldi	r26, 0x8B	; 139
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	8c 91       	ld	r24, X
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	8c 93       	st	X, r24
	TCCR3B |= (1<< WGM32); 
 210:	ea e8       	ldi	r30, 0x8A	; 138
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	88 60       	ori	r24, 0x08	; 8
 218:	80 83       	st	Z, r24
	// 비반전 모드 top : 0xff 비교일치값 OCR3C
	TCCR3A |= (1<< COM3C1); // P344 표 15-4
 21a:	8c 91       	ld	r24, X
 21c:	88 60       	ori	r24, 0x08	; 8
 21e:	8c 93       	st	X, r24
	// 분주비 64: 16000000/64 ==> 250000Hz
	// 256/ 250000hz = 1.02ms
	// 127 / 250000 => 0.5ms 
	TCCR3B |= (1 << CS31) | (1 << CS30); // 분주비 64 
 220:	80 81       	ld	r24, Z
 222:	83 60       	ori	r24, 0x03	; 3
 224:	80 83       	st	Z, r24
	OCR3C = 0; 
 226:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 22a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 22e:	08 95       	ret

00000230 <init_led>:
	
}
void init_led()
{
	DDRF = 0x01;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF = 0x00; 
 236:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	
	DDRA = 0xff;
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00; 
 23e:	1b ba       	out	0x1b, r1	; 27
 240:	08 95       	ret

00000242 <main>:
int main(void)
{
	int fan_mode = 0; // start : 1/ stop : 0 
	
	 
	init_pwm(); 
 242:	de df       	rcall	.-68     	; 0x200 <init_pwm>
	init_BUTTON();
 244:	34 df       	rcall	.-408    	; 0xae <init_BUTTON>
	init_led();
 246:	f4 df       	rcall	.-24     	; 0x230 <init_led>
 248:	08 e0       	ldi	r16, 0x08	; 8
	
	int i = 8;
 24a:	10 e0       	ldi	r17, 0x00	; 0
	PORTA = 0x00; 
}

int main(void)
{
	int fan_mode = 0; // start : 1/ stop : 0 
 24c:	c0 e0       	ldi	r28, 0x00	; 0
 24e:	d0 e0       	ldi	r29, 0x00	; 0
	
	int i = 8;
	
    while (1) 
    {
		if(get_BUTTON1()) // start/ stop
 250:	32 df       	rcall	.-412    	; 0xb6 <get_BUTTON1>
 252:	89 2b       	or	r24, r25
 254:	e9 f0       	breq	.+58     	; 0x290 <main+0x4e>
 256:	cd 2b       	or	r28, r29
		{
			
			if(!fan_mode)		// if(fan_mode == 0)
 258:	71 f4       	brne	.+28     	; 0x276 <main+0x34>
 25a:	86 e4       	ldi	r24, 0x46	; 70
			{
				OCR3C = 70; // 모터 회전 기본값 
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 262:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 266:	e2 e6       	ldi	r30, 0x62	; 98
				PORTF |= 0x01; 
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	81 60       	ori	r24, 0x01	; 1
 26e:	80 83       	st	Z, r24
 270:	c1 e0       	ldi	r28, 0x01	; 1
				fan_mode = 1; // stop 상태에서 회전 모드로 변환 
 272:	d0 e0       	ldi	r29, 0x00	; 0
 274:	ed cf       	rjmp	.-38     	; 0x250 <main+0xe>
 276:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
				
			}
			else // 
			{
				OCR3C = 0;	// 모터 정지 duty = 0 
 27a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 27e:	e2 e6       	ldi	r30, 0x62	; 98
				PORTF &= ~0x01; 
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	8e 7f       	andi	r24, 0xFE	; 254
 286:	80 83       	st	Z, r24
 288:	1b ba       	out	0x1b, r1	; 27
				PORTA = 0x00;
				fan_mode = 0; // 정지 모드 
 28a:	c0 e0       	ldi	r28, 0x00	; 0
 28c:	d0 e0       	ldi	r29, 0x00	; 0
 28e:	e0 cf       	rjmp	.-64     	; 0x250 <main+0xe>
			}
		}
		else if(get_BUTTON2()) // Speed up
 290:	41 df       	rcall	.-382    	; 0x114 <get_BUTTON2>
 292:	89 2b       	or	r24, r25
 294:	31 f1       	breq	.+76     	; 0x2e2 <main+0xa0>
 296:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
		{
			
			if(OCR3C >= 230)
 29a:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 29e:	86 3e       	cpi	r24, 0xE6	; 230
 2a0:	91 05       	cpc	r25, r1
 2a2:	48 f0       	brcs	.+18     	; 0x2b6 <main+0x74>
 2a4:	86 ee       	ldi	r24, 0xE6	; 230
			{
				i = 0;
				OCR3C = 230;
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 2ac:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 2b0:	00 e0       	ldi	r16, 0x00	; 0
		else if(get_BUTTON2()) // Speed up
		{
			
			if(OCR3C >= 230)
			{
				i = 0;
 2b2:	10 e0       	ldi	r17, 0x00	; 0
 2b4:	cd cf       	rjmp	.-102    	; 0x250 <main+0xe>
 2b6:	01 50       	subi	r16, 0x01	; 1
				OCR3C = 230;
				
			}
			else
			{
				i--;
 2b8:	11 09       	sbc	r17, r1
 2ba:	09 30       	cpi	r16, 0x09	; 9
				if(i >= 0 && i < 9)
 2bc:	11 05       	cpc	r17, r1
 2be:	48 f4       	brcc	.+18     	; 0x2d2 <main+0x90>
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
				{
					PORTA = 0xff << i;
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	00 2e       	mov	r0, r16
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <main+0x8a>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	0a 94       	dec	r0
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <main+0x86>
 2d0:	8b bb       	out	0x1b, r24	; 27
 2d2:	e2 e8       	ldi	r30, 0x82	; 130
					
				}
				OCR3C += 20; 	
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	91 81       	ldd	r25, Z+1	; 0x01
 2da:	44 96       	adiw	r24, 0x14	; 20
 2dc:	91 83       	std	Z+1, r25	; 0x01
 2de:	80 83       	st	Z, r24
 2e0:	b7 cf       	rjmp	.-146    	; 0x250 <main+0xe>
			}
		}
		else if(get_BUTTON3()) // speed down 
 2e2:	47 df       	rcall	.-370    	; 0x172 <get_BUTTON3>
 2e4:	89 2b       	or	r24, r25
 2e6:	09 f4       	brne	.+2      	; 0x2ea <main+0xa8>
 2e8:	b3 cf       	rjmp	.-154    	; 0x250 <main+0xe>
 2ea:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
		{
			
			if(OCR3C <= 70)
 2ee:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 2f2:	87 34       	cpi	r24, 0x47	; 71
 2f4:	91 05       	cpc	r25, r1
 2f6:	48 f4       	brcc	.+18     	; 0x30a <main+0xc8>
 2f8:	86 e4       	ldi	r24, 0x46	; 70
			{
				i = 9;
				OCR3C = 70;
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 300:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 304:	09 e0       	ldi	r16, 0x09	; 9
		else if(get_BUTTON3()) // speed down 
		{
			
			if(OCR3C <= 70)
			{
				i = 9;
 306:	10 e0       	ldi	r17, 0x00	; 0
 308:	a3 cf       	rjmp	.-186    	; 0x250 <main+0xe>
 30a:	0f 5f       	subi	r16, 0xFF	; 255
				OCR3C = 70;
				
			}
			else
			{
				i++;
 30c:	1f 4f       	sbci	r17, 0xFF	; 255
 30e:	c8 01       	movw	r24, r16
				if(i > 0 && i < 9)
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	08 97       	sbiw	r24, 0x08	; 8
 314:	48 f4       	brcc	.+18     	; 0x328 <main+0xe6>
 316:	8f ef       	ldi	r24, 0xFF	; 255
				{
					PORTA = 0xff << i;
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	00 2e       	mov	r0, r16
 31c:	02 c0       	rjmp	.+4      	; 0x322 <main+0xe0>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	0a 94       	dec	r0
 324:	e2 f7       	brpl	.-8      	; 0x31e <main+0xdc>
 326:	8b bb       	out	0x1b, r24	; 27
 328:	e2 e8       	ldi	r30, 0x82	; 130
					
				}
				OCR3C -= 20; 
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	91 81       	ldd	r25, Z+1	; 0x01
 330:	44 97       	sbiw	r24, 0x14	; 20
 332:	91 83       	std	Z+1, r25	; 0x01
 334:	80 83       	st	Z, r24
 336:	8c cf       	rjmp	.-232    	; 0x250 <main+0xe>

00000338 <_exit>:
 338:	f8 94       	cli

0000033a <__stop_program>:
 33a:	ff cf       	rjmp	.-2      	; 0x33a <__stop_program>
