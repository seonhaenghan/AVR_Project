
DHT11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000930  000009c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000930  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005d  0080013c  0080013c  00000a00  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e7e  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6f  00000000  00000000  000019d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a5  00000000  00000000  00002541  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005cd  00000000  00000000  00002da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000039c  00000000  00000000  00003371  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000370d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e7 c0       	rjmp	.+462    	; 0x210 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	2f c1       	rjmp	.+606    	; 0x2a8 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e3       	ldi	r30, 0x30	; 48
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 33       	cpi	r26, 0x3C	; 60
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e3       	ldi	r26, 0x3C	; 60
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 39       	cpi	r26, 0x99	; 153
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e6 d0       	rcall	.+460    	; 0x290 <main>
  c4:	33 c4       	rjmp	.+2150   	; 0x92c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_trigger_pulse>:
}

void init_trigger_pulse()
{
	
	DHT11_PORT &= ~(1 << DHT11); // low
  c8:	85 b3       	in	r24, 0x15	; 21
  ca:	8e 7f       	andi	r24, 0xFE	; 254
  cc:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	89 ef       	ldi	r24, 0xF9	; 249
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <init_trigger_pulse+0xc>
  dc:	00 c0       	rjmp	.+0      	; 0xde <init_trigger_pulse+0x16>
  de:	00 00       	nop
	_delay_ms(20); // > 18ms
	DHT11_PORT |= (1 << DHT11); // high
  e0:	85 b3       	in	r24, 0x15	; 21
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	25 e2       	ldi	r18, 0x25	; 37
  e8:	2a 95       	dec	r18
  ea:	f1 f7       	brne	.-4      	; 0xe8 <init_trigger_pulse+0x20>
  ec:	00 00       	nop
  ee:	08 95       	ret

000000f0 <data_line_input>:
	
}

void data_line_input()
{
	 DHT11_DDR &= ~(1 << DHT11); // input mode 
  f0:	84 b3       	in	r24, 0x14	; 20
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	84 bb       	out	0x14, r24	; 20
	 DHT11_PORT &= ~(1 << DHT11);// pull down 
  f6:	85 b3       	in	r24, 0x15	; 21
  f8:	8e 7f       	andi	r24, 0xFE	; 254
  fa:	85 bb       	out	0x15, r24	; 21
  fc:	08 95       	ret

000000fe <data_line_output>:
}

void data_line_output()
{
	DHT11_DDR |= (1 << DHT11); // output 
  fe:	84 b3       	in	r24, 0x14	; 20
 100:	81 60       	ori	r24, 0x01	; 1
 102:	84 bb       	out	0x14, r24	; 20
	DHT11_PORT |= (1 << DHT11); // high (normal state = high)
 104:	85 b3       	in	r24, 0x15	; 21
 106:	81 60       	ori	r24, 0x01	; 1
 108:	85 bb       	out	0x15, r24	; 21
 10a:	08 95       	ret

0000010c <DHT11_rx_data>:
{
	
	
	uint8_t rx_data = 0;
		
		for(int i = 0; i < 8; i++)
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0

uint8_t DHT11_rx_data()
{
	
	
	uint8_t rx_data = 0;
 110:	80 e0       	ldi	r24, 0x00	; 0
		
		for(int i = 0; i < 8; i++)
 112:	0f c0       	rjmp	.+30     	; 0x132 <DHT11_rx_data+0x26>
		{
			//when Input Data == 0
			while( 0 == DHT11_PIN & (1 << DHT11) ); // data 가 0인 것을 구분해야 함
 114:	93 b3       	in	r25, 0x13	; 19
 116:	99 23       	and	r25, r25
 118:	e9 f3       	breq	.-6      	; 0x114 <DHT11_rx_data+0x8>
 11a:	95 ed       	ldi	r25, 0xD5	; 213
 11c:	9a 95       	dec	r25
 11e:	f1 f7       	brne	.-4      	; 0x11c <DHT11_rx_data+0x10>
 120:	00 00       	nop
				
			_delay_us(40);  // high pulse 가 40us 이상일 때 1
							// 따로 50us 만큼 delay를 줄 필요는 없음 
			rx_data <<=1;
 122:	88 0f       	add	r24, r24
				
			//when Input Data == 1
			if(DHT11_PIN & (1 << DHT11))// data 가 1인 것을 구분해야 함
 124:	98 99       	sbic	0x13, 0	; 19
				
			{
				rx_data |= 1;
 126:	81 60       	ori	r24, 0x01	; 1
			}
			while( 1 == DHT11_PIN & (1 << DHT11) );
 128:	93 b3       	in	r25, 0x13	; 19
 12a:	91 30       	cpi	r25, 0x01	; 1
 12c:	e9 f3       	breq	.-6      	; 0x128 <DHT11_rx_data+0x1c>
{
	
	
	uint8_t rx_data = 0;
		
		for(int i = 0; i < 8; i++)
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	3f 4f       	sbci	r19, 0xFF	; 255
 132:	28 30       	cpi	r18, 0x08	; 8
 134:	31 05       	cpc	r19, r1
 136:	74 f3       	brlt	.-36     	; 0x114 <DHT11_rx_data+0x8>
			}
			while( 1 == DHT11_PIN & (1 << DHT11) );
		}
		
	return rx_data;
}
 138:	08 95       	ret

0000013a <DHT11_dumi_read>:

void DHT11_dumi_read(void)
{
	
	while( 1 == DHT11_PIN & (1 << DHT11) );
 13a:	83 b3       	in	r24, 0x13	; 19
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	e9 f3       	breq	.-6      	; 0x13a <DHT11_dumi_read>
	while( 0 == DHT11_PIN & (1 << DHT11) );
 140:	83 b3       	in	r24, 0x13	; 19
 142:	88 23       	and	r24, r24
 144:	e9 f3       	breq	.-6      	; 0x140 <DHT11_dumi_read+0x6>
	while( 1 == DHT11_PIN & (1 << DHT11) );
 146:	83 b3       	in	r24, 0x13	; 19
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	e9 f3       	breq	.-6      	; 0x146 <DHT11_dumi_read+0xc>
	
}
 14c:	08 95       	ret

0000014e <dht11_process>:


#include "dht11.h"
uint8_t rx_data_array[5];
void dht11_process()
{
 14e:	ef 92       	push	r14
 150:	ff 92       	push	r15
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
	uint8_t i_RH, d_RH, i_Tmp, d_Tmp, chksum, chksum_compare;
	
	if(sec_count)
 15a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 15e:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__data_end+0x1>
 162:	89 2b       	or	r24, r25
 164:	09 f4       	brne	.+2      	; 0x168 <dht11_process+0x1a>
 166:	3d c0       	rjmp	.+122    	; 0x1e2 <dht11_process+0x94>
	{
		sec_count = 0; 
 168:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <__data_end+0x1>
 16c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
		
		init_trigger_pulse();
 170:	ab df       	rcall	.-170    	; 0xc8 <init_trigger_pulse>
		
		data_line_input();
 172:	be df       	rcall	.-132    	; 0xf0 <data_line_input>
		DHT11_dumi_read();
 174:	e2 df       	rcall	.-60     	; 0x13a <DHT11_dumi_read>
		
		i_RH = DHT11_rx_data();
 176:	ca df       	rcall	.-108    	; 0x10c <DHT11_rx_data>
 178:	18 2f       	mov	r17, r24
		d_RH = DHT11_rx_data();
 17a:	c8 df       	rcall	.-112    	; 0x10c <DHT11_rx_data>
 17c:	08 2f       	mov	r16, r24
		i_Tmp = DHT11_rx_data();
 17e:	c6 df       	rcall	.-116    	; 0x10c <DHT11_rx_data>
 180:	f8 2e       	mov	r15, r24
 182:	c4 df       	rcall	.-120    	; 0x10c <DHT11_rx_data>
		d_Tmp = DHT11_rx_data();
 184:	e8 2e       	mov	r14, r24
 186:	c1 2f       	mov	r28, r17
		chksum_compare = i_RH + d_RH + i_Tmp + d_Tmp;	// chksum 비교를 위한 변수 
 188:	c0 0f       	add	r28, r16
 18a:	cf 0d       	add	r28, r15
 18c:	c8 0f       	add	r28, r24
 18e:	be df       	rcall	.-132    	; 0x10c <DHT11_rx_data>
		chksum = DHT11_rx_data();
 190:	d8 2f       	mov	r29, r24
 192:	b5 df       	rcall	.-150    	; 0xfe <data_line_output>
 194:	cd 13       	cpse	r28, r29
		
		data_line_output(); 
 196:	22 c0       	rjmp	.+68     	; 0x1dc <dht11_process+0x8e>
 198:	1f 92       	push	r1
		
		if(chksum == chksum_compare)			// checksum을 비교해 data가 정상인지 확인 
 19a:	ef 92       	push	r14
		{
			printf("[Tmp]%d.%d\n",(int)i_Tmp,(int)d_Tmp);
 19c:	1f 92       	push	r1
 19e:	ff 92       	push	r15
 1a0:	8e e0       	ldi	r24, 0x0E	; 14
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	9f 93       	push	r25
 1a6:	8f 93       	push	r24
 1a8:	d1 d0       	rcall	.+418    	; 0x34c <printf>
 1aa:	1f 92       	push	r1
 1ac:	0f 93       	push	r16
			printf("[Wet]%d.%d\n",(int)i_RH,(int)d_RH);
 1ae:	1f 92       	push	r1
 1b0:	1f 93       	push	r17
 1b2:	8a e1       	ldi	r24, 0x1A	; 26
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	9f 93       	push	r25
 1b8:	8f 93       	push	r24
 1ba:	c8 d0       	rcall	.+400    	; 0x34c <printf>
 1bc:	1f 92       	push	r1
 1be:	df 93       	push	r29
			printf("[chk]%d\n",(int)chksum);
 1c0:	86 e2       	ldi	r24, 0x26	; 38
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	9f 93       	push	r25
 1c6:	8f 93       	push	r24
 1c8:	c1 d0       	rcall	.+386    	; 0x34c <printf>
 1ca:	8d b7       	in	r24, 0x3d	; 61
 1cc:	9e b7       	in	r25, 0x3e	; 62
 1ce:	40 96       	adiw	r24, 0x10	; 16
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	f8 94       	cli
 1d4:	9e bf       	out	0x3e, r25	; 62
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	8d bf       	out	0x3d, r24	; 61
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <dht11_process+0x94>
 1dc:	8f e2       	ldi	r24, 0x2F	; 47
 1de:	91 e0       	ldi	r25, 0x01	; 1
		}
		else
		{
			printf("[data error]\n");			// chksum 비교 시 맞지 않으면 error sign
 1e0:	c8 d0       	rcall	.+400    	; 0x372 <puts>
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
		}
	}
}
 1e8:	0f 91       	pop	r16
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	08 95       	ret

000001f0 <DHT11_init>:
 1f0:	84 b3       	in	r24, 0x14	; 20
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	84 bb       	out	0x14, r24	; 20
}

void DHT11_init()
{
	DHT11_DDR |= (1 << DHT11); // output
	DHT11_PORT |= (1 << DHT11); // high (normal state = high)
 1f6:	85 b3       	in	r24, 0x15	; 21
 1f8:	81 60       	ori	r24, 0x01	; 1
 1fa:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	2f ef       	ldi	r18, 0xFF	; 255
 1fe:	8b e7       	ldi	r24, 0x7B	; 123
 200:	92 e9       	ldi	r25, 0x92	; 146
 202:	21 50       	subi	r18, 0x01	; 1
 204:	80 40       	sbci	r24, 0x00	; 0
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <DHT11_init+0x12>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <DHT11_init+0x1c>
 20c:	00 00       	nop
 20e:	08 95       	ret

00000210 <__vector_16>:

volatile int ms_count = 0; 
volatile int sec_count = 0; 

ISR(TIMER0_OVF_vect)
{
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	2f 93       	push	r18
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
	TCNT0 = 6; 
 220:	86 e0       	ldi	r24, 0x06	; 6
 222:	82 bf       	out	0x32, r24	; 50
	
	ms_count++; 
 224:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <ms_count>
 228:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <ms_count+0x1>
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <ms_count+0x1>
 232:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <ms_count>
	if(ms_count >= 2000)
 236:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <ms_count>
 23a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <ms_count+0x1>
 23e:	80 3d       	cpi	r24, 0xD0	; 208
 240:	97 40       	sbci	r25, 0x07	; 7
 242:	6c f0       	brlt	.+26     	; 0x25e <__vector_16+0x4e>
	{
		ms_count = 0; 
 244:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <ms_count+0x1>
 248:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <ms_count>
		sec_count++; 
 24c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 250:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__data_end+0x1>
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__data_end+0x1>
 25a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
	}
	
}
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	2f 91       	pop	r18
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <init_timer0>:
    }
}

void init_timer0()
{
	TCNT0 = 6;
 26e:	86 e0       	ldi	r24, 0x06	; 6
 270:	82 bf       	out	0x32, r24	; 50
	
	DDRF = 0x01 + 0x02 + 0x04;
 272:	87 e0       	ldi	r24, 0x07	; 7
 274:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
	PORTF |= 0x02;
 278:	e2 e6       	ldi	r30, 0x62	; 98
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	82 60       	ori	r24, 0x02	; 2
 280:	80 83       	st	Z, r24
	
	TCCR0 |= (1 << CS02) | (0 << CS01) | (0 << CS00);  //  분주비를 64로 설정
 282:	83 b7       	in	r24, 0x33	; 51
 284:	84 60       	ori	r24, 0x04	; 4
 286:	83 bf       	out	0x33, r24	; 51
	
	TIMSK |= (1 << TOIE0);
 288:	87 b7       	in	r24, 0x37	; 55
 28a:	81 60       	ori	r24, 0x01	; 1
 28c:	87 bf       	out	0x37, r24	; 55
 28e:	08 95       	ret

00000290 <main>:



int main(void)
{
   init_uart0();
 290:	4a d0       	rcall	.+148    	; 0x326 <init_uart0>
   init_timer0();
 292:	ed df       	rcall	.-38     	; 0x26e <init_timer0>
   DHT11_init();
 294:	ad df       	rcall	.-166    	; 0x1f0 <DHT11_init>
 296:	78 94       	sei
   sei();
 298:	80 e0       	ldi	r24, 0x00	; 0
   stdout = &OUTPUT;
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <__iob+0x3>
 2a0:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <__iob+0x2>
    while (1) 
    {
		
			dht11_process();
 2a4:	54 df       	rcall	.-344    	; 0x14e <dht11_process>
 2a6:	fe cf       	rjmp	.-4      	; 0x2a4 <main+0x14>

000002a8 <__vector_18>:
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	0b b6       	in	r0, 0x3b	; 59
 2b4:	0f 92       	push	r0
 2b6:	2f 93       	push	r18
 2b8:	3f 93       	push	r19
 2ba:	4f 93       	push	r20
 2bc:	5f 93       	push	r21
 2be:	8f 93       	push	r24
 2c0:	ef 93       	push	r30
 2c2:	ff 93       	push	r31
 2c4:	8c b1       	in	r24, 0x0c	; 12
 2c6:	8d 30       	cpi	r24, 0x0D	; 13
 2c8:	11 f0       	breq	.+4      	; 0x2ce <__vector_18+0x26>
 2ca:	8a 30       	cpi	r24, 0x0A	; 10
 2cc:	79 f4       	brne	.+30     	; 0x2ec <__vector_18+0x44>
 2ce:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <i>
 2d2:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <i+0x1>
 2d6:	ed 5b       	subi	r30, 0xBD	; 189
 2d8:	fe 4f       	sbci	r31, 0xFE	; 254
 2da:	10 82       	st	Z, r1
 2dc:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <i+0x1>
 2e0:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <i>
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <rx_ready_flag>
 2ea:	0f c0       	rjmp	.+30     	; 0x30a <__vector_18+0x62>
 2ec:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <i>
 2f0:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <i+0x1>
 2f4:	a9 01       	movw	r20, r18
 2f6:	4f 5f       	subi	r20, 0xFF	; 255
 2f8:	5f 4f       	sbci	r21, 0xFF	; 255
 2fa:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <i+0x1>
 2fe:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <i>
 302:	f9 01       	movw	r30, r18
 304:	ed 5b       	subi	r30, 0xBD	; 189
 306:	fe 4f       	sbci	r31, 0xFE	; 254
 308:	80 83       	st	Z, r24
 30a:	ff 91       	pop	r31
 30c:	ef 91       	pop	r30
 30e:	8f 91       	pop	r24
 310:	5f 91       	pop	r21
 312:	4f 91       	pop	r20
 314:	3f 91       	pop	r19
 316:	2f 91       	pop	r18
 318:	0f 90       	pop	r0
 31a:	0b be       	out	0x3b, r0	; 59
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <init_uart0>:
 326:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 32a:	8f ec       	ldi	r24, 0xCF	; 207
 32c:	89 b9       	out	0x09, r24	; 9
 32e:	8b b1       	in	r24, 0x0b	; 11
 330:	82 60       	ori	r24, 0x02	; 2
 332:	8b b9       	out	0x0b, r24	; 11
 334:	e5 e9       	ldi	r30, 0x95	; 149
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	86 60       	ori	r24, 0x06	; 6
 33c:	80 83       	st	Z, r24
 33e:	88 e9       	ldi	r24, 0x98	; 152
 340:	8a b9       	out	0x0a, r24	; 10
 342:	08 95       	ret

00000344 <UART0_transmit>:
 344:	5d 9b       	sbis	0x0b, 5	; 11
 346:	fe cf       	rjmp	.-4      	; 0x344 <UART0_transmit>
 348:	8c b9       	out	0x0c, r24	; 12
 34a:	08 95       	ret

0000034c <printf>:
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
 354:	ae 01       	movw	r20, r28
 356:	4b 5f       	subi	r20, 0xFB	; 251
 358:	5f 4f       	sbci	r21, 0xFF	; 255
 35a:	fa 01       	movw	r30, r20
 35c:	61 91       	ld	r22, Z+
 35e:	71 91       	ld	r23, Z+
 360:	af 01       	movw	r20, r30
 362:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <__iob+0x2>
 366:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <__iob+0x3>
 36a:	33 d0       	rcall	.+102    	; 0x3d2 <vfprintf>
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <puts>:
 372:	0f 93       	push	r16
 374:	1f 93       	push	r17
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <__iob+0x2>
 37e:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <__iob+0x3>
 382:	23 81       	ldd	r18, Z+3	; 0x03
 384:	21 ff       	sbrs	r18, 1
 386:	1b c0       	rjmp	.+54     	; 0x3be <puts+0x4c>
 388:	8c 01       	movw	r16, r24
 38a:	d0 e0       	ldi	r29, 0x00	; 0
 38c:	c0 e0       	ldi	r28, 0x00	; 0
 38e:	f8 01       	movw	r30, r16
 390:	81 91       	ld	r24, Z+
 392:	8f 01       	movw	r16, r30
 394:	60 91 95 01 	lds	r22, 0x0195	; 0x800195 <__iob+0x2>
 398:	70 91 96 01 	lds	r23, 0x0196	; 0x800196 <__iob+0x3>
 39c:	db 01       	movw	r26, r22
 39e:	18 96       	adiw	r26, 0x08	; 8
 3a0:	ed 91       	ld	r30, X+
 3a2:	fc 91       	ld	r31, X
 3a4:	19 97       	sbiw	r26, 0x09	; 9
 3a6:	88 23       	and	r24, r24
 3a8:	31 f0       	breq	.+12     	; 0x3b6 <puts+0x44>
 3aa:	09 95       	icall
 3ac:	89 2b       	or	r24, r25
 3ae:	79 f3       	breq	.-34     	; 0x38e <puts+0x1c>
 3b0:	df ef       	ldi	r29, 0xFF	; 255
 3b2:	cf ef       	ldi	r28, 0xFF	; 255
 3b4:	ec cf       	rjmp	.-40     	; 0x38e <puts+0x1c>
 3b6:	8a e0       	ldi	r24, 0x0A	; 10
 3b8:	09 95       	icall
 3ba:	89 2b       	or	r24, r25
 3bc:	19 f0       	breq	.+6      	; 0x3c4 <puts+0x52>
 3be:	8f ef       	ldi	r24, 0xFF	; 255
 3c0:	9f ef       	ldi	r25, 0xFF	; 255
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <puts+0x56>
 3c4:	8d 2f       	mov	r24, r29
 3c6:	9c 2f       	mov	r25, r28
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	08 95       	ret

000003d2 <vfprintf>:
 3d2:	2f 92       	push	r2
 3d4:	3f 92       	push	r3
 3d6:	4f 92       	push	r4
 3d8:	5f 92       	push	r5
 3da:	6f 92       	push	r6
 3dc:	7f 92       	push	r7
 3de:	8f 92       	push	r8
 3e0:	9f 92       	push	r9
 3e2:	af 92       	push	r10
 3e4:	bf 92       	push	r11
 3e6:	cf 92       	push	r12
 3e8:	df 92       	push	r13
 3ea:	ef 92       	push	r14
 3ec:	ff 92       	push	r15
 3ee:	0f 93       	push	r16
 3f0:	1f 93       	push	r17
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
 3f6:	cd b7       	in	r28, 0x3d	; 61
 3f8:	de b7       	in	r29, 0x3e	; 62
 3fa:	2b 97       	sbiw	r28, 0x0b	; 11
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	f8 94       	cli
 400:	de bf       	out	0x3e, r29	; 62
 402:	0f be       	out	0x3f, r0	; 63
 404:	cd bf       	out	0x3d, r28	; 61
 406:	6c 01       	movw	r12, r24
 408:	7b 01       	movw	r14, r22
 40a:	8a 01       	movw	r16, r20
 40c:	fc 01       	movw	r30, r24
 40e:	17 82       	std	Z+7, r1	; 0x07
 410:	16 82       	std	Z+6, r1	; 0x06
 412:	83 81       	ldd	r24, Z+3	; 0x03
 414:	81 ff       	sbrs	r24, 1
 416:	bf c1       	rjmp	.+894    	; 0x796 <__LOCK_REGION_LENGTH__+0x396>
 418:	ce 01       	movw	r24, r28
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	3c 01       	movw	r6, r24
 41e:	f6 01       	movw	r30, r12
 420:	93 81       	ldd	r25, Z+3	; 0x03
 422:	f7 01       	movw	r30, r14
 424:	93 fd       	sbrc	r25, 3
 426:	85 91       	lpm	r24, Z+
 428:	93 ff       	sbrs	r25, 3
 42a:	81 91       	ld	r24, Z+
 42c:	7f 01       	movw	r14, r30
 42e:	88 23       	and	r24, r24
 430:	09 f4       	brne	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 432:	ad c1       	rjmp	.+858    	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
 434:	85 32       	cpi	r24, 0x25	; 37
 436:	39 f4       	brne	.+14     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 438:	93 fd       	sbrc	r25, 3
 43a:	85 91       	lpm	r24, Z+
 43c:	93 ff       	sbrs	r25, 3
 43e:	81 91       	ld	r24, Z+
 440:	7f 01       	movw	r14, r30
 442:	85 32       	cpi	r24, 0x25	; 37
 444:	21 f4       	brne	.+8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 446:	b6 01       	movw	r22, r12
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	d6 d1       	rcall	.+940    	; 0x7f8 <fputc>
 44c:	e8 cf       	rjmp	.-48     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 44e:	91 2c       	mov	r9, r1
 450:	21 2c       	mov	r2, r1
 452:	31 2c       	mov	r3, r1
 454:	ff e1       	ldi	r31, 0x1F	; 31
 456:	f3 15       	cp	r31, r3
 458:	d8 f0       	brcs	.+54     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 45a:	8b 32       	cpi	r24, 0x2B	; 43
 45c:	79 f0       	breq	.+30     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 45e:	38 f4       	brcc	.+14     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 460:	80 32       	cpi	r24, 0x20	; 32
 462:	79 f0       	breq	.+30     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 464:	83 32       	cpi	r24, 0x23	; 35
 466:	a1 f4       	brne	.+40     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 468:	23 2d       	mov	r18, r3
 46a:	20 61       	ori	r18, 0x10	; 16
 46c:	1d c0       	rjmp	.+58     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 46e:	8d 32       	cpi	r24, 0x2D	; 45
 470:	61 f0       	breq	.+24     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 472:	80 33       	cpi	r24, 0x30	; 48
 474:	69 f4       	brne	.+26     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 476:	23 2d       	mov	r18, r3
 478:	21 60       	ori	r18, 0x01	; 1
 47a:	16 c0       	rjmp	.+44     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 47c:	83 2d       	mov	r24, r3
 47e:	82 60       	ori	r24, 0x02	; 2
 480:	38 2e       	mov	r3, r24
 482:	e3 2d       	mov	r30, r3
 484:	e4 60       	ori	r30, 0x04	; 4
 486:	3e 2e       	mov	r3, r30
 488:	2a c0       	rjmp	.+84     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 48a:	f3 2d       	mov	r31, r3
 48c:	f8 60       	ori	r31, 0x08	; 8
 48e:	1d c0       	rjmp	.+58     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 490:	37 fc       	sbrc	r3, 7
 492:	2d c0       	rjmp	.+90     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 494:	20 ed       	ldi	r18, 0xD0	; 208
 496:	28 0f       	add	r18, r24
 498:	2a 30       	cpi	r18, 0x0A	; 10
 49a:	40 f0       	brcs	.+16     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 49c:	8e 32       	cpi	r24, 0x2E	; 46
 49e:	b9 f4       	brne	.+46     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4a0:	36 fc       	sbrc	r3, 6
 4a2:	75 c1       	rjmp	.+746    	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
 4a4:	23 2d       	mov	r18, r3
 4a6:	20 64       	ori	r18, 0x40	; 64
 4a8:	32 2e       	mov	r3, r18
 4aa:	19 c0       	rjmp	.+50     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4ac:	36 fe       	sbrs	r3, 6
 4ae:	06 c0       	rjmp	.+12     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4b0:	8a e0       	ldi	r24, 0x0A	; 10
 4b2:	98 9e       	mul	r9, r24
 4b4:	20 0d       	add	r18, r0
 4b6:	11 24       	eor	r1, r1
 4b8:	92 2e       	mov	r9, r18
 4ba:	11 c0       	rjmp	.+34     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4bc:	ea e0       	ldi	r30, 0x0A	; 10
 4be:	2e 9e       	mul	r2, r30
 4c0:	20 0d       	add	r18, r0
 4c2:	11 24       	eor	r1, r1
 4c4:	22 2e       	mov	r2, r18
 4c6:	f3 2d       	mov	r31, r3
 4c8:	f0 62       	ori	r31, 0x20	; 32
 4ca:	3f 2e       	mov	r3, r31
 4cc:	08 c0       	rjmp	.+16     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4ce:	8c 36       	cpi	r24, 0x6C	; 108
 4d0:	21 f4       	brne	.+8      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4d2:	83 2d       	mov	r24, r3
 4d4:	80 68       	ori	r24, 0x80	; 128
 4d6:	38 2e       	mov	r3, r24
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4da:	88 36       	cpi	r24, 0x68	; 104
 4dc:	41 f4       	brne	.+16     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4de:	f7 01       	movw	r30, r14
 4e0:	93 fd       	sbrc	r25, 3
 4e2:	85 91       	lpm	r24, Z+
 4e4:	93 ff       	sbrs	r25, 3
 4e6:	81 91       	ld	r24, Z+
 4e8:	7f 01       	movw	r14, r30
 4ea:	81 11       	cpse	r24, r1
 4ec:	b3 cf       	rjmp	.-154    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 4ee:	98 2f       	mov	r25, r24
 4f0:	9f 7d       	andi	r25, 0xDF	; 223
 4f2:	95 54       	subi	r25, 0x45	; 69
 4f4:	93 30       	cpi	r25, 0x03	; 3
 4f6:	28 f4       	brcc	.+10     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4f8:	0c 5f       	subi	r16, 0xFC	; 252
 4fa:	1f 4f       	sbci	r17, 0xFF	; 255
 4fc:	9f e3       	ldi	r25, 0x3F	; 63
 4fe:	99 83       	std	Y+1, r25	; 0x01
 500:	0d c0       	rjmp	.+26     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 502:	83 36       	cpi	r24, 0x63	; 99
 504:	31 f0       	breq	.+12     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 506:	83 37       	cpi	r24, 0x73	; 115
 508:	71 f0       	breq	.+28     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 50a:	83 35       	cpi	r24, 0x53	; 83
 50c:	09 f0       	breq	.+2      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 50e:	55 c0       	rjmp	.+170    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 510:	20 c0       	rjmp	.+64     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 512:	f8 01       	movw	r30, r16
 514:	80 81       	ld	r24, Z
 516:	89 83       	std	Y+1, r24	; 0x01
 518:	0e 5f       	subi	r16, 0xFE	; 254
 51a:	1f 4f       	sbci	r17, 0xFF	; 255
 51c:	88 24       	eor	r8, r8
 51e:	83 94       	inc	r8
 520:	91 2c       	mov	r9, r1
 522:	53 01       	movw	r10, r6
 524:	12 c0       	rjmp	.+36     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 526:	28 01       	movw	r4, r16
 528:	f2 e0       	ldi	r31, 0x02	; 2
 52a:	4f 0e       	add	r4, r31
 52c:	51 1c       	adc	r5, r1
 52e:	f8 01       	movw	r30, r16
 530:	a0 80       	ld	r10, Z
 532:	b1 80       	ldd	r11, Z+1	; 0x01
 534:	36 fe       	sbrs	r3, 6
 536:	03 c0       	rjmp	.+6      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 538:	69 2d       	mov	r22, r9
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	02 c0       	rjmp	.+4      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 53e:	6f ef       	ldi	r22, 0xFF	; 255
 540:	7f ef       	ldi	r23, 0xFF	; 255
 542:	c5 01       	movw	r24, r10
 544:	4e d1       	rcall	.+668    	; 0x7e2 <strnlen>
 546:	4c 01       	movw	r8, r24
 548:	82 01       	movw	r16, r4
 54a:	f3 2d       	mov	r31, r3
 54c:	ff 77       	andi	r31, 0x7F	; 127
 54e:	3f 2e       	mov	r3, r31
 550:	15 c0       	rjmp	.+42     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 552:	28 01       	movw	r4, r16
 554:	22 e0       	ldi	r18, 0x02	; 2
 556:	42 0e       	add	r4, r18
 558:	51 1c       	adc	r5, r1
 55a:	f8 01       	movw	r30, r16
 55c:	a0 80       	ld	r10, Z
 55e:	b1 80       	ldd	r11, Z+1	; 0x01
 560:	36 fe       	sbrs	r3, 6
 562:	03 c0       	rjmp	.+6      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 564:	69 2d       	mov	r22, r9
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 56a:	6f ef       	ldi	r22, 0xFF	; 255
 56c:	7f ef       	ldi	r23, 0xFF	; 255
 56e:	c5 01       	movw	r24, r10
 570:	2d d1       	rcall	.+602    	; 0x7cc <strnlen_P>
 572:	4c 01       	movw	r8, r24
 574:	f3 2d       	mov	r31, r3
 576:	f0 68       	ori	r31, 0x80	; 128
 578:	3f 2e       	mov	r3, r31
 57a:	82 01       	movw	r16, r4
 57c:	33 fc       	sbrc	r3, 3
 57e:	19 c0       	rjmp	.+50     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 580:	82 2d       	mov	r24, r2
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	88 16       	cp	r8, r24
 586:	99 06       	cpc	r9, r25
 588:	a0 f4       	brcc	.+40     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 58a:	b6 01       	movw	r22, r12
 58c:	80 e2       	ldi	r24, 0x20	; 32
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	33 d1       	rcall	.+614    	; 0x7f8 <fputc>
 592:	2a 94       	dec	r2
 594:	f5 cf       	rjmp	.-22     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 596:	f5 01       	movw	r30, r10
 598:	37 fc       	sbrc	r3, 7
 59a:	85 91       	lpm	r24, Z+
 59c:	37 fe       	sbrs	r3, 7
 59e:	81 91       	ld	r24, Z+
 5a0:	5f 01       	movw	r10, r30
 5a2:	b6 01       	movw	r22, r12
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	28 d1       	rcall	.+592    	; 0x7f8 <fputc>
 5a8:	21 10       	cpse	r2, r1
 5aa:	2a 94       	dec	r2
 5ac:	21 e0       	ldi	r18, 0x01	; 1
 5ae:	82 1a       	sub	r8, r18
 5b0:	91 08       	sbc	r9, r1
 5b2:	81 14       	cp	r8, r1
 5b4:	91 04       	cpc	r9, r1
 5b6:	79 f7       	brne	.-34     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 5b8:	e1 c0       	rjmp	.+450    	; 0x77c <__LOCK_REGION_LENGTH__+0x37c>
 5ba:	84 36       	cpi	r24, 0x64	; 100
 5bc:	11 f0       	breq	.+4      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5be:	89 36       	cpi	r24, 0x69	; 105
 5c0:	39 f5       	brne	.+78     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 5c2:	f8 01       	movw	r30, r16
 5c4:	37 fe       	sbrs	r3, 7
 5c6:	07 c0       	rjmp	.+14     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5c8:	60 81       	ld	r22, Z
 5ca:	71 81       	ldd	r23, Z+1	; 0x01
 5cc:	82 81       	ldd	r24, Z+2	; 0x02
 5ce:	93 81       	ldd	r25, Z+3	; 0x03
 5d0:	0c 5f       	subi	r16, 0xFC	; 252
 5d2:	1f 4f       	sbci	r17, 0xFF	; 255
 5d4:	08 c0       	rjmp	.+16     	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5d6:	60 81       	ld	r22, Z
 5d8:	71 81       	ldd	r23, Z+1	; 0x01
 5da:	07 2e       	mov	r0, r23
 5dc:	00 0c       	add	r0, r0
 5de:	88 0b       	sbc	r24, r24
 5e0:	99 0b       	sbc	r25, r25
 5e2:	0e 5f       	subi	r16, 0xFE	; 254
 5e4:	1f 4f       	sbci	r17, 0xFF	; 255
 5e6:	f3 2d       	mov	r31, r3
 5e8:	ff 76       	andi	r31, 0x6F	; 111
 5ea:	3f 2e       	mov	r3, r31
 5ec:	97 ff       	sbrs	r25, 7
 5ee:	09 c0       	rjmp	.+18     	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 5f0:	90 95       	com	r25
 5f2:	80 95       	com	r24
 5f4:	70 95       	com	r23
 5f6:	61 95       	neg	r22
 5f8:	7f 4f       	sbci	r23, 0xFF	; 255
 5fa:	8f 4f       	sbci	r24, 0xFF	; 255
 5fc:	9f 4f       	sbci	r25, 0xFF	; 255
 5fe:	f0 68       	ori	r31, 0x80	; 128
 600:	3f 2e       	mov	r3, r31
 602:	2a e0       	ldi	r18, 0x0A	; 10
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	a3 01       	movw	r20, r6
 608:	33 d1       	rcall	.+614    	; 0x870 <__ultoa_invert>
 60a:	88 2e       	mov	r8, r24
 60c:	86 18       	sub	r8, r6
 60e:	44 c0       	rjmp	.+136    	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
 610:	85 37       	cpi	r24, 0x75	; 117
 612:	31 f4       	brne	.+12     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 614:	23 2d       	mov	r18, r3
 616:	2f 7e       	andi	r18, 0xEF	; 239
 618:	b2 2e       	mov	r11, r18
 61a:	2a e0       	ldi	r18, 0x0A	; 10
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	25 c0       	rjmp	.+74     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 620:	93 2d       	mov	r25, r3
 622:	99 7f       	andi	r25, 0xF9	; 249
 624:	b9 2e       	mov	r11, r25
 626:	8f 36       	cpi	r24, 0x6F	; 111
 628:	c1 f0       	breq	.+48     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 62a:	18 f4       	brcc	.+6      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 62c:	88 35       	cpi	r24, 0x58	; 88
 62e:	79 f0       	breq	.+30     	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
 630:	ae c0       	rjmp	.+348    	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
 632:	80 37       	cpi	r24, 0x70	; 112
 634:	19 f0       	breq	.+6      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 636:	88 37       	cpi	r24, 0x78	; 120
 638:	21 f0       	breq	.+8      	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 63a:	a9 c0       	rjmp	.+338    	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
 63c:	e9 2f       	mov	r30, r25
 63e:	e0 61       	ori	r30, 0x10	; 16
 640:	be 2e       	mov	r11, r30
 642:	b4 fe       	sbrs	r11, 4
 644:	0d c0       	rjmp	.+26     	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
 646:	fb 2d       	mov	r31, r11
 648:	f4 60       	ori	r31, 0x04	; 4
 64a:	bf 2e       	mov	r11, r31
 64c:	09 c0       	rjmp	.+18     	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
 64e:	34 fe       	sbrs	r3, 4
 650:	0a c0       	rjmp	.+20     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 652:	29 2f       	mov	r18, r25
 654:	26 60       	ori	r18, 0x06	; 6
 656:	b2 2e       	mov	r11, r18
 658:	06 c0       	rjmp	.+12     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 65a:	28 e0       	ldi	r18, 0x08	; 8
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	05 c0       	rjmp	.+10     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 660:	20 e1       	ldi	r18, 0x10	; 16
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	02 c0       	rjmp	.+4      	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 666:	20 e1       	ldi	r18, 0x10	; 16
 668:	32 e0       	ldi	r19, 0x02	; 2
 66a:	f8 01       	movw	r30, r16
 66c:	b7 fe       	sbrs	r11, 7
 66e:	07 c0       	rjmp	.+14     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
 670:	60 81       	ld	r22, Z
 672:	71 81       	ldd	r23, Z+1	; 0x01
 674:	82 81       	ldd	r24, Z+2	; 0x02
 676:	93 81       	ldd	r25, Z+3	; 0x03
 678:	0c 5f       	subi	r16, 0xFC	; 252
 67a:	1f 4f       	sbci	r17, 0xFF	; 255
 67c:	06 c0       	rjmp	.+12     	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
 67e:	60 81       	ld	r22, Z
 680:	71 81       	ldd	r23, Z+1	; 0x01
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	0e 5f       	subi	r16, 0xFE	; 254
 688:	1f 4f       	sbci	r17, 0xFF	; 255
 68a:	a3 01       	movw	r20, r6
 68c:	f1 d0       	rcall	.+482    	; 0x870 <__ultoa_invert>
 68e:	88 2e       	mov	r8, r24
 690:	86 18       	sub	r8, r6
 692:	fb 2d       	mov	r31, r11
 694:	ff 77       	andi	r31, 0x7F	; 127
 696:	3f 2e       	mov	r3, r31
 698:	36 fe       	sbrs	r3, 6
 69a:	0d c0       	rjmp	.+26     	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
 69c:	23 2d       	mov	r18, r3
 69e:	2e 7f       	andi	r18, 0xFE	; 254
 6a0:	a2 2e       	mov	r10, r18
 6a2:	89 14       	cp	r8, r9
 6a4:	58 f4       	brcc	.+22     	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
 6a6:	34 fe       	sbrs	r3, 4
 6a8:	0b c0       	rjmp	.+22     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6aa:	32 fc       	sbrc	r3, 2
 6ac:	09 c0       	rjmp	.+18     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6ae:	83 2d       	mov	r24, r3
 6b0:	8e 7e       	andi	r24, 0xEE	; 238
 6b2:	a8 2e       	mov	r10, r24
 6b4:	05 c0       	rjmp	.+10     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6b6:	b8 2c       	mov	r11, r8
 6b8:	a3 2c       	mov	r10, r3
 6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
 6bc:	b8 2c       	mov	r11, r8
 6be:	01 c0       	rjmp	.+2      	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
 6c0:	b9 2c       	mov	r11, r9
 6c2:	a4 fe       	sbrs	r10, 4
 6c4:	0f c0       	rjmp	.+30     	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
 6c6:	fe 01       	movw	r30, r28
 6c8:	e8 0d       	add	r30, r8
 6ca:	f1 1d       	adc	r31, r1
 6cc:	80 81       	ld	r24, Z
 6ce:	80 33       	cpi	r24, 0x30	; 48
 6d0:	21 f4       	brne	.+8      	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
 6d2:	9a 2d       	mov	r25, r10
 6d4:	99 7e       	andi	r25, 0xE9	; 233
 6d6:	a9 2e       	mov	r10, r25
 6d8:	09 c0       	rjmp	.+18     	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
 6da:	a2 fe       	sbrs	r10, 2
 6dc:	06 c0       	rjmp	.+12     	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
 6de:	b3 94       	inc	r11
 6e0:	b3 94       	inc	r11
 6e2:	04 c0       	rjmp	.+8      	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
 6e4:	8a 2d       	mov	r24, r10
 6e6:	86 78       	andi	r24, 0x86	; 134
 6e8:	09 f0       	breq	.+2      	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
 6ea:	b3 94       	inc	r11
 6ec:	a3 fc       	sbrc	r10, 3
 6ee:	10 c0       	rjmp	.+32     	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
 6f0:	a0 fe       	sbrs	r10, 0
 6f2:	06 c0       	rjmp	.+12     	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 6f4:	b2 14       	cp	r11, r2
 6f6:	80 f4       	brcc	.+32     	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
 6f8:	28 0c       	add	r2, r8
 6fa:	92 2c       	mov	r9, r2
 6fc:	9b 18       	sub	r9, r11
 6fe:	0d c0       	rjmp	.+26     	; 0x71a <__LOCK_REGION_LENGTH__+0x31a>
 700:	b2 14       	cp	r11, r2
 702:	58 f4       	brcc	.+22     	; 0x71a <__LOCK_REGION_LENGTH__+0x31a>
 704:	b6 01       	movw	r22, r12
 706:	80 e2       	ldi	r24, 0x20	; 32
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	76 d0       	rcall	.+236    	; 0x7f8 <fputc>
 70c:	b3 94       	inc	r11
 70e:	f8 cf       	rjmp	.-16     	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 710:	b2 14       	cp	r11, r2
 712:	18 f4       	brcc	.+6      	; 0x71a <__LOCK_REGION_LENGTH__+0x31a>
 714:	2b 18       	sub	r2, r11
 716:	02 c0       	rjmp	.+4      	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>
 718:	98 2c       	mov	r9, r8
 71a:	21 2c       	mov	r2, r1
 71c:	a4 fe       	sbrs	r10, 4
 71e:	0f c0       	rjmp	.+30     	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
 720:	b6 01       	movw	r22, r12
 722:	80 e3       	ldi	r24, 0x30	; 48
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	68 d0       	rcall	.+208    	; 0x7f8 <fputc>
 728:	a2 fe       	sbrs	r10, 2
 72a:	16 c0       	rjmp	.+44     	; 0x758 <__LOCK_REGION_LENGTH__+0x358>
 72c:	a1 fc       	sbrc	r10, 1
 72e:	03 c0       	rjmp	.+6      	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
 730:	88 e7       	ldi	r24, 0x78	; 120
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	02 c0       	rjmp	.+4      	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
 736:	88 e5       	ldi	r24, 0x58	; 88
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	b6 01       	movw	r22, r12
 73c:	0c c0       	rjmp	.+24     	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
 73e:	8a 2d       	mov	r24, r10
 740:	86 78       	andi	r24, 0x86	; 134
 742:	51 f0       	breq	.+20     	; 0x758 <__LOCK_REGION_LENGTH__+0x358>
 744:	a1 fe       	sbrs	r10, 1
 746:	02 c0       	rjmp	.+4      	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
 748:	8b e2       	ldi	r24, 0x2B	; 43
 74a:	01 c0       	rjmp	.+2      	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
 74c:	80 e2       	ldi	r24, 0x20	; 32
 74e:	a7 fc       	sbrc	r10, 7
 750:	8d e2       	ldi	r24, 0x2D	; 45
 752:	b6 01       	movw	r22, r12
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	50 d0       	rcall	.+160    	; 0x7f8 <fputc>
 758:	89 14       	cp	r8, r9
 75a:	30 f4       	brcc	.+12     	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
 75c:	b6 01       	movw	r22, r12
 75e:	80 e3       	ldi	r24, 0x30	; 48
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	4a d0       	rcall	.+148    	; 0x7f8 <fputc>
 764:	9a 94       	dec	r9
 766:	f8 cf       	rjmp	.-16     	; 0x758 <__LOCK_REGION_LENGTH__+0x358>
 768:	8a 94       	dec	r8
 76a:	f3 01       	movw	r30, r6
 76c:	e8 0d       	add	r30, r8
 76e:	f1 1d       	adc	r31, r1
 770:	80 81       	ld	r24, Z
 772:	b6 01       	movw	r22, r12
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	40 d0       	rcall	.+128    	; 0x7f8 <fputc>
 778:	81 10       	cpse	r8, r1
 77a:	f6 cf       	rjmp	.-20     	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
 77c:	22 20       	and	r2, r2
 77e:	09 f4       	brne	.+2      	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
 780:	4e ce       	rjmp	.-868    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 782:	b6 01       	movw	r22, r12
 784:	80 e2       	ldi	r24, 0x20	; 32
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	37 d0       	rcall	.+110    	; 0x7f8 <fputc>
 78a:	2a 94       	dec	r2
 78c:	f7 cf       	rjmp	.-18     	; 0x77c <__LOCK_REGION_LENGTH__+0x37c>
 78e:	f6 01       	movw	r30, r12
 790:	86 81       	ldd	r24, Z+6	; 0x06
 792:	97 81       	ldd	r25, Z+7	; 0x07
 794:	02 c0       	rjmp	.+4      	; 0x79a <__LOCK_REGION_LENGTH__+0x39a>
 796:	8f ef       	ldi	r24, 0xFF	; 255
 798:	9f ef       	ldi	r25, 0xFF	; 255
 79a:	2b 96       	adiw	r28, 0x0b	; 11
 79c:	0f b6       	in	r0, 0x3f	; 63
 79e:	f8 94       	cli
 7a0:	de bf       	out	0x3e, r29	; 62
 7a2:	0f be       	out	0x3f, r0	; 63
 7a4:	cd bf       	out	0x3d, r28	; 61
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
 7aa:	1f 91       	pop	r17
 7ac:	0f 91       	pop	r16
 7ae:	ff 90       	pop	r15
 7b0:	ef 90       	pop	r14
 7b2:	df 90       	pop	r13
 7b4:	cf 90       	pop	r12
 7b6:	bf 90       	pop	r11
 7b8:	af 90       	pop	r10
 7ba:	9f 90       	pop	r9
 7bc:	8f 90       	pop	r8
 7be:	7f 90       	pop	r7
 7c0:	6f 90       	pop	r6
 7c2:	5f 90       	pop	r5
 7c4:	4f 90       	pop	r4
 7c6:	3f 90       	pop	r3
 7c8:	2f 90       	pop	r2
 7ca:	08 95       	ret

000007cc <strnlen_P>:
 7cc:	fc 01       	movw	r30, r24
 7ce:	05 90       	lpm	r0, Z+
 7d0:	61 50       	subi	r22, 0x01	; 1
 7d2:	70 40       	sbci	r23, 0x00	; 0
 7d4:	01 10       	cpse	r0, r1
 7d6:	d8 f7       	brcc	.-10     	; 0x7ce <strnlen_P+0x2>
 7d8:	80 95       	com	r24
 7da:	90 95       	com	r25
 7dc:	8e 0f       	add	r24, r30
 7de:	9f 1f       	adc	r25, r31
 7e0:	08 95       	ret

000007e2 <strnlen>:
 7e2:	fc 01       	movw	r30, r24
 7e4:	61 50       	subi	r22, 0x01	; 1
 7e6:	70 40       	sbci	r23, 0x00	; 0
 7e8:	01 90       	ld	r0, Z+
 7ea:	01 10       	cpse	r0, r1
 7ec:	d8 f7       	brcc	.-10     	; 0x7e4 <strnlen+0x2>
 7ee:	80 95       	com	r24
 7f0:	90 95       	com	r25
 7f2:	8e 0f       	add	r24, r30
 7f4:	9f 1f       	adc	r25, r31
 7f6:	08 95       	ret

000007f8 <fputc>:
 7f8:	0f 93       	push	r16
 7fa:	1f 93       	push	r17
 7fc:	cf 93       	push	r28
 7fe:	df 93       	push	r29
 800:	fb 01       	movw	r30, r22
 802:	23 81       	ldd	r18, Z+3	; 0x03
 804:	21 fd       	sbrc	r18, 1
 806:	03 c0       	rjmp	.+6      	; 0x80e <fputc+0x16>
 808:	8f ef       	ldi	r24, 0xFF	; 255
 80a:	9f ef       	ldi	r25, 0xFF	; 255
 80c:	2c c0       	rjmp	.+88     	; 0x866 <fputc+0x6e>
 80e:	22 ff       	sbrs	r18, 2
 810:	16 c0       	rjmp	.+44     	; 0x83e <fputc+0x46>
 812:	46 81       	ldd	r20, Z+6	; 0x06
 814:	57 81       	ldd	r21, Z+7	; 0x07
 816:	24 81       	ldd	r18, Z+4	; 0x04
 818:	35 81       	ldd	r19, Z+5	; 0x05
 81a:	42 17       	cp	r20, r18
 81c:	53 07       	cpc	r21, r19
 81e:	44 f4       	brge	.+16     	; 0x830 <fputc+0x38>
 820:	a0 81       	ld	r26, Z
 822:	b1 81       	ldd	r27, Z+1	; 0x01
 824:	9d 01       	movw	r18, r26
 826:	2f 5f       	subi	r18, 0xFF	; 255
 828:	3f 4f       	sbci	r19, 0xFF	; 255
 82a:	31 83       	std	Z+1, r19	; 0x01
 82c:	20 83       	st	Z, r18
 82e:	8c 93       	st	X, r24
 830:	26 81       	ldd	r18, Z+6	; 0x06
 832:	37 81       	ldd	r19, Z+7	; 0x07
 834:	2f 5f       	subi	r18, 0xFF	; 255
 836:	3f 4f       	sbci	r19, 0xFF	; 255
 838:	37 83       	std	Z+7, r19	; 0x07
 83a:	26 83       	std	Z+6, r18	; 0x06
 83c:	14 c0       	rjmp	.+40     	; 0x866 <fputc+0x6e>
 83e:	8b 01       	movw	r16, r22
 840:	ec 01       	movw	r28, r24
 842:	fb 01       	movw	r30, r22
 844:	00 84       	ldd	r0, Z+8	; 0x08
 846:	f1 85       	ldd	r31, Z+9	; 0x09
 848:	e0 2d       	mov	r30, r0
 84a:	09 95       	icall
 84c:	89 2b       	or	r24, r25
 84e:	e1 f6       	brne	.-72     	; 0x808 <fputc+0x10>
 850:	d8 01       	movw	r26, r16
 852:	16 96       	adiw	r26, 0x06	; 6
 854:	8d 91       	ld	r24, X+
 856:	9c 91       	ld	r25, X
 858:	17 97       	sbiw	r26, 0x07	; 7
 85a:	01 96       	adiw	r24, 0x01	; 1
 85c:	17 96       	adiw	r26, 0x07	; 7
 85e:	9c 93       	st	X, r25
 860:	8e 93       	st	-X, r24
 862:	16 97       	sbiw	r26, 0x06	; 6
 864:	ce 01       	movw	r24, r28
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	1f 91       	pop	r17
 86c:	0f 91       	pop	r16
 86e:	08 95       	ret

00000870 <__ultoa_invert>:
 870:	fa 01       	movw	r30, r20
 872:	aa 27       	eor	r26, r26
 874:	28 30       	cpi	r18, 0x08	; 8
 876:	51 f1       	breq	.+84     	; 0x8cc <__ultoa_invert+0x5c>
 878:	20 31       	cpi	r18, 0x10	; 16
 87a:	81 f1       	breq	.+96     	; 0x8dc <__ultoa_invert+0x6c>
 87c:	e8 94       	clt
 87e:	6f 93       	push	r22
 880:	6e 7f       	andi	r22, 0xFE	; 254
 882:	6e 5f       	subi	r22, 0xFE	; 254
 884:	7f 4f       	sbci	r23, 0xFF	; 255
 886:	8f 4f       	sbci	r24, 0xFF	; 255
 888:	9f 4f       	sbci	r25, 0xFF	; 255
 88a:	af 4f       	sbci	r26, 0xFF	; 255
 88c:	b1 e0       	ldi	r27, 0x01	; 1
 88e:	3e d0       	rcall	.+124    	; 0x90c <__ultoa_invert+0x9c>
 890:	b4 e0       	ldi	r27, 0x04	; 4
 892:	3c d0       	rcall	.+120    	; 0x90c <__ultoa_invert+0x9c>
 894:	67 0f       	add	r22, r23
 896:	78 1f       	adc	r23, r24
 898:	89 1f       	adc	r24, r25
 89a:	9a 1f       	adc	r25, r26
 89c:	a1 1d       	adc	r26, r1
 89e:	68 0f       	add	r22, r24
 8a0:	79 1f       	adc	r23, r25
 8a2:	8a 1f       	adc	r24, r26
 8a4:	91 1d       	adc	r25, r1
 8a6:	a1 1d       	adc	r26, r1
 8a8:	6a 0f       	add	r22, r26
 8aa:	71 1d       	adc	r23, r1
 8ac:	81 1d       	adc	r24, r1
 8ae:	91 1d       	adc	r25, r1
 8b0:	a1 1d       	adc	r26, r1
 8b2:	20 d0       	rcall	.+64     	; 0x8f4 <__ultoa_invert+0x84>
 8b4:	09 f4       	brne	.+2      	; 0x8b8 <__ultoa_invert+0x48>
 8b6:	68 94       	set
 8b8:	3f 91       	pop	r19
 8ba:	2a e0       	ldi	r18, 0x0A	; 10
 8bc:	26 9f       	mul	r18, r22
 8be:	11 24       	eor	r1, r1
 8c0:	30 19       	sub	r19, r0
 8c2:	30 5d       	subi	r19, 0xD0	; 208
 8c4:	31 93       	st	Z+, r19
 8c6:	de f6       	brtc	.-74     	; 0x87e <__ultoa_invert+0xe>
 8c8:	cf 01       	movw	r24, r30
 8ca:	08 95       	ret
 8cc:	46 2f       	mov	r20, r22
 8ce:	47 70       	andi	r20, 0x07	; 7
 8d0:	40 5d       	subi	r20, 0xD0	; 208
 8d2:	41 93       	st	Z+, r20
 8d4:	b3 e0       	ldi	r27, 0x03	; 3
 8d6:	0f d0       	rcall	.+30     	; 0x8f6 <__ultoa_invert+0x86>
 8d8:	c9 f7       	brne	.-14     	; 0x8cc <__ultoa_invert+0x5c>
 8da:	f6 cf       	rjmp	.-20     	; 0x8c8 <__ultoa_invert+0x58>
 8dc:	46 2f       	mov	r20, r22
 8de:	4f 70       	andi	r20, 0x0F	; 15
 8e0:	40 5d       	subi	r20, 0xD0	; 208
 8e2:	4a 33       	cpi	r20, 0x3A	; 58
 8e4:	18 f0       	brcs	.+6      	; 0x8ec <__ultoa_invert+0x7c>
 8e6:	49 5d       	subi	r20, 0xD9	; 217
 8e8:	31 fd       	sbrc	r19, 1
 8ea:	40 52       	subi	r20, 0x20	; 32
 8ec:	41 93       	st	Z+, r20
 8ee:	02 d0       	rcall	.+4      	; 0x8f4 <__ultoa_invert+0x84>
 8f0:	a9 f7       	brne	.-22     	; 0x8dc <__ultoa_invert+0x6c>
 8f2:	ea cf       	rjmp	.-44     	; 0x8c8 <__ultoa_invert+0x58>
 8f4:	b4 e0       	ldi	r27, 0x04	; 4
 8f6:	a6 95       	lsr	r26
 8f8:	97 95       	ror	r25
 8fa:	87 95       	ror	r24
 8fc:	77 95       	ror	r23
 8fe:	67 95       	ror	r22
 900:	ba 95       	dec	r27
 902:	c9 f7       	brne	.-14     	; 0x8f6 <__ultoa_invert+0x86>
 904:	00 97       	sbiw	r24, 0x00	; 0
 906:	61 05       	cpc	r22, r1
 908:	71 05       	cpc	r23, r1
 90a:	08 95       	ret
 90c:	9b 01       	movw	r18, r22
 90e:	ac 01       	movw	r20, r24
 910:	0a 2e       	mov	r0, r26
 912:	06 94       	lsr	r0
 914:	57 95       	ror	r21
 916:	47 95       	ror	r20
 918:	37 95       	ror	r19
 91a:	27 95       	ror	r18
 91c:	ba 95       	dec	r27
 91e:	c9 f7       	brne	.-14     	; 0x912 <__ultoa_invert+0xa2>
 920:	62 0f       	add	r22, r18
 922:	73 1f       	adc	r23, r19
 924:	84 1f       	adc	r24, r20
 926:	95 1f       	adc	r25, r21
 928:	a0 1d       	adc	r26, r0
 92a:	08 95       	ret

0000092c <_exit>:
 92c:	f8 94       	cli

0000092e <__stop_program>:
 92e:	ff cf       	rjmp	.-2      	; 0x92e <__stop_program>
