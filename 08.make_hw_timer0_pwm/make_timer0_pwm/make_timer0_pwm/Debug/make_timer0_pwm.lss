
make_timer0_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000087b  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e1  00000000  00000000  00000abb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028b  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001528  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fe  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006d  00000000  00000000  0000197e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000019eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	36 c0       	rjmp	.+108    	; 0xae <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	2b d0       	rcall	.+86     	; 0x100 <main>
  aa:	3e c0       	rjmp	.+124    	; 0x128 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_16>:
#include <string.h> // strcpy, strcat, strcmp 등이 들어 있음

// 16.4ms 마다 이곳으로 진입 
volatile int tim_16ms = 0; 
ISR(TIMER0_OVF_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
	TCNT0 = 0; // CTC mode가 아닌 경우 무조건 초기화 시켜주어야 한다.
  bc:	12 be       	out	0x32, r1	; 50
	tim_16ms++; // int 마다 1씩 증가 
  be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
}
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <init_timer0_pwm>:
// OC0 : PWM 파형 출력 신호 PB.4 으로 출력을 설정 
void init_timer0_pwm(void)
{
	// 파형 출력 핀 PB.4 (OC0)을 출력으로 설정
	DDRB |= (1 << 4); // timer 0번 설정 
  de:	87 b3       	in	r24, 0x17	; 23
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	87 bb       	out	0x17, r24	; 23
	//  타이머/카운터 0번을 고속 PWM 모드로 설정 
	TCCR0 |= (1<< WGM01) | (1 << WGM00); 
  e4:	83 b7       	in	r24, 0x33	; 51
  e6:	88 64       	ori	r24, 0x48	; 72
  e8:	83 bf       	out	0x33, r24	; 51
	// 비반전 mode 설정 / 비교 일치 발생 시 OCn 핀의 출력은 LOW 값으로 바뀌고, BOTTOM에서 HIGH 값으로 바뀐다 / (1,0)
	TCCR0 |= (1<< COM01); // P344 표 15-4 
  ea:	83 b7       	in	r24, 0x33	; 51
  ec:	80 62       	ori	r24, 0x20	; 32
  ee:	83 bf       	out	0x33, r24	; 51
	// 분주비 1024 설정 16000000/1024(분주비) = 15625Hz 
	// t = 1/15625 = 64usec 
	// 8bit Timer/count / 64u * 256 = 16.4ms 마다 Timer0 Overflow interrupt가 발생 
	TCCR0 |= (1 << CS02) | (1 << CS01) | (1 << CS00);
  f0:	83 b7       	in	r24, 0x33	; 51
  f2:	87 60       	ori	r24, 0x07	; 7
  f4:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << TOIE0); // Timer overflow interrupt enable No.0 활성 
  f6:	87 b7       	in	r24, 0x37	; 55
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0; // Timer count initial 
  fc:	12 be       	out	0x32, r1	; 50
  fe:	08 95       	ret

00000100 <main>:
int main(void)
{
	int dim = 0; 
	int direction = 1;
	
	init_timer0_pwm();
 100:	ee df       	rcall	.-36     	; 0xde <init_timer0_pwm>
	sei();
 102:	78 94       	sei
	
	OCR0 = dim; // overflow compare register 
 104:	11 be       	out	0x31, r1	; 49
	TIMSK |= (1 << TOIE0); // Timer overflow interrupt enable No.0 활성 
	TCNT0 = 0; // Timer count initial 
}
int main(void)
{
	int dim = 0; 
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
    while (1) 
    {
		// duty cycle 설정 : 1클럭 64us 
		// 초기 OCR0 : 1(64us) 부터 OCR0 : 255(16.4ms) 까지 
		// 16.4ms단위로 서서히 밝아 지도록 한다. OCR0 : 0 ==> 255
		if(tim_16ms >= 1)
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 112:	18 16       	cp	r1, r24
 114:	19 06       	cpc	r1, r25
 116:	cc f7       	brge	.-14     	; 0x10a <main+0xa>
		{
			tim_16ms = 0; 
 118:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			OCR0 = dim; 
 120:	21 bf       	out	0x31, r18	; 49
			dim += direction; // 밝기 변화 
 122:	2f 5f       	subi	r18, 0xFF	; 255
 124:	3f 4f       	sbci	r19, 0xFF	; 255
 126:	f1 cf       	rjmp	.-30     	; 0x10a <main+0xa>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
