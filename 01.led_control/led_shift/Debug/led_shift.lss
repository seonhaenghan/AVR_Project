
led_shift.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000095a  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000829  00000000  00000000  00000b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031d  00000000  00000000  0000138b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000016a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042c  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001bf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	36 d0       	rcall	.+108    	; 0x106 <main>
  9a:	3a c0       	rjmp	.+116    	; 0x110 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <shift_light_left_on>:
		shift_light_right_on();
    }
}
void shift_light_left_on(void)
{
	for(int i = 0; i < 8; i ++)
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	13 c0       	rjmp	.+38     	; 0xca <shift_light_left_on+0x2c>
	{
		PORTA = 0x01 << i;
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	08 2e       	mov	r0, r24
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <shift_light_left_on+0x12>
  ac:	22 0f       	add	r18, r18
  ae:	33 1f       	adc	r19, r19
  b0:	0a 94       	dec	r0
  b2:	e2 f7       	brpl	.-8      	; 0xac <shift_light_left_on+0xe>
  b4:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	33 ec       	ldi	r19, 0xC3	; 195
  ba:	49 e0       	ldi	r20, 0x09	; 9
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	30 40       	sbci	r19, 0x00	; 0
  c0:	40 40       	sbci	r20, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <shift_light_left_on+0x1e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <shift_light_left_on+0x28>
  c6:	00 00       	nop
		shift_light_right_on();
    }
}
void shift_light_left_on(void)
{
	for(int i = 0; i < 8; i ++)
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	88 30       	cpi	r24, 0x08	; 8
  cc:	91 05       	cpc	r25, r1
  ce:	54 f3       	brlt	.-44     	; 0xa4 <shift_light_left_on+0x6>
		PORTA = 0x01 << i;
		_delay_ms(200);
		
	}
	
}
  d0:	08 95       	ret

000000d2 <shift_light_right_on>:

void shift_light_right_on(void)
{
	for(int i = 0; i < 8; i++)
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	13 c0       	rjmp	.+38     	; 0xfe <shift_light_right_on+0x2c>
	{
		PORTA = 0x80 >> i;
  d8:	20 e8       	ldi	r18, 0x80	; 128
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	08 2e       	mov	r0, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <shift_light_right_on+0x12>
  e0:	35 95       	asr	r19
  e2:	27 95       	ror	r18
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <shift_light_right_on+0xe>
  e8:	2b bb       	out	0x1b, r18	; 27
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	33 ec       	ldi	r19, 0xC3	; 195
  ee:	49 e0       	ldi	r20, 0x09	; 9
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	30 40       	sbci	r19, 0x00	; 0
  f4:	40 40       	sbci	r20, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <shift_light_right_on+0x1e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <shift_light_right_on+0x28>
  fa:	00 00       	nop
	
}

void shift_light_right_on(void)
{
	for(int i = 0; i < 8; i++)
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	88 30       	cpi	r24, 0x08	; 8
 100:	91 05       	cpc	r25, r1
 102:	54 f3       	brlt	.-44     	; 0xd8 <shift_light_right_on+0x6>
	{
		PORTA = 0x80 >> i;
		_delay_ms(200);
	}
	
}
 104:	08 95       	ret

00000106 <main>:
void shift_light_right_on(void)	;
					
int main(void)
{
	unsigned char led[]= {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
    DDRA = 0xff;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	8a bb       	out	0x1a, r24	; 26
    while (1) 
    {

		shift_light_left_on();
 10a:	c9 df       	rcall	.-110    	; 0x9e <shift_light_left_on>
		shift_light_right_on();
 10c:	e2 df       	rcall	.-60     	; 0xd2 <shift_light_right_on>
 10e:	fd cf       	rjmp	.-6      	; 0x10a <main+0x4>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
