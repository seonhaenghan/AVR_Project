
FND_COUNTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000b90  00000c24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800110  00800110  00000c34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dab  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a7  00000000  00000000  00001ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ed  00000000  00000000  0000246e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00002d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000517  00000000  00000000  00002e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ff  00000000  00000000  0000335f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000375e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5e c0       	rjmp	.+188    	; 0xbe <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	e0 01       	movw	r28, r0
  8e:	f2 01       	movw	r30, r4
  90:	12 02       	muls	r17, r18
  92:	33 02       	muls	r19, r19
  94:	54 02       	muls	r21, r20
  96:	75 02       	muls	r23, r21
  98:	96 02       	muls	r25, r22
  9a:	b7 02       	muls	r27, r23
  9c:	d8 02       	muls	r29, r24
  9e:	f9 02       	muls	r31, r25
  a0:	1a 03       	fmul	r17, r18
  a2:	3b 03       	fmul	r19, r19
  a4:	5c 03       	fmul	r21, r20
  a6:	74 03       	mulsu	r23, r20
  a8:	8c 03       	fmulsu	r16, r20
  aa:	a4 03       	fmuls	r18, r20
  ac:	bc 03       	fmulsu	r19, r20
  ae:	d4 03       	fmuls	r21, r20
  b0:	ec 03       	fmulsu	r22, r20
  b2:	04 04       	cpc	r0, r4
  b4:	1c 04       	cpc	r1, r12
  b6:	34 04       	cpc	r3, r4
  b8:	4c 04       	cpc	r4, r12
  ba:	63 04       	cpc	r6, r3
  bc:	7a 04       	cpc	r7, r10

000000be <__ctors_end>:
  be:	11 24       	eor	r1, r1
  c0:	1f be       	out	0x3f, r1	; 63
  c2:	cf ef       	ldi	r28, 0xFF	; 255
  c4:	d0 e1       	ldi	r29, 0x10	; 16
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
  ca:	11 e0       	ldi	r17, 0x01	; 1
  cc:	a0 e0       	ldi	r26, 0x00	; 0
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	e0 e9       	ldi	r30, 0x90	; 144
  d2:	fb e0       	ldi	r31, 0x0B	; 11
  d4:	00 e0       	ldi	r16, 0x00	; 0
  d6:	0b bf       	out	0x3b, r16	; 59
  d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x14>
  da:	07 90       	elpm	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	a0 31       	cpi	r26, 0x10	; 16
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0x10>

000000e4 <__do_clear_bss>:
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	a0 e1       	ldi	r26, 0x10	; 16
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	ae 32       	cpi	r26, 0x2E	; 46
  f0:	b2 07       	cpc	r27, r18
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	80 d4       	rcall	.+2304   	; 0x9f6 <main>
  f6:	4a c5       	rjmp	.+2708   	; 0xb8c <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <get_BUTTON1>:
{
	 
	static uint8_t prev_state = 0; // 버튼의 상태 0: OFF , 1 : ON / 함수 실행 후에도 값이 변하지 않음
	uint8_t current_state; // unsigned char와 동일함 == unsigned int 8bit  // unsigned char current_state 
	
	current_state = BUTTON_PIN & (1 << BUTTON1); // Button1의 값을 읽는다. , 읽었을 때 (0x10)
  fa:	80 b3       	in	r24, 0x10	; 16
  fc:	80 71       	andi	r24, 0x10	; 16
	
	if(prev_state == 0 && current_state != 0) // 버튼이 처음 눌려진 상태 	
  fe:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <prev_state.1735>
 102:	91 11       	cpse	r25, r1
 104:	11 c0       	rjmp	.+34     	; 0x128 <get_BUTTON1+0x2e>
 106:	88 23       	and	r24, r24
 108:	79 f0       	breq	.+30     	; 0x128 <get_BUTTON1+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	8d ee       	ldi	r24, 0xED	; 237
 10e:	92 e0       	ldi	r25, 0x02	; 2
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <get_BUTTON1+0x16>
 118:	00 c0       	rjmp	.+0      	; 0x11a <get_BUTTON1+0x20>
 11a:	00 00       	nop
	{
		_delay_ms(60);	// 노이즈가 지나가기를 기다림
		prev_state = 1; // 처음 눌러진 상태가 아니다. 
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <prev_state.1735>
		return 0;		// 아직은 진짜로 눌러진 상태가 아니라 0을 return 
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	08 95       	ret
		
	}
	else if(prev_state == 1 && current_state == 0) // 버튼이 눌렸다 떼어진 상태 
 128:	91 30       	cpi	r25, 0x01	; 1
 12a:	81 f4       	brne	.+32     	; 0x14c <get_BUTTON1+0x52>
 12c:	81 11       	cpse	r24, r1
 12e:	11 c0       	rjmp	.+34     	; 0x152 <get_BUTTON1+0x58>
	{
		prev_state = 0; 
 130:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <prev_state.1735>
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	86 e7       	ldi	r24, 0x76	; 118
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <get_BUTTON1+0x40>
 142:	00 c0       	rjmp	.+0      	; 0x144 <get_BUTTON1+0x4a>
 144:	00 00       	nop
		_delay_ms(30);	// 노이즈가 지나가기를 기다림
		return 1; // 완전히 눌렸다 떼어진 상태로 인정
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret
	}
	return 0; // 아직 완전히 sw 을 눌렀다 떼어지지 않은 상태
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
}
 156:	08 95       	ret

00000158 <get_BUTTON2>:
{
	 
	static uint8_t prev_state = 0;
	uint8_t current_state; // unsigned char와 동일함 == unsigned int 8bit  // unsigned char current_state
	
	current_state = BUTTON_PIN & (1 << BUTTON2); // Button1의 값을 읽는다. , 읽었을 때 (0x10)
 158:	80 b3       	in	r24, 0x10	; 16
 15a:	80 72       	andi	r24, 0x20	; 32
	
	if(prev_state == 0 && current_state != 0) // 버튼이 처음 눌려진 상태
 15c:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <__data_end>
 160:	91 11       	cpse	r25, r1
 162:	11 c0       	rjmp	.+34     	; 0x186 <get_BUTTON2+0x2e>
 164:	88 23       	and	r24, r24
 166:	79 f0       	breq	.+30     	; 0x186 <get_BUTTON2+0x2e>
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	8d ee       	ldi	r24, 0xED	; 237
 16c:	92 e0       	ldi	r25, 0x02	; 2
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <get_BUTTON2+0x16>
 176:	00 c0       	rjmp	.+0      	; 0x178 <get_BUTTON2+0x20>
 178:	00 00       	nop
	{
		_delay_ms(60);	// 노이즈가 지나가기를 기다림
		prev_state = 1; // 처음 눌러진 상태가 아니다.
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		return 0;		// 아직은 진짜로 눌러진 상태가 아니라 0을 return
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	08 95       	ret
		
	}
	else if(prev_state == 1 && current_state == 0) // 버튼이 눌렸다 떼어진 상태
 186:	91 30       	cpi	r25, 0x01	; 1
 188:	81 f4       	brne	.+32     	; 0x1aa <get_BUTTON2+0x52>
 18a:	81 11       	cpse	r24, r1
 18c:	11 c0       	rjmp	.+34     	; 0x1b0 <get_BUTTON2+0x58>
	{
		prev_state = 0;
 18e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	86 e7       	ldi	r24, 0x76	; 118
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <get_BUTTON2+0x40>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <get_BUTTON2+0x4a>
 1a2:	00 00       	nop
		_delay_ms(30);	// 노이즈가 지나가기를 기다림
		return 1; // 완전히 눌렸다 떼어진 상태로 인정
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	08 95       	ret
	}
	return 0; // 아직 완전히 sw 을 눌렀다 떼어지지 않은 상태
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	08 95       	ret
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
}
 1b4:	08 95       	ret

000001b6 <display_fnd>:
					
		}
}

void display_fnd(void)
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	2a 97       	sbiw	r28, 0x0a	; 10
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
	unsigned char fnd_font[] = {0xc0, 0xf9, 0xa4,0xb0, 0x99,0x92, 0x82, 0xd8, 0x80, 0x98};// 0123456789 fnd에 나타나는 문구
 1ca:	8a e0       	ldi	r24, 0x0A	; 10
 1cc:	e0 e0       	ldi	r30, 0x00	; 0
 1ce:	f1 e0       	ldi	r31, 0x01	; 1
 1d0:	de 01       	movw	r26, r28
 1d2:	11 96       	adiw	r26, 0x01	; 1
 1d4:	01 90       	ld	r0, Z+
 1d6:	0d 92       	st	X+, r0
 1d8:	8a 95       	dec	r24
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <display_fnd+0x1e>
// 
switch(digit_position)
 1dc:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <digit_position>
 1e0:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <digit_position+0x1>
 1e4:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <digit_position+0x2>
 1e8:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <digit_position+0x3>
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	91 05       	cpc	r25, r1
 1f0:	a1 05       	cpc	r26, r1
 1f2:	b1 05       	cpc	r27, r1
 1f4:	09 f4       	brne	.+2      	; 0x1f8 <display_fnd+0x42>
 1f6:	3d c0       	rjmp	.+122    	; 0x272 <display_fnd+0xbc>
 1f8:	60 f0       	brcs	.+24     	; 0x212 <display_fnd+0x5c>
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	91 05       	cpc	r25, r1
 1fe:	a1 05       	cpc	r26, r1
 200:	b1 05       	cpc	r27, r1
 202:	09 f4       	brne	.+2      	; 0x206 <display_fnd+0x50>
 204:	55 c0       	rjmp	.+170    	; 0x2b0 <display_fnd+0xfa>
 206:	03 97       	sbiw	r24, 0x03	; 3
 208:	a1 05       	cpc	r26, r1
 20a:	b1 05       	cpc	r27, r1
 20c:	09 f4       	brne	.+2      	; 0x210 <display_fnd+0x5a>
 20e:	6f c0       	rjmp	.+222    	; 0x2ee <display_fnd+0x138>
 210:	8c c0       	rjmp	.+280    	; 0x32a <display_fnd+0x174>
{
	case 0: // 1 단위
	
	FND_DIGHT_PORT = 0b10000000;
 212:	80 e8       	ldi	r24, 0x80	; 128
 214:	88 bb       	out	0x18, r24	; 24
	if(sec_count%2 == 0 )// 짝수에만 dot display
 216:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <sec_count>
 21a:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <sec_count+0x1>
 21e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <sec_count+0x2>
 222:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <sec_count+0x3>
 226:	60 fd       	sbrc	r22, 0
 228:	0e c0       	rjmp	.+28     	; 0x246 <display_fnd+0x90>
	{
		FND_DATA_PORT = fnd_font[sec_count%10] + 0b10000000; // 0~9
 22a:	2a e0       	ldi	r18, 0x0A	; 10
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	81 d4       	rcall	.+2306   	; 0xb36 <__udivmodsi4>
 234:	e1 e0       	ldi	r30, 0x01	; 1
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	ec 0f       	add	r30, r28
 23a:	fd 1f       	adc	r31, r29
 23c:	e6 0f       	add	r30, r22
 23e:	f7 1f       	adc	r31, r23
 240:	80 81       	ld	r24, Z
 242:	80 58       	subi	r24, 0x80	; 128
 244:	85 bb       	out	0x15, r24	; 21
	}
	FND_DATA_PORT = fnd_font[sec_count%10];
 246:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <sec_count>
 24a:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <sec_count+0x1>
 24e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <sec_count+0x2>
 252:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <sec_count+0x3>
 256:	2a e0       	ldi	r18, 0x0A	; 10
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	50 e0       	ldi	r21, 0x00	; 0
 25e:	6b d4       	rcall	.+2262   	; 0xb36 <__udivmodsi4>
 260:	e1 e0       	ldi	r30, 0x01	; 1
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	ec 0f       	add	r30, r28
 266:	fd 1f       	adc	r31, r29
 268:	e6 0f       	add	r30, r22
 26a:	f7 1f       	adc	r31, r23
 26c:	80 81       	ld	r24, Z
 26e:	85 bb       	out	0x15, r24	; 21
	break;
 270:	5c c0       	rjmp	.+184    	; 0x32a <display_fnd+0x174>

	case 1: // 10 단위
	FND_DIGHT_PORT = 0b01000000;
 272:	80 e4       	ldi	r24, 0x40	; 64
 274:	88 bb       	out	0x18, r24	; 24
	FND_DATA_PORT = fnd_font[sec_count/10%6]; // 초 10 단위
 276:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <sec_count>
 27a:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <sec_count+0x1>
 27e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <sec_count+0x2>
 282:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <sec_count+0x3>
 286:	2a e0       	ldi	r18, 0x0A	; 10
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	50 e0       	ldi	r21, 0x00	; 0
 28e:	53 d4       	rcall	.+2214   	; 0xb36 <__udivmodsi4>
 290:	ca 01       	movw	r24, r20
 292:	b9 01       	movw	r22, r18
 294:	26 e0       	ldi	r18, 0x06	; 6
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	50 e0       	ldi	r21, 0x00	; 0
 29c:	4c d4       	rcall	.+2200   	; 0xb36 <__udivmodsi4>
 29e:	e1 e0       	ldi	r30, 0x01	; 1
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	ec 0f       	add	r30, r28
 2a4:	fd 1f       	adc	r31, r29
 2a6:	e6 0f       	add	r30, r22
 2a8:	f7 1f       	adc	r31, r23
 2aa:	80 81       	ld	r24, Z
 2ac:	85 bb       	out	0x15, r24	; 21
	break;
 2ae:	3d c0       	rjmp	.+122    	; 0x32a <display_fnd+0x174>

	case 2: // 100 단위
	FND_DIGHT_PORT = 0b00100000;
 2b0:	80 e2       	ldi	r24, 0x20	; 32
 2b2:	88 bb       	out	0x18, r24	; 24
	FND_DATA_PORT = fnd_font[sec_count/60%10]; // 분 1자리
 2b4:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <sec_count>
 2b8:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <sec_count+0x1>
 2bc:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <sec_count+0x2>
 2c0:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <sec_count+0x3>
 2c4:	2c e3       	ldi	r18, 0x3C	; 60
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	34 d4       	rcall	.+2152   	; 0xb36 <__udivmodsi4>
 2ce:	ca 01       	movw	r24, r20
 2d0:	b9 01       	movw	r22, r18
 2d2:	2a e0       	ldi	r18, 0x0A	; 10
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	40 e0       	ldi	r20, 0x00	; 0
 2d8:	50 e0       	ldi	r21, 0x00	; 0
 2da:	2d d4       	rcall	.+2138   	; 0xb36 <__udivmodsi4>
 2dc:	e1 e0       	ldi	r30, 0x01	; 1
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	ec 0f       	add	r30, r28
 2e2:	fd 1f       	adc	r31, r29
 2e4:	e6 0f       	add	r30, r22
 2e6:	f7 1f       	adc	r31, r23
 2e8:	80 81       	ld	r24, Z
 2ea:	85 bb       	out	0x15, r24	; 21
	break;
 2ec:	1e c0       	rjmp	.+60     	; 0x32a <display_fnd+0x174>

	case 3: // 1000 단위
	FND_DIGHT_PORT = 0b00010000;
 2ee:	80 e1       	ldi	r24, 0x10	; 16
 2f0:	88 bb       	out	0x18, r24	; 24
	FND_DATA_PORT = fnd_font[sec_count/600%6]; // 분 10 자리
 2f2:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <sec_count>
 2f6:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <sec_count+0x1>
 2fa:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <sec_count+0x2>
 2fe:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <sec_count+0x3>
 302:	28 e5       	ldi	r18, 0x58	; 88
 304:	32 e0       	ldi	r19, 0x02	; 2
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	15 d4       	rcall	.+2090   	; 0xb36 <__udivmodsi4>
 30c:	ca 01       	movw	r24, r20
 30e:	b9 01       	movw	r22, r18
 310:	26 e0       	ldi	r18, 0x06	; 6
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	0e d4       	rcall	.+2076   	; 0xb36 <__udivmodsi4>
 31a:	e1 e0       	ldi	r30, 0x01	; 1
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	ec 0f       	add	r30, r28
 320:	fd 1f       	adc	r31, r29
 322:	e6 0f       	add	r30, r22
 324:	f7 1f       	adc	r31, r23
 326:	80 81       	ld	r24, Z
 328:	85 bb       	out	0x15, r24	; 21
	break;
}
digit_position++; // 다음 표시할 자리 수 // 잔상효과
 32a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <digit_position>
 32e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <digit_position+0x1>
 332:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <digit_position+0x2>
 336:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <digit_position+0x3>
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	a1 1d       	adc	r26, r1
 33e:	b1 1d       	adc	r27, r1
digit_position %= 4; //
 340:	83 70       	andi	r24, 0x03	; 3
 342:	99 27       	eor	r25, r25
 344:	aa 27       	eor	r26, r26
 346:	bb 27       	eor	r27, r27
 348:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <digit_position>
 34c:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <digit_position+0x1>
 350:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <digit_position+0x2>
 354:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <digit_position+0x3>

}
 358:	2a 96       	adiw	r28, 0x0a	; 10
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	de bf       	out	0x3e, r29	; 62
 360:	0f be       	out	0x3f, r0	; 63
 362:	cd bf       	out	0x3d, r28	; 61
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <init_fnd>:


void init_fnd(void)
{
	FND_DATA_DDR = 0xff;   // 출력모드 사용 
 36a:	9f ef       	ldi	r25, 0xFF	; 255
 36c:	94 bb       	out	0x14, r25	; 20
	FND_DIGHT_DDR |= 0xf0; // 7564만 1로 나머지 3210은 그대로 유지
 36e:	87 b3       	in	r24, 0x17	; 23
 370:	80 6f       	ori	r24, 0xF0	; 240
 372:	87 bb       	out	0x17, r24	; 23
	FND_DATA_PORT = ~0x00; // fnd all off // Com cathode 의 경우 1이 input되어야 led on >> 0x00
 374:	95 bb       	out	0x15, r25	; 21
 376:	08 95       	ret

00000378 <box_s1>:
}

void box_s1(void)
{
 378:	cf 92       	push	r12
 37a:	df 92       	push	r13
 37c:	ef 92       	push	r14
 37e:	ff 92       	push	r15
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	00 d0       	rcall	.+0      	; 0x386 <box_s1+0xe>
 386:	00 d0       	rcall	.+0      	; 0x388 <box_s1+0x10>
 388:	00 d0       	rcall	.+0      	; 0x38a <box_s1+0x12>
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
		unsigned char box_font[] = {~0x01, ~0x02, ~0x04, ~0x08, ~0x10, ~0x20};// 0123456789 fnd에 나타나는 문구
 38e:	86 e0       	ldi	r24, 0x06	; 6
 390:	ea e0       	ldi	r30, 0x0A	; 10
 392:	f1 e0       	ldi	r31, 0x01	; 1
 394:	de 01       	movw	r26, r28
 396:	11 96       	adiw	r26, 0x01	; 1
 398:	01 90       	ld	r0, Z+
 39a:	0d 92       	st	X+, r0
 39c:	8a 95       	dec	r24
 39e:	e1 f7       	brne	.-8      	; 0x398 <box_s1+0x20>
		//
		switch(digit_position_box)
 3a0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <digit_position_box>
 3a4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <digit_position_box+0x1>
 3a8:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <digit_position_box+0x2>
 3ac:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <digit_position_box+0x3>
 3b0:	89 31       	cpi	r24, 0x19	; 25
 3b2:	91 05       	cpc	r25, r1
 3b4:	08 f0       	brcs	.+2      	; 0x3b8 <box_s1+0x40>
 3b6:	b4 c2       	rjmp	.+1384   	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 3b8:	fc 01       	movw	r30, r24
 3ba:	ea 5b       	subi	r30, 0xBA	; 186
 3bc:	ff 4f       	sbci	r31, 0xFF	; 255
 3be:	dd c3       	rjmp	.+1978   	; 0xb7a <__tablejump2__>
		{
			case 0: 
			if(sec_countb%25 >= 0 && sec_countb < 12)
 3c0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <sec_countb>
 3c4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <sec_countb+0x1>
 3c8:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <sec_countb+0x2>
 3cc:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <sec_countb+0x3>
 3d0:	0c 97       	sbiw	r24, 0x0c	; 12
 3d2:	a1 05       	cpc	r26, r1
 3d4:	b1 05       	cpc	r27, r1
 3d6:	08 f0       	brcs	.+2      	; 0x3da <box_s1+0x62>
 3d8:	a3 c2       	rjmp	.+1350   	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			{
				FND_DIGHT_PORT = 0b00010000;
 3da:	80 e1       	ldi	r24, 0x10	; 16
 3dc:	88 bb       	out	0x18, r24	; 24
				FND_DATA_PORT = box_font[0];
 3de:	89 81       	ldd	r24, Y+1	; 0x01
 3e0:	85 bb       	out	0x15, r24	; 21
 3e2:	9e c2       	rjmp	.+1340   	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			}
			break;
			
			case 1: 
			if(sec_countb%25 >= 1 && sec_countb < 12)
 3e4:	c0 90 1a 01 	lds	r12, 0x011A	; 0x80011a <sec_countb>
 3e8:	d0 90 1b 01 	lds	r13, 0x011B	; 0x80011b <sec_countb+0x1>
 3ec:	e0 90 1c 01 	lds	r14, 0x011C	; 0x80011c <sec_countb+0x2>
 3f0:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <sec_countb+0x3>
 3f4:	c7 01       	movw	r24, r14
 3f6:	b6 01       	movw	r22, r12
 3f8:	29 e1       	ldi	r18, 0x19	; 25
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	9a d3       	rcall	.+1844   	; 0xb36 <__udivmodsi4>
 402:	67 2b       	or	r22, r23
 404:	68 2b       	or	r22, r24
 406:	69 2b       	or	r22, r25
 408:	09 f4       	brne	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	8a c2       	rjmp	.+1300   	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 40c:	8c e0       	ldi	r24, 0x0C	; 12
 40e:	c8 16       	cp	r12, r24
 410:	d1 04       	cpc	r13, r1
 412:	e1 04       	cpc	r14, r1
 414:	f1 04       	cpc	r15, r1
 416:	08 f0       	brcs	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 418:	83 c2       	rjmp	.+1286   	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			{
				FND_DIGHT_PORT = 0b00100000;
 41a:	80 e2       	ldi	r24, 0x20	; 32
 41c:	88 bb       	out	0x18, r24	; 24
				FND_DATA_PORT = box_font[0];
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	85 bb       	out	0x15, r24	; 21
 422:	7e c2       	rjmp	.+1276   	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			}
			
			break;

			case 2:
			if(sec_countb%25 >= 2 && sec_countb < 12)
 424:	c0 90 1a 01 	lds	r12, 0x011A	; 0x80011a <sec_countb>
 428:	d0 90 1b 01 	lds	r13, 0x011B	; 0x80011b <sec_countb+0x1>
 42c:	e0 90 1c 01 	lds	r14, 0x011C	; 0x80011c <sec_countb+0x2>
 430:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <sec_countb+0x3>
 434:	c7 01       	movw	r24, r14
 436:	b6 01       	movw	r22, r12
 438:	29 e1       	ldi	r18, 0x19	; 25
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	50 e0       	ldi	r21, 0x00	; 0
 440:	7a d3       	rcall	.+1780   	; 0xb36 <__udivmodsi4>
 442:	62 30       	cpi	r22, 0x02	; 2
 444:	71 05       	cpc	r23, r1
 446:	81 05       	cpc	r24, r1
 448:	91 05       	cpc	r25, r1
 44a:	08 f4       	brcc	.+2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44c:	69 c2       	rjmp	.+1234   	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 44e:	8c e0       	ldi	r24, 0x0C	; 12
 450:	c8 16       	cp	r12, r24
 452:	d1 04       	cpc	r13, r1
 454:	e1 04       	cpc	r14, r1
 456:	f1 04       	cpc	r15, r1
 458:	08 f0       	brcs	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 45a:	62 c2       	rjmp	.+1220   	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			{
				FND_DIGHT_PORT = 0b01000000;
 45c:	80 e4       	ldi	r24, 0x40	; 64
 45e:	88 bb       	out	0x18, r24	; 24
				FND_DATA_PORT = box_font[0];
 460:	89 81       	ldd	r24, Y+1	; 0x01
 462:	85 bb       	out	0x15, r24	; 21
 464:	5d c2       	rjmp	.+1210   	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			}
			
			break;

			case 3: // 1000 단위			
			if(sec_countb%25 >= 3 && sec_countb < 12)
 466:	c0 90 1a 01 	lds	r12, 0x011A	; 0x80011a <sec_countb>
 46a:	d0 90 1b 01 	lds	r13, 0x011B	; 0x80011b <sec_countb+0x1>
 46e:	e0 90 1c 01 	lds	r14, 0x011C	; 0x80011c <sec_countb+0x2>
 472:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <sec_countb+0x3>
 476:	c7 01       	movw	r24, r14
 478:	b6 01       	movw	r22, r12
 47a:	29 e1       	ldi	r18, 0x19	; 25
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	40 e0       	ldi	r20, 0x00	; 0
 480:	50 e0       	ldi	r21, 0x00	; 0
 482:	59 d3       	rcall	.+1714   	; 0xb36 <__udivmodsi4>
 484:	63 30       	cpi	r22, 0x03	; 3
 486:	71 05       	cpc	r23, r1
 488:	81 05       	cpc	r24, r1
 48a:	91 05       	cpc	r25, r1
 48c:	08 f4       	brcc	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 48e:	48 c2       	rjmp	.+1168   	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 490:	8c e0       	ldi	r24, 0x0C	; 12
 492:	c8 16       	cp	r12, r24
 494:	d1 04       	cpc	r13, r1
 496:	e1 04       	cpc	r14, r1
 498:	f1 04       	cpc	r15, r1
 49a:	08 f0       	brcs	.+2      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49c:	41 c2       	rjmp	.+1154   	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			{
				FND_DIGHT_PORT = 0b10000000;
 49e:	80 e8       	ldi	r24, 0x80	; 128
 4a0:	88 bb       	out	0x18, r24	; 24
				FND_DATA_PORT = box_font[0];
 4a2:	89 81       	ldd	r24, Y+1	; 0x01
 4a4:	85 bb       	out	0x15, r24	; 21
 4a6:	3c c2       	rjmp	.+1144   	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			}
			break;
			
			case 4: // 1 단위		
			if(sec_countb%25 >= 4 && sec_countb < 12)
 4a8:	c0 90 1a 01 	lds	r12, 0x011A	; 0x80011a <sec_countb>
 4ac:	d0 90 1b 01 	lds	r13, 0x011B	; 0x80011b <sec_countb+0x1>
 4b0:	e0 90 1c 01 	lds	r14, 0x011C	; 0x80011c <sec_countb+0x2>
 4b4:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <sec_countb+0x3>
 4b8:	c7 01       	movw	r24, r14
 4ba:	b6 01       	movw	r22, r12
 4bc:	29 e1       	ldi	r18, 0x19	; 25
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	40 e0       	ldi	r20, 0x00	; 0
 4c2:	50 e0       	ldi	r21, 0x00	; 0
 4c4:	38 d3       	rcall	.+1648   	; 0xb36 <__udivmodsi4>
 4c6:	64 30       	cpi	r22, 0x04	; 4
 4c8:	71 05       	cpc	r23, r1
 4ca:	81 05       	cpc	r24, r1
 4cc:	91 05       	cpc	r25, r1
 4ce:	08 f4       	brcc	.+2      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4d0:	27 c2       	rjmp	.+1102   	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 4d2:	8c e0       	ldi	r24, 0x0C	; 12
 4d4:	c8 16       	cp	r12, r24
 4d6:	d1 04       	cpc	r13, r1
 4d8:	e1 04       	cpc	r14, r1
 4da:	f1 04       	cpc	r15, r1
 4dc:	08 f0       	brcs	.+2      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4de:	20 c2       	rjmp	.+1088   	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			{
				FND_DIGHT_PORT = 0b10000000;
 4e0:	80 e8       	ldi	r24, 0x80	; 128
 4e2:	88 bb       	out	0x18, r24	; 24
				FND_DATA_PORT = box_font[1];
 4e4:	8a 81       	ldd	r24, Y+2	; 0x02
 4e6:	85 bb       	out	0x15, r24	; 21
 4e8:	1b c2       	rjmp	.+1078   	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			}			
			break;

			case 5: 
			if(sec_countb%25 >= 5 && sec_countb < 12)
 4ea:	c0 90 1a 01 	lds	r12, 0x011A	; 0x80011a <sec_countb>
 4ee:	d0 90 1b 01 	lds	r13, 0x011B	; 0x80011b <sec_countb+0x1>
 4f2:	e0 90 1c 01 	lds	r14, 0x011C	; 0x80011c <sec_countb+0x2>
 4f6:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <sec_countb+0x3>
 4fa:	c7 01       	movw	r24, r14
 4fc:	b6 01       	movw	r22, r12
 4fe:	29 e1       	ldi	r18, 0x19	; 25
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	40 e0       	ldi	r20, 0x00	; 0
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	17 d3       	rcall	.+1582   	; 0xb36 <__udivmodsi4>
 508:	65 30       	cpi	r22, 0x05	; 5
 50a:	71 05       	cpc	r23, r1
 50c:	81 05       	cpc	r24, r1
 50e:	91 05       	cpc	r25, r1
 510:	08 f4       	brcc	.+2      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 512:	06 c2       	rjmp	.+1036   	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 514:	8c e0       	ldi	r24, 0x0C	; 12
 516:	c8 16       	cp	r12, r24
 518:	d1 04       	cpc	r13, r1
 51a:	e1 04       	cpc	r14, r1
 51c:	f1 04       	cpc	r15, r1
 51e:	08 f0       	brcs	.+2      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 520:	ff c1       	rjmp	.+1022   	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			{
				FND_DIGHT_PORT = 0b10000000;
 522:	80 e8       	ldi	r24, 0x80	; 128
 524:	88 bb       	out	0x18, r24	; 24
				FND_DATA_PORT = box_font[2];
 526:	8b 81       	ldd	r24, Y+3	; 0x03
 528:	85 bb       	out	0x15, r24	; 21
 52a:	fa c1       	rjmp	.+1012   	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			}			
			break;

			case 6: // 100 단위	
			if(sec_countb%25 >= 6 && sec_countb < 12)
 52c:	c0 90 1a 01 	lds	r12, 0x011A	; 0x80011a <sec_countb>
 530:	d0 90 1b 01 	lds	r13, 0x011B	; 0x80011b <sec_countb+0x1>
 534:	e0 90 1c 01 	lds	r14, 0x011C	; 0x80011c <sec_countb+0x2>
 538:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <sec_countb+0x3>
 53c:	c7 01       	movw	r24, r14
 53e:	b6 01       	movw	r22, r12
 540:	29 e1       	ldi	r18, 0x19	; 25
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	40 e0       	ldi	r20, 0x00	; 0
 546:	50 e0       	ldi	r21, 0x00	; 0
 548:	f6 d2       	rcall	.+1516   	; 0xb36 <__udivmodsi4>
 54a:	66 30       	cpi	r22, 0x06	; 6
 54c:	71 05       	cpc	r23, r1
 54e:	81 05       	cpc	r24, r1
 550:	91 05       	cpc	r25, r1
 552:	08 f4       	brcc	.+2      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 554:	e5 c1       	rjmp	.+970    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 556:	8c e0       	ldi	r24, 0x0C	; 12
 558:	c8 16       	cp	r12, r24
 55a:	d1 04       	cpc	r13, r1
 55c:	e1 04       	cpc	r14, r1
 55e:	f1 04       	cpc	r15, r1
 560:	08 f0       	brcs	.+2      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 562:	de c1       	rjmp	.+956    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			{
				FND_DIGHT_PORT = 0b10000000;
 564:	80 e8       	ldi	r24, 0x80	; 128
 566:	88 bb       	out	0x18, r24	; 24
				FND_DATA_PORT = box_font[3];
 568:	8c 81       	ldd	r24, Y+4	; 0x04
 56a:	85 bb       	out	0x15, r24	; 21
 56c:	d9 c1       	rjmp	.+946    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			}			
			break;
			
			case 7: 
			if(sec_countb%25 >= 7 && sec_countb < 12)
 56e:	c0 90 1a 01 	lds	r12, 0x011A	; 0x80011a <sec_countb>
 572:	d0 90 1b 01 	lds	r13, 0x011B	; 0x80011b <sec_countb+0x1>
 576:	e0 90 1c 01 	lds	r14, 0x011C	; 0x80011c <sec_countb+0x2>
 57a:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <sec_countb+0x3>
 57e:	c7 01       	movw	r24, r14
 580:	b6 01       	movw	r22, r12
 582:	29 e1       	ldi	r18, 0x19	; 25
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	40 e0       	ldi	r20, 0x00	; 0
 588:	50 e0       	ldi	r21, 0x00	; 0
 58a:	d5 d2       	rcall	.+1450   	; 0xb36 <__udivmodsi4>
 58c:	67 30       	cpi	r22, 0x07	; 7
 58e:	71 05       	cpc	r23, r1
 590:	81 05       	cpc	r24, r1
 592:	91 05       	cpc	r25, r1
 594:	08 f4       	brcc	.+2      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 596:	c4 c1       	rjmp	.+904    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 598:	8c e0       	ldi	r24, 0x0C	; 12
 59a:	c8 16       	cp	r12, r24
 59c:	d1 04       	cpc	r13, r1
 59e:	e1 04       	cpc	r14, r1
 5a0:	f1 04       	cpc	r15, r1
 5a2:	08 f0       	brcs	.+2      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 5a4:	bd c1       	rjmp	.+890    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			{
				FND_DIGHT_PORT = 0b01000000;
 5a6:	80 e4       	ldi	r24, 0x40	; 64
 5a8:	88 bb       	out	0x18, r24	; 24
				FND_DATA_PORT = box_font[3];
 5aa:	8c 81       	ldd	r24, Y+4	; 0x04
 5ac:	85 bb       	out	0x15, r24	; 21
 5ae:	b8 c1       	rjmp	.+880    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			}			
			break;
			
			case 8: // 1 단위		
			if(sec_countb%25 >= 8 && sec_countb < 12)
 5b0:	c0 90 1a 01 	lds	r12, 0x011A	; 0x80011a <sec_countb>
 5b4:	d0 90 1b 01 	lds	r13, 0x011B	; 0x80011b <sec_countb+0x1>
 5b8:	e0 90 1c 01 	lds	r14, 0x011C	; 0x80011c <sec_countb+0x2>
 5bc:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <sec_countb+0x3>
 5c0:	c7 01       	movw	r24, r14
 5c2:	b6 01       	movw	r22, r12
 5c4:	29 e1       	ldi	r18, 0x19	; 25
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	40 e0       	ldi	r20, 0x00	; 0
 5ca:	50 e0       	ldi	r21, 0x00	; 0
 5cc:	b4 d2       	rcall	.+1384   	; 0xb36 <__udivmodsi4>
 5ce:	68 30       	cpi	r22, 0x08	; 8
 5d0:	71 05       	cpc	r23, r1
 5d2:	81 05       	cpc	r24, r1
 5d4:	91 05       	cpc	r25, r1
 5d6:	08 f4       	brcc	.+2      	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5d8:	a3 c1       	rjmp	.+838    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 5da:	8c e0       	ldi	r24, 0x0C	; 12
 5dc:	c8 16       	cp	r12, r24
 5de:	d1 04       	cpc	r13, r1
 5e0:	e1 04       	cpc	r14, r1
 5e2:	f1 04       	cpc	r15, r1
 5e4:	08 f0       	brcs	.+2      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5e6:	9c c1       	rjmp	.+824    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			{
				FND_DIGHT_PORT = 0b00100000;
 5e8:	80 e2       	ldi	r24, 0x20	; 32
 5ea:	88 bb       	out	0x18, r24	; 24
				FND_DATA_PORT = box_font[3];
 5ec:	8c 81       	ldd	r24, Y+4	; 0x04
 5ee:	85 bb       	out	0x15, r24	; 21
 5f0:	97 c1       	rjmp	.+814    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			}			
			break;

			case 9: 		
			if(sec_countb%25 >= 9 && sec_countb < 12)
 5f2:	c0 90 1a 01 	lds	r12, 0x011A	; 0x80011a <sec_countb>
 5f6:	d0 90 1b 01 	lds	r13, 0x011B	; 0x80011b <sec_countb+0x1>
 5fa:	e0 90 1c 01 	lds	r14, 0x011C	; 0x80011c <sec_countb+0x2>
 5fe:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <sec_countb+0x3>
 602:	c7 01       	movw	r24, r14
 604:	b6 01       	movw	r22, r12
 606:	29 e1       	ldi	r18, 0x19	; 25
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	40 e0       	ldi	r20, 0x00	; 0
 60c:	50 e0       	ldi	r21, 0x00	; 0
 60e:	93 d2       	rcall	.+1318   	; 0xb36 <__udivmodsi4>
 610:	69 30       	cpi	r22, 0x09	; 9
 612:	71 05       	cpc	r23, r1
 614:	81 05       	cpc	r24, r1
 616:	91 05       	cpc	r25, r1
 618:	08 f4       	brcc	.+2      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 61a:	82 c1       	rjmp	.+772    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 61c:	8c e0       	ldi	r24, 0x0C	; 12
 61e:	c8 16       	cp	r12, r24
 620:	d1 04       	cpc	r13, r1
 622:	e1 04       	cpc	r14, r1
 624:	f1 04       	cpc	r15, r1
 626:	08 f0       	brcs	.+2      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
 628:	7b c1       	rjmp	.+758    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			{
				FND_DIGHT_PORT = 0b00010000;
 62a:	80 e1       	ldi	r24, 0x10	; 16
 62c:	88 bb       	out	0x18, r24	; 24
				FND_DATA_PORT = box_font[3];
 62e:	8c 81       	ldd	r24, Y+4	; 0x04
 630:	85 bb       	out	0x15, r24	; 21
 632:	76 c1       	rjmp	.+748    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			}
			break;

			case 10: 			
			if(sec_countb%25 >= 10 && sec_countb < 12)
 634:	c0 90 1a 01 	lds	r12, 0x011A	; 0x80011a <sec_countb>
 638:	d0 90 1b 01 	lds	r13, 0x011B	; 0x80011b <sec_countb+0x1>
 63c:	e0 90 1c 01 	lds	r14, 0x011C	; 0x80011c <sec_countb+0x2>
 640:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <sec_countb+0x3>
 644:	c7 01       	movw	r24, r14
 646:	b6 01       	movw	r22, r12
 648:	29 e1       	ldi	r18, 0x19	; 25
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	40 e0       	ldi	r20, 0x00	; 0
 64e:	50 e0       	ldi	r21, 0x00	; 0
 650:	72 d2       	rcall	.+1252   	; 0xb36 <__udivmodsi4>
 652:	6a 30       	cpi	r22, 0x0A	; 10
 654:	71 05       	cpc	r23, r1
 656:	81 05       	cpc	r24, r1
 658:	91 05       	cpc	r25, r1
 65a:	08 f4       	brcc	.+2      	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
 65c:	61 c1       	rjmp	.+706    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 65e:	8c e0       	ldi	r24, 0x0C	; 12
 660:	c8 16       	cp	r12, r24
 662:	d1 04       	cpc	r13, r1
 664:	e1 04       	cpc	r14, r1
 666:	f1 04       	cpc	r15, r1
 668:	08 f0       	brcs	.+2      	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 66a:	5a c1       	rjmp	.+692    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			{
				FND_DIGHT_PORT = 0b00010000;
 66c:	80 e1       	ldi	r24, 0x10	; 16
 66e:	88 bb       	out	0x18, r24	; 24
				FND_DATA_PORT = box_font[4];
 670:	8d 81       	ldd	r24, Y+5	; 0x05
 672:	85 bb       	out	0x15, r24	; 21
 674:	55 c1       	rjmp	.+682    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			}
			
			break;

			case 11: 		
			if(sec_countb%25 >= 11 && sec_countb < 12)
 676:	c0 90 1a 01 	lds	r12, 0x011A	; 0x80011a <sec_countb>
 67a:	d0 90 1b 01 	lds	r13, 0x011B	; 0x80011b <sec_countb+0x1>
 67e:	e0 90 1c 01 	lds	r14, 0x011C	; 0x80011c <sec_countb+0x2>
 682:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <sec_countb+0x3>
 686:	c7 01       	movw	r24, r14
 688:	b6 01       	movw	r22, r12
 68a:	29 e1       	ldi	r18, 0x19	; 25
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	40 e0       	ldi	r20, 0x00	; 0
 690:	50 e0       	ldi	r21, 0x00	; 0
 692:	51 d2       	rcall	.+1186   	; 0xb36 <__udivmodsi4>
 694:	6b 30       	cpi	r22, 0x0B	; 11
 696:	71 05       	cpc	r23, r1
 698:	81 05       	cpc	r24, r1
 69a:	91 05       	cpc	r25, r1
 69c:	08 f4       	brcc	.+2      	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
 69e:	40 c1       	rjmp	.+640    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 6a0:	8c e0       	ldi	r24, 0x0C	; 12
 6a2:	c8 16       	cp	r12, r24
 6a4:	d1 04       	cpc	r13, r1
 6a6:	e1 04       	cpc	r14, r1
 6a8:	f1 04       	cpc	r15, r1
 6aa:	08 f0       	brcs	.+2      	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
 6ac:	39 c1       	rjmp	.+626    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			{
				FND_DIGHT_PORT = 0b00010000;
 6ae:	80 e1       	ldi	r24, 0x10	; 16
 6b0:	88 bb       	out	0x18, r24	; 24
				FND_DATA_PORT = box_font[5];
 6b2:	8e 81       	ldd	r24, Y+6	; 0x06
 6b4:	85 bb       	out	0x15, r24	; 21
 6b6:	34 c1       	rjmp	.+616    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			break;
			
			case 12: // 1 단위
			
			
			if(sec_countb%25 >= 12)
 6b8:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <sec_countb>
 6bc:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <sec_countb+0x1>
 6c0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_countb+0x2>
 6c4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_countb+0x3>
 6c8:	29 e1       	ldi	r18, 0x19	; 25
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	40 e0       	ldi	r20, 0x00	; 0
 6ce:	50 e0       	ldi	r21, 0x00	; 0
 6d0:	32 d2       	rcall	.+1124   	; 0xb36 <__udivmodsi4>
 6d2:	6c 30       	cpi	r22, 0x0C	; 12
 6d4:	71 05       	cpc	r23, r1
 6d6:	81 05       	cpc	r24, r1
 6d8:	91 05       	cpc	r25, r1
 6da:	08 f4       	brcc	.+2      	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
 6dc:	21 c1       	rjmp	.+578    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			{
				FND_DIGHT_PORT = 0b11110000;
 6de:	80 ef       	ldi	r24, 0xF0	; 240
 6e0:	88 bb       	out	0x18, r24	; 24
				FND_DATA_PORT = ~0x00;
 6e2:	8f ef       	ldi	r24, 0xFF	; 255
 6e4:	85 bb       	out	0x15, r24	; 21
			break;

			case 13: // 10 단위
			
			
			if(sec_countb%25 >= 13)
 6e6:	1c c1       	rjmp	.+568    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 6e8:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <sec_countb>
 6ec:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <sec_countb+0x1>
 6f0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_countb+0x2>
 6f4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_countb+0x3>
 6f8:	29 e1       	ldi	r18, 0x19	; 25
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	40 e0       	ldi	r20, 0x00	; 0
 6fe:	50 e0       	ldi	r21, 0x00	; 0
 700:	1a d2       	rcall	.+1076   	; 0xb36 <__udivmodsi4>
 702:	6d 30       	cpi	r22, 0x0D	; 13
 704:	71 05       	cpc	r23, r1
 706:	81 05       	cpc	r24, r1
 708:	91 05       	cpc	r25, r1
 70a:	08 f4       	brcc	.+2      	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
 70c:	09 c1       	rjmp	.+530    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			{
				FND_DIGHT_PORT = 0b00010000;
 70e:	80 e1       	ldi	r24, 0x10	; 16
 710:	88 bb       	out	0x18, r24	; 24
				FND_DATA_PORT = box_font[5];
 712:	8e 81       	ldd	r24, Y+6	; 0x06
 714:	85 bb       	out	0x15, r24	; 21
			break;

			case 14: // 100 단위
			
			
			if(sec_countb%25 >= 14)
 716:	04 c1       	rjmp	.+520    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 718:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <sec_countb>
 71c:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <sec_countb+0x1>
 720:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_countb+0x2>
 724:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_countb+0x3>
 728:	29 e1       	ldi	r18, 0x19	; 25
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	40 e0       	ldi	r20, 0x00	; 0
 72e:	50 e0       	ldi	r21, 0x00	; 0
 730:	02 d2       	rcall	.+1028   	; 0xb36 <__udivmodsi4>
 732:	6e 30       	cpi	r22, 0x0E	; 14
 734:	71 05       	cpc	r23, r1
 736:	81 05       	cpc	r24, r1
 738:	91 05       	cpc	r25, r1
 73a:	08 f4       	brcc	.+2      	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
 73c:	f1 c0       	rjmp	.+482    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			{
				FND_DIGHT_PORT = 0b00010000;
 73e:	80 e1       	ldi	r24, 0x10	; 16
 740:	88 bb       	out	0x18, r24	; 24
				FND_DATA_PORT = box_font[4];
 742:	8d 81       	ldd	r24, Y+5	; 0x05
 744:	85 bb       	out	0x15, r24	; 21
			break;

			case 15: // 1000 단위
			
			
			if(sec_countb%25 >= 15)
 746:	ec c0       	rjmp	.+472    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 748:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <sec_countb>
 74c:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <sec_countb+0x1>
 750:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_countb+0x2>
 754:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_countb+0x3>
 758:	29 e1       	ldi	r18, 0x19	; 25
 75a:	30 e0       	ldi	r19, 0x00	; 0
 75c:	40 e0       	ldi	r20, 0x00	; 0
 75e:	50 e0       	ldi	r21, 0x00	; 0
 760:	ea d1       	rcall	.+980    	; 0xb36 <__udivmodsi4>
 762:	6f 30       	cpi	r22, 0x0F	; 15
 764:	71 05       	cpc	r23, r1
 766:	81 05       	cpc	r24, r1
 768:	91 05       	cpc	r25, r1
 76a:	08 f4       	brcc	.+2      	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
 76c:	d9 c0       	rjmp	.+434    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			{
				FND_DIGHT_PORT = 0b00010000;
 76e:	80 e1       	ldi	r24, 0x10	; 16
				FND_DATA_PORT = box_font[3];
 770:	88 bb       	out	0x18, r24	; 24
 772:	8c 81       	ldd	r24, Y+4	; 0x04
 774:	85 bb       	out	0x15, r24	; 21
			break;
			
			case 16: // 1 단위
			
			
			if(sec_countb%25 >= 16)
 776:	d4 c0       	rjmp	.+424    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 778:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <sec_countb>
 77c:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <sec_countb+0x1>
 780:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_countb+0x2>
 784:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_countb+0x3>
 788:	29 e1       	ldi	r18, 0x19	; 25
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	40 e0       	ldi	r20, 0x00	; 0
 78e:	50 e0       	ldi	r21, 0x00	; 0
 790:	d2 d1       	rcall	.+932    	; 0xb36 <__udivmodsi4>
 792:	60 31       	cpi	r22, 0x10	; 16
 794:	71 05       	cpc	r23, r1
 796:	81 05       	cpc	r24, r1
 798:	91 05       	cpc	r25, r1
 79a:	08 f4       	brcc	.+2      	; 0x79e <__LOCK_REGION_LENGTH__+0x39e>
 79c:	c1 c0       	rjmp	.+386    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
			{
				FND_DIGHT_PORT = 0b00100000;
 79e:	80 e2       	ldi	r24, 0x20	; 32
				FND_DATA_PORT = box_font[3];
 7a0:	88 bb       	out	0x18, r24	; 24
 7a2:	8c 81       	ldd	r24, Y+4	; 0x04
 7a4:	85 bb       	out	0x15, r24	; 21
			break;

			case 17: // 10 단위
			
			
			if(sec_countb%25 >= 17)
 7a6:	bc c0       	rjmp	.+376    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 7a8:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <sec_countb>
 7ac:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <sec_countb+0x1>
 7b0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_countb+0x2>
 7b4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_countb+0x3>
 7b8:	29 e1       	ldi	r18, 0x19	; 25
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	40 e0       	ldi	r20, 0x00	; 0
 7be:	50 e0       	ldi	r21, 0x00	; 0
 7c0:	ba d1       	rcall	.+884    	; 0xb36 <__udivmodsi4>
 7c2:	61 31       	cpi	r22, 0x11	; 17
 7c4:	71 05       	cpc	r23, r1
 7c6:	81 05       	cpc	r24, r1
 7c8:	91 05       	cpc	r25, r1
 7ca:	08 f4       	brcc	.+2      	; 0x7ce <__LOCK_REGION_LENGTH__+0x3ce>
			{
				FND_DIGHT_PORT = 0b01000000;
 7cc:	a9 c0       	rjmp	.+338    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 7ce:	80 e4       	ldi	r24, 0x40	; 64
				FND_DATA_PORT = box_font[3];
 7d0:	88 bb       	out	0x18, r24	; 24
 7d2:	8c 81       	ldd	r24, Y+4	; 0x04
 7d4:	85 bb       	out	0x15, r24	; 21
			break;

			case 18: // 100 단위
			
			
			if(sec_countb%25 >= 18)
 7d6:	a4 c0       	rjmp	.+328    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 7d8:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <sec_countb>
 7dc:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <sec_countb+0x1>
 7e0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_countb+0x2>
 7e4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_countb+0x3>
 7e8:	29 e1       	ldi	r18, 0x19	; 25
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	40 e0       	ldi	r20, 0x00	; 0
 7ee:	50 e0       	ldi	r21, 0x00	; 0
 7f0:	a2 d1       	rcall	.+836    	; 0xb36 <__udivmodsi4>
 7f2:	62 31       	cpi	r22, 0x12	; 18
 7f4:	71 05       	cpc	r23, r1
 7f6:	81 05       	cpc	r24, r1
 7f8:	91 05       	cpc	r25, r1
 7fa:	08 f4       	brcc	.+2      	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
			{
				FND_DIGHT_PORT = 0b10000000;
 7fc:	91 c0       	rjmp	.+290    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 7fe:	80 e8       	ldi	r24, 0x80	; 128
				FND_DATA_PORT = box_font[3];
 800:	88 bb       	out	0x18, r24	; 24
 802:	8c 81       	ldd	r24, Y+4	; 0x04
 804:	85 bb       	out	0x15, r24	; 21
			break;

			case 19: // 1000 단위
			
			
			if(sec_countb%25 >= 19)
 806:	8c c0       	rjmp	.+280    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 808:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <sec_countb>
 80c:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <sec_countb+0x1>
 810:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_countb+0x2>
 814:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_countb+0x3>
 818:	29 e1       	ldi	r18, 0x19	; 25
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	40 e0       	ldi	r20, 0x00	; 0
 81e:	50 e0       	ldi	r21, 0x00	; 0
 820:	8a d1       	rcall	.+788    	; 0xb36 <__udivmodsi4>
 822:	63 31       	cpi	r22, 0x13	; 19
 824:	71 05       	cpc	r23, r1
 826:	81 05       	cpc	r24, r1
 828:	91 05       	cpc	r25, r1
 82a:	08 f4       	brcc	.+2      	; 0x82e <__LOCK_REGION_LENGTH__+0x42e>
			{
				FND_DIGHT_PORT = 0b10000000;
 82c:	79 c0       	rjmp	.+242    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 82e:	80 e8       	ldi	r24, 0x80	; 128
				FND_DATA_PORT = box_font[2];
 830:	88 bb       	out	0x18, r24	; 24
 832:	8b 81       	ldd	r24, Y+3	; 0x03
 834:	85 bb       	out	0x15, r24	; 21
			break;
			
			case 20: // 1 단위
			
			
			if(sec_countb%25 >= 20)
 836:	74 c0       	rjmp	.+232    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 838:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <sec_countb>
 83c:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <sec_countb+0x1>
 840:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_countb+0x2>
 844:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_countb+0x3>
 848:	29 e1       	ldi	r18, 0x19	; 25
 84a:	30 e0       	ldi	r19, 0x00	; 0
 84c:	40 e0       	ldi	r20, 0x00	; 0
 84e:	50 e0       	ldi	r21, 0x00	; 0
 850:	72 d1       	rcall	.+740    	; 0xb36 <__udivmodsi4>
 852:	64 31       	cpi	r22, 0x14	; 20
 854:	71 05       	cpc	r23, r1
 856:	81 05       	cpc	r24, r1
 858:	91 05       	cpc	r25, r1
 85a:	08 f4       	brcc	.+2      	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
			{
				FND_DIGHT_PORT = 0b10000000;
 85c:	61 c0       	rjmp	.+194    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 85e:	80 e8       	ldi	r24, 0x80	; 128
				FND_DATA_PORT = box_font[1];
 860:	88 bb       	out	0x18, r24	; 24
 862:	8a 81       	ldd	r24, Y+2	; 0x02
 864:	85 bb       	out	0x15, r24	; 21
			break;

			case 21: // 10 단위
			
			
			if(sec_countb%25 >= 21)
 866:	5c c0       	rjmp	.+184    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 868:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <sec_countb>
 86c:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <sec_countb+0x1>
 870:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_countb+0x2>
 874:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_countb+0x3>
 878:	29 e1       	ldi	r18, 0x19	; 25
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	40 e0       	ldi	r20, 0x00	; 0
 87e:	50 e0       	ldi	r21, 0x00	; 0
 880:	5a d1       	rcall	.+692    	; 0xb36 <__udivmodsi4>
 882:	65 31       	cpi	r22, 0x15	; 21
 884:	71 05       	cpc	r23, r1
 886:	81 05       	cpc	r24, r1
 888:	91 05       	cpc	r25, r1
 88a:	08 f4       	brcc	.+2      	; 0x88e <__LOCK_REGION_LENGTH__+0x48e>
			{
				FND_DIGHT_PORT = 0b10000000;
 88c:	49 c0       	rjmp	.+146    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 88e:	80 e8       	ldi	r24, 0x80	; 128
				FND_DATA_PORT = box_font[0];
 890:	88 bb       	out	0x18, r24	; 24
 892:	89 81       	ldd	r24, Y+1	; 0x01
 894:	85 bb       	out	0x15, r24	; 21
			
			break;

			case 22: // 100 단위
			
			if(sec_countb%25 >= 22)
 896:	44 c0       	rjmp	.+136    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 898:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <sec_countb>
 89c:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <sec_countb+0x1>
 8a0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_countb+0x2>
 8a4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_countb+0x3>
 8a8:	29 e1       	ldi	r18, 0x19	; 25
 8aa:	30 e0       	ldi	r19, 0x00	; 0
 8ac:	40 e0       	ldi	r20, 0x00	; 0
 8ae:	50 e0       	ldi	r21, 0x00	; 0
 8b0:	42 d1       	rcall	.+644    	; 0xb36 <__udivmodsi4>
 8b2:	66 31       	cpi	r22, 0x16	; 22
 8b4:	71 05       	cpc	r23, r1
 8b6:	81 05       	cpc	r24, r1
 8b8:	91 05       	cpc	r25, r1
			{
				FND_DIGHT_PORT = 0b01000000;
 8ba:	90 f1       	brcs	.+100    	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 8bc:	80 e4       	ldi	r24, 0x40	; 64
				FND_DATA_PORT = box_font[0];
 8be:	88 bb       	out	0x18, r24	; 24
 8c0:	89 81       	ldd	r24, Y+1	; 0x01
 8c2:	85 bb       	out	0x15, r24	; 21
			break;

			case 23: // 1000 단위
			
			
			if(sec_countb%25 >= 23)
 8c4:	2d c0       	rjmp	.+90     	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 8c6:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <sec_countb>
 8ca:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <sec_countb+0x1>
 8ce:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_countb+0x2>
 8d2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_countb+0x3>
 8d6:	29 e1       	ldi	r18, 0x19	; 25
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	40 e0       	ldi	r20, 0x00	; 0
 8dc:	50 e0       	ldi	r21, 0x00	; 0
 8de:	2b d1       	rcall	.+598    	; 0xb36 <__udivmodsi4>
 8e0:	67 31       	cpi	r22, 0x17	; 23
 8e2:	71 05       	cpc	r23, r1
 8e4:	81 05       	cpc	r24, r1
 8e6:	91 05       	cpc	r25, r1
			{
				FND_DIGHT_PORT = 0b00100000;
 8e8:	d8 f0       	brcs	.+54     	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 8ea:	80 e2       	ldi	r24, 0x20	; 32
				FND_DATA_PORT = box_font[0];
 8ec:	88 bb       	out	0x18, r24	; 24
 8ee:	89 81       	ldd	r24, Y+1	; 0x01
 8f0:	85 bb       	out	0x15, r24	; 21
			break;
			
			case 24: // 1000 단위
			
			
			if(sec_countb%25 >= 24)
 8f2:	16 c0       	rjmp	.+44     	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 8f4:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <sec_countb>
 8f8:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <sec_countb+0x1>
 8fc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_countb+0x2>
 900:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_countb+0x3>
 904:	29 e1       	ldi	r18, 0x19	; 25
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	40 e0       	ldi	r20, 0x00	; 0
 90a:	50 e0       	ldi	r21, 0x00	; 0
 90c:	14 d1       	rcall	.+552    	; 0xb36 <__udivmodsi4>
 90e:	68 31       	cpi	r22, 0x18	; 24
 910:	71 05       	cpc	r23, r1
 912:	81 05       	cpc	r24, r1
 914:	91 05       	cpc	r25, r1
			{
				FND_DIGHT_PORT = 0b00010000;
 916:	20 f0       	brcs	.+8      	; 0x920 <__LOCK_REGION_LENGTH__+0x520>
 918:	80 e1       	ldi	r24, 0x10	; 16
				FND_DATA_PORT = box_font[0];
 91a:	88 bb       	out	0x18, r24	; 24
 91c:	89 81       	ldd	r24, Y+1	; 0x01
			
			break;
			
			
		}
		digit_position_box++; // 다음 표시할 자리 수 // 잔상효과
 91e:	85 bb       	out	0x15, r24	; 21
 920:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <digit_position_box>
 924:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <digit_position_box+0x1>
 928:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <digit_position_box+0x2>
 92c:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <digit_position_box+0x3>
 930:	bc 01       	movw	r22, r24
 932:	cd 01       	movw	r24, r26
 934:	6f 5f       	subi	r22, 0xFF	; 255
 936:	7f 4f       	sbci	r23, 0xFF	; 255
 938:	8f 4f       	sbci	r24, 0xFF	; 255
		digit_position_box %= 25; //
 93a:	9f 4f       	sbci	r25, 0xFF	; 255
 93c:	29 e1       	ldi	r18, 0x19	; 25
 93e:	30 e0       	ldi	r19, 0x00	; 0
 940:	40 e0       	ldi	r20, 0x00	; 0
 942:	50 e0       	ldi	r21, 0x00	; 0
 944:	f8 d0       	rcall	.+496    	; 0xb36 <__udivmodsi4>
 946:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <digit_position_box>
 94a:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <digit_position_box+0x1>
 94e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <digit_position_box+0x2>
 952:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <digit_position_box+0x3>
}
 956:	26 96       	adiw	r28, 0x06	; 6
 958:	0f b6       	in	r0, 0x3f	; 63
 95a:	f8 94       	cli
 95c:	de bf       	out	0x3e, r29	; 62
 95e:	0f be       	out	0x3f, r0	; 63
 960:	cd bf       	out	0x3d, r28	; 61
 962:	df 91       	pop	r29
 964:	cf 91       	pop	r28
 966:	ff 90       	pop	r15
 968:	ef 90       	pop	r14
 96a:	df 90       	pop	r13
 96c:	cf 90       	pop	r12
 96e:	08 95       	ret

00000970 <pase>:
void pase(void)
{
		unsigned char pase_font[] = {~0x73, ~0x77, ~0x6d, ~0x79};// 0123456789 fnd에 나타나는 문구
		//
		switch(digit_position_pase)
 970:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <digit_position_pase>
 974:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <digit_position_pase+0x1>
 978:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <digit_position_pase+0x2>
 97c:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <digit_position_pase+0x3>
 980:	81 30       	cpi	r24, 0x01	; 1
 982:	91 05       	cpc	r25, r1
 984:	a1 05       	cpc	r26, r1
 986:	b1 05       	cpc	r27, r1
 988:	81 f0       	breq	.+32     	; 0x9aa <pase+0x3a>
 98a:	50 f0       	brcs	.+20     	; 0x9a0 <pase+0x30>
 98c:	82 30       	cpi	r24, 0x02	; 2
 98e:	91 05       	cpc	r25, r1
 990:	a1 05       	cpc	r26, r1
 992:	b1 05       	cpc	r27, r1
 994:	79 f0       	breq	.+30     	; 0x9b4 <pase+0x44>
 996:	03 97       	sbiw	r24, 0x03	; 3
 998:	a1 05       	cpc	r26, r1
 99a:	b1 05       	cpc	r27, r1
 99c:	81 f0       	breq	.+32     	; 0x9be <pase+0x4e>
 99e:	13 c0       	rjmp	.+38     	; 0x9c6 <pase+0x56>
		{
			case 0 :
			 FND_DIGHT_PORT = 0b00010000;
 9a0:	80 e1       	ldi	r24, 0x10	; 16
 9a2:	88 bb       	out	0x18, r24	; 24
			 FND_DATA_PORT = pase_font[0];
 9a4:	8c e8       	ldi	r24, 0x8C	; 140
 9a6:	85 bb       	out	0x15, r24	; 21
			break;
 9a8:	0e c0       	rjmp	.+28     	; 0x9c6 <pase+0x56>
			
			case 1 :
			FND_DIGHT_PORT = 0b00100000;
 9aa:	80 e2       	ldi	r24, 0x20	; 32
 9ac:	88 bb       	out	0x18, r24	; 24
			FND_DATA_PORT = pase_font[1];
 9ae:	88 e8       	ldi	r24, 0x88	; 136
 9b0:	85 bb       	out	0x15, r24	; 21
			break;
 9b2:	09 c0       	rjmp	.+18     	; 0x9c6 <pase+0x56>
			
			case 2 :
			FND_DIGHT_PORT = 0b01000000;
 9b4:	80 e4       	ldi	r24, 0x40	; 64
 9b6:	88 bb       	out	0x18, r24	; 24
			FND_DATA_PORT = pase_font[2];
 9b8:	82 e9       	ldi	r24, 0x92	; 146
 9ba:	85 bb       	out	0x15, r24	; 21
			break;
 9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <pase+0x56>
			
			case 3 :
			FND_DIGHT_PORT = 0b10000000;
 9be:	80 e8       	ldi	r24, 0x80	; 128
 9c0:	88 bb       	out	0x18, r24	; 24
			FND_DATA_PORT = pase_font[3];
 9c2:	86 e8       	ldi	r24, 0x86	; 134
 9c4:	85 bb       	out	0x15, r24	; 21
			break;
			
		}
		digit_position_pase++; // 다음 표시할 자리 수 // 잔상효과
 9c6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <digit_position_pase>
 9ca:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <digit_position_pase+0x1>
 9ce:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <digit_position_pase+0x2>
 9d2:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <digit_position_pase+0x3>
 9d6:	01 96       	adiw	r24, 0x01	; 1
 9d8:	a1 1d       	adc	r26, r1
 9da:	b1 1d       	adc	r27, r1
		digit_position_pase %= 4; //
 9dc:	83 70       	andi	r24, 0x03	; 3
 9de:	99 27       	eor	r25, r25
 9e0:	aa 27       	eor	r26, r26
 9e2:	bb 27       	eor	r27, r27
 9e4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <digit_position_pase>
 9e8:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <digit_position_pase+0x1>
 9ec:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <digit_position_pase+0x2>
 9f0:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <digit_position_pase+0x3>
 9f4:	08 95       	ret

000009f6 <main>:
uint32_t digit_position_pase = 0; // 출력할 자리 수

int main(void)
{
	uint32_t button_s = 0;
init_fnd();	 // 초기화를 잘해야만 정확하게 동작한다.
 9f6:	b9 dc       	rcall	.-1678   	; 0x36a <init_fnd>
while (1)
		{
			
			
			display_fnd();
 9f8:	de db       	rcall	.-2116   	; 0x1b6 <display_fnd>
 9fa:	8f e9       	ldi	r24, 0x9F	; 159
 9fc:	9f e0       	ldi	r25, 0x0F	; 15
 9fe:	01 97       	sbiw	r24, 0x01	; 1
 a00:	f1 f7       	brne	.-4      	; 0x9fe <main+0x8>
 a02:	00 c0       	rjmp	.+0      	; 0xa04 <main+0xe>
 a04:	00 00       	nop
 a06:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <ms_count>
			_delay_ms(1);
			ms_count++;
 a0a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <ms_count+0x1>
 a0e:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <ms_count+0x2>
 a12:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <ms_count+0x3>
 a16:	01 96       	adiw	r24, 0x01	; 1
 a18:	a1 1d       	adc	r26, r1
 a1a:	b1 1d       	adc	r27, r1
 a1c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <ms_count>
 a20:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <ms_count+0x1>
 a24:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <ms_count+0x2>
 a28:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <ms_count+0x3>
 a2c:	89 3e       	cpi	r24, 0xE9	; 233
			if(ms_count > 1000) // 1초
 a2e:	93 40       	sbci	r25, 0x03	; 3
 a30:	a1 05       	cpc	r26, r1
 a32:	b1 05       	cpc	r27, r1
 a34:	d8 f0       	brcs	.+54     	; 0xa6c <main+0x76>
 a36:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <ms_count>
			{
				ms_count = 0; //reset
 a3a:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <ms_count+0x1>
 a3e:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <ms_count+0x2>
 a42:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <ms_count+0x3>
 a46:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <sec_count>
				sec_count++; // sec count 증가
 a4a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <sec_count+0x1>
 a4e:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <sec_count+0x2>
 a52:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <sec_count+0x3>
 a56:	01 96       	adiw	r24, 0x01	; 1
 a58:	a1 1d       	adc	r26, r1
 a5a:	b1 1d       	adc	r27, r1
 a5c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <sec_count>
 a60:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <sec_count+0x1>
 a64:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <sec_count+0x2>
 a68:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <sec_count+0x3>
			}	
			
				
				if(get_BUTTON1())
 a6c:	46 db       	rcall	.-2420   	; 0xfa <get_BUTTON1>
 a6e:	89 2b       	or	r24, r25
 a70:	09 f4       	brne	.+2      	; 0xa74 <main+0x7e>
 a72:	4a c0       	rjmp	.+148    	; 0xb08 <main+0x112>
				{
					while(1)
					{
						box_s1();
 a74:	81 dc       	rcall	.-1790   	; 0x378 <box_s1>
 a76:	8f e9       	ldi	r24, 0x9F	; 159
 a78:	9f e0       	ldi	r25, 0x0F	; 15
 a7a:	01 97       	sbiw	r24, 0x01	; 1
 a7c:	f1 f7       	brne	.-4      	; 0xa7a <main+0x84>
 a7e:	00 c0       	rjmp	.+0      	; 0xa80 <main+0x8a>
 a80:	00 00       	nop
 a82:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ms_countb>
						_delay_ms(1); // 1ms마다 켬
						ms_countb++;
 a86:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <ms_countb+0x1>
 a8a:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <ms_countb+0x2>
 a8e:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <ms_countb+0x3>
 a92:	01 96       	adiw	r24, 0x01	; 1
 a94:	a1 1d       	adc	r26, r1
 a96:	b1 1d       	adc	r27, r1
 a98:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ms_countb>
 a9c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <ms_countb+0x1>
 aa0:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <ms_countb+0x2>
 aa4:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <ms_countb+0x3>
 aa8:	81 35       	cpi	r24, 0x51	; 81
						if(ms_countb > 80) // 1초
 aaa:	91 05       	cpc	r25, r1
 aac:	a1 05       	cpc	r26, r1
 aae:	b1 05       	cpc	r27, r1
 ab0:	38 f1       	brcs	.+78     	; 0xb00 <main+0x10a>
 ab2:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <ms_countb>
						{
							ms_countb = 0; //reset
 ab6:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <ms_countb+0x1>
 aba:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <ms_countb+0x2>
 abe:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ms_countb+0x3>
 ac2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <sec_countb>
							sec_countb++; // sec count 증가 //
 ac6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <sec_countb+0x1>
 aca:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <sec_countb+0x2>
 ace:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <sec_countb+0x3>
 ad2:	01 96       	adiw	r24, 0x01	; 1
 ad4:	a1 1d       	adc	r26, r1
 ad6:	b1 1d       	adc	r27, r1
 ad8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <sec_countb>
 adc:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <sec_countb+0x1>
 ae0:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <sec_countb+0x2>
 ae4:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <sec_countb+0x3>
 ae8:	4a 97       	sbiw	r24, 0x1a	; 26
							if(sec_countb > 25)
 aea:	a1 05       	cpc	r26, r1
 aec:	b1 05       	cpc	r27, r1
 aee:	40 f0       	brcs	.+16     	; 0xb00 <main+0x10a>
 af0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <sec_countb>
							{
								sec_countb = 0;
 af4:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <sec_countb+0x1>
 af8:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <sec_countb+0x2>
 afc:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <sec_countb+0x3>
							}
						}

						
						if(get_BUTTON1()) break;
 b00:	fc da       	rcall	.-2568   	; 0xfa <get_BUTTON1>
 b02:	89 2b       	or	r24, r25
 b04:	09 f4       	brne	.+2      	; 0xb08 <main+0x112>
 b06:	b6 cf       	rjmp	.-148    	; 0xa74 <main+0x7e>
					}
					
				}
				
				
				if(get_BUTTON2())
 b08:	27 db       	rcall	.-2482   	; 0x158 <get_BUTTON2>
 b0a:	89 2b       	or	r24, r25
 b0c:	09 f4       	brne	.+2      	; 0xb10 <main+0x11a>
 b0e:	74 cf       	rjmp	.-280    	; 0x9f8 <main+0x2>
 b10:	2f df       	rcall	.-418    	; 0x970 <pase>
				{
					while(1)
					{
						pase();
 b12:	8f e9       	ldi	r24, 0x9F	; 159
 b14:	9f e0       	ldi	r25, 0x0F	; 15
 b16:	01 97       	sbiw	r24, 0x01	; 1
 b18:	f1 f7       	brne	.-4      	; 0xb16 <main+0x120>
 b1a:	00 c0       	rjmp	.+0      	; 0xb1c <main+0x126>
 b1c:	00 00       	nop
 b1e:	1c db       	rcall	.-2504   	; 0x158 <get_BUTTON2>
						_delay_ms(1);
						
						if(get_BUTTON2())
 b20:	89 2b       	or	r24, r25
 b22:	b1 f3       	breq	.-20     	; 0xb10 <main+0x11a>
 b24:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <sec_count>
						{
							sec_count = 0;
 b28:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <sec_count+0x1>
 b2c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <sec_count+0x2>
 b30:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <sec_count+0x3>
 b34:	61 cf       	rjmp	.-318    	; 0x9f8 <main+0x2>

00000b36 <__udivmodsi4>:
 b36:	a1 e2       	ldi	r26, 0x21	; 33
							break;
 b38:	1a 2e       	mov	r1, r26
 b3a:	aa 1b       	sub	r26, r26
 b3c:	bb 1b       	sub	r27, r27
 b3e:	fd 01       	movw	r30, r26
 b40:	0d c0       	rjmp	.+26     	; 0xb5c <__udivmodsi4_ep>

00000b42 <__udivmodsi4_loop>:
 b42:	aa 1f       	adc	r26, r26
 b44:	bb 1f       	adc	r27, r27
 b46:	ee 1f       	adc	r30, r30
 b48:	ff 1f       	adc	r31, r31
 b4a:	a2 17       	cp	r26, r18
 b4c:	b3 07       	cpc	r27, r19
 b4e:	e4 07       	cpc	r30, r20
 b50:	f5 07       	cpc	r31, r21
 b52:	20 f0       	brcs	.+8      	; 0xb5c <__udivmodsi4_ep>
 b54:	a2 1b       	sub	r26, r18
 b56:	b3 0b       	sbc	r27, r19
 b58:	e4 0b       	sbc	r30, r20
 b5a:	f5 0b       	sbc	r31, r21

00000b5c <__udivmodsi4_ep>:
 b5c:	66 1f       	adc	r22, r22
 b5e:	77 1f       	adc	r23, r23
 b60:	88 1f       	adc	r24, r24
 b62:	99 1f       	adc	r25, r25
 b64:	1a 94       	dec	r1
 b66:	69 f7       	brne	.-38     	; 0xb42 <__udivmodsi4_loop>
 b68:	60 95       	com	r22
 b6a:	70 95       	com	r23
 b6c:	80 95       	com	r24
 b6e:	90 95       	com	r25
 b70:	9b 01       	movw	r18, r22
 b72:	ac 01       	movw	r20, r24
 b74:	bd 01       	movw	r22, r26
 b76:	cf 01       	movw	r24, r30
 b78:	08 95       	ret

00000b7a <__tablejump2__>:
 b7a:	ee 0f       	add	r30, r30
 b7c:	ff 1f       	adc	r31, r31
 b7e:	00 24       	eor	r0, r0
 b80:	00 1c       	adc	r0, r0
 b82:	0b be       	out	0x3b, r0	; 59
 b84:	07 90       	elpm	r0, Z+
 b86:	f6 91       	elpm	r31, Z
 b88:	e0 2d       	mov	r30, r0
 b8a:	09 94       	ijmp

00000b8c <_exit>:
 b8c:	f8 94       	cli

00000b8e <__stop_program>:
 b8e:	ff cf       	rjmp	.-2      	; 0xb8e <__stop_program>
