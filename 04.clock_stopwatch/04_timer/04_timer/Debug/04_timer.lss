
04_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000220  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000086b  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079e  00000000  00000000  00000b23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000293  00000000  00000000  000012c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003da  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001982  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000019e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	36 c0       	rjmp	.+108    	; 0xae <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a8 30       	cpi	r26, 0x08	; 8
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	74 d0       	rcall	.+232    	; 0x192 <main>
  aa:	7e c0       	rjmp	.+252    	; 0x1a8 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_16>:
//				   0.004ms * 250 => 1ms 

//256개의 Pulse 를 count 를 하면 이곳으로 온다. 
// 1ms 마다 interrupt가 이 곳으로 온다. 
ISR(TIMER0_OVF_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
	TCNT0 = 6;	// 6부터 시작한다. 정확한 시간을 맞춰주기 위함 
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	82 bf       	out	0x32, r24	; 50
	count++;
  c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count>
  c8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <count+0x1>
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <count+0x1>
  d2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <count>
	if(count >=500)// 0.512sec : 512ms 오버플로우 500회 이상일 때 조건문 실행
  d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count>
  da:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <count+0x1>
  de:	84 3f       	cpi	r24, 0xF4	; 244
  e0:	91 40       	sbci	r25, 0x01	; 1
  e2:	fc f0       	brlt	.+62     	; 0x122 <__vector_16+0x74>
	{
		count = 0;			// counter initial
  e4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <count+0x1>
  e8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <count>
		state = !state;		// reverse led state
  ec:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <state>
  f0:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <state+0x1>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	23 2b       	or	r18, r19
  fa:	11 f0       	breq	.+4      	; 0x100 <__vector_16+0x52>
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <state+0x1>
 104:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state>
		if(state)
 108:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <state>
 10c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <state+0x1>
 110:	89 2b       	or	r24, r25
 112:	21 f0       	breq	.+8      	; 0x11c <__vector_16+0x6e>
		{
			PORTB |= 0x01;	// LED ON 해당하는 값만 ON시키기 위해 OR연산자 사용 
 114:	88 b3       	in	r24, 0x18	; 24
 116:	81 60       	ori	r24, 0x01	; 1
 118:	88 bb       	out	0x18, r24	; 24
 11a:	03 c0       	rjmp	.+6      	; 0x122 <__vector_16+0x74>
		}
		else
		{
			PORTB &= ~0x01;	// LED OFF 해당하는 PIN만 OFF시키기 위해 AND연산자 사용 
 11c:	88 b3       	in	r24, 0x18	; 24
 11e:	8e 7f       	andi	r24, 0xFE	; 254
 120:	88 bb       	out	0x18, r24	; 24
		}
		
	}
	
	count2++;
 122:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count2>
 126:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count2+0x1>
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count2+0x1>
 130:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count2>
	if(count2 >=300)// 0.3072sec : 3072ms 오버플로우 300회 이상일 때 조건문 실행 
 134:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count2>
 138:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count2+0x1>
 13c:	8c 32       	cpi	r24, 0x2C	; 44
 13e:	91 40       	sbci	r25, 0x01	; 1
 140:	fc f0       	brlt	.+62     	; 0x180 <__vector_16+0xd2>
	{
		count2 = 0;			// counter initial
 142:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count2+0x1>
 146:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <count2>
		state2 = !state2;		// reverse led state
 14a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	23 2b       	or	r18, r19
 158:	11 f0       	breq	.+4      	; 0x15e <__vector_16+0xb0>
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 162:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(state2)
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16e:	89 2b       	or	r24, r25
 170:	21 f0       	breq	.+8      	; 0x17a <__vector_16+0xcc>
		{					
			PORTB |= 0x04;	// LED ON	
 172:	88 b3       	in	r24, 0x18	; 24
 174:	84 60       	ori	r24, 0x04	; 4
 176:	88 bb       	out	0x18, r24	; 24
 178:	03 c0       	rjmp	.+6      	; 0x180 <__vector_16+0xd2>
		}
		else
		{						
			PORTB &= ~0x04;	// LED OFF 
 17a:	88 b3       	in	r24, 0x18	; 24
 17c:	8b 7f       	andi	r24, 0xFB	; 251
 17e:	88 bb       	out	0x18, r24	; 24
		
	}
		
	
	
}
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	3f 91       	pop	r19
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <main>:

int main(void)
{
    DDRB = 0x01 + 0x04; // 0x05
 192:	85 e0       	ldi	r24, 0x05	; 5
 194:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
 196:	18 ba       	out	0x18, r1	; 24
	
	TCCR0 |= (1<< CS02) | (0<< CS01)| (0<< CS00); // 분주기 64로 사용 
 198:	83 b7       	in	r24, 0x33	; 51
 19a:	84 60       	ori	r24, 0x04	; 4
 19c:	83 bf       	out	0x33, r24	; 51
	// 16000000/64 = 250000Hz // T = 4us // 256 * 4u = 0.001024sec 
	TIMSK |= (1<< TOIE0);
 19e:	87 b7       	in	r24, 0x37	; 55
 1a0:	81 60       	ori	r24, 0x01	; 1
 1a2:	87 bf       	out	0x37, r24	; 55
	// 오버플로 인터럽트 활성화 (Timer/counter0 Overflow Interrupt Enable)
	sei();
 1a4:	78 94       	sei
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <main+0x14>

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
