
INT_MIN_SEC_WATCH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000007c0  00000854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080010a  0080010a  0000085e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000085e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012d1  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c00  00000000  00000000  00001ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009db  00000000  00000000  000028a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00003284  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000617  00000000  00000000  00003470  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ee  00000000  00000000  00003a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003e75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	c8 c1       	rjmp	.+912    	; 0x3d2 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ec       	ldi	r30, 0xC0	; 192
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 33       	cpi	r26, 0x31	; 49
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	75 d2       	rcall	.+1258   	; 0x5ae <main>
  c4:	7b c3       	rjmp	.+1782   	; 0x7bc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_BUTTON>:
int get_BUTTON3();
void init_BUTTON();

void init_BUTTON()
{
	BUTTON_DDR &= ~((1 << BUTTON1) | (1 << BUTTON2) | (1 << BUTTON3) | (1 << BUTTON4));
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	81 bb       	out	0x11, r24	; 17
  ce:	08 95       	ret

000000d0 <get_BUTTON1>:
{
	 
	static uint8_t prev_state = 0; // 버튼의 상태 0: OFF , 1 : ON / 함수 실행 후에도 값이 변하지 않음
	uint8_t current_state; // unsigned char와 동일함 == unsigned int 8bit  // unsigned char current_state 
	
	current_state = BUTTON_PIN & (1 << BUTTON1); // Button1의 값을 읽는다. , 읽었을 때 (0x10)
  d0:	80 b3       	in	r24, 0x10	; 16
  d2:	80 71       	andi	r24, 0x10	; 16
	
	if(prev_state == 0 && current_state != 0) // 버튼이 처음 눌려진 상태 	
  d4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <prev_state.1736>
  d8:	91 11       	cpse	r25, r1
  da:	11 c0       	rjmp	.+34     	; 0xfe <get_BUTTON1+0x2e>
  dc:	88 23       	and	r24, r24
  de:	79 f0       	breq	.+30     	; 0xfe <get_BUTTON1+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	8d ee       	ldi	r24, 0xED	; 237
  e4:	92 e0       	ldi	r25, 0x02	; 2
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <get_BUTTON1+0x16>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <get_BUTTON1+0x20>
  f0:	00 00       	nop
	{
		_delay_ms(60);	// 노이즈가 지나가기를 기다림
		prev_state = 1; // 처음 눌러진 상태가 아니다. 
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <prev_state.1736>
		return 0;		// 아직은 진짜로 눌러진 상태가 아니라 0을 return 
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	08 95       	ret
		
	}
	else if(prev_state == 1 && current_state == 0) // 버튼이 눌렸다 떼어진 상태 
  fe:	91 30       	cpi	r25, 0x01	; 1
 100:	81 f4       	brne	.+32     	; 0x122 <get_BUTTON1+0x52>
 102:	81 11       	cpse	r24, r1
 104:	11 c0       	rjmp	.+34     	; 0x128 <get_BUTTON1+0x58>
	{
		prev_state = 0; 
 106:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <prev_state.1736>
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	86 e7       	ldi	r24, 0x76	; 118
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <get_BUTTON1+0x40>
 118:	00 c0       	rjmp	.+0      	; 0x11a <get_BUTTON1+0x4a>
 11a:	00 00       	nop
		_delay_ms(30);	// 노이즈가 지나가기를 기다림
		return 1; // 완전히 눌렸다 떼어진 상태로 인정
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	08 95       	ret
	}
	return 0; // 아직 완전히 sw 을 눌렀다 떼어지지 않은 상태
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	08 95       	ret
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
}
 12c:	08 95       	ret

0000012e <get_BUTTON2>:
{
	 
	static uint8_t prev_state = 0;
	uint8_t current_state; // unsigned char와 동일함 == unsigned int 8bit  // unsigned char current_state
	
	current_state = BUTTON_PIN & (1 << BUTTON2); // Button1의 값을 읽는다. , 읽었을 때 (0x10)
 12e:	80 b3       	in	r24, 0x10	; 16
 130:	80 72       	andi	r24, 0x20	; 32
	
	if(prev_state == 0 && current_state != 0) // 버튼이 처음 눌려진 상태
 132:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <prev_state.1740>
 136:	91 11       	cpse	r25, r1
 138:	11 c0       	rjmp	.+34     	; 0x15c <get_BUTTON2+0x2e>
 13a:	88 23       	and	r24, r24
 13c:	79 f0       	breq	.+30     	; 0x15c <get_BUTTON2+0x2e>
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	8d ee       	ldi	r24, 0xED	; 237
 142:	92 e0       	ldi	r25, 0x02	; 2
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <get_BUTTON2+0x16>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <get_BUTTON2+0x20>
 14e:	00 00       	nop
	{
		_delay_ms(60);	// 노이즈가 지나가기를 기다림
		prev_state = 1; // 처음 눌러진 상태가 아니다.
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <prev_state.1740>
		return 0;		// 아직은 진짜로 눌러진 상태가 아니라 0을 return
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	08 95       	ret
		
	}
	else if(prev_state == 1 && current_state == 0) // 버튼이 눌렸다 떼어진 상태
 15c:	91 30       	cpi	r25, 0x01	; 1
 15e:	81 f4       	brne	.+32     	; 0x180 <get_BUTTON2+0x52>
 160:	81 11       	cpse	r24, r1
 162:	11 c0       	rjmp	.+34     	; 0x186 <get_BUTTON2+0x58>
	{
		prev_state = 0;
 164:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <prev_state.1740>
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	86 e7       	ldi	r24, 0x76	; 118
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <get_BUTTON2+0x40>
 176:	00 c0       	rjmp	.+0      	; 0x178 <get_BUTTON2+0x4a>
 178:	00 00       	nop
		_delay_ms(30);	// 노이즈가 지나가기를 기다림
		return 1; // 완전히 눌렸다 떼어진 상태로 인정
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	08 95       	ret
	}
	return 0; // 아직 완전히 sw 을 눌렀다 떼어지지 않은 상태
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	08 95       	ret
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
}
 18a:	08 95       	ret

0000018c <get_BUTTON3>:
{
	
	static uint8_t prev_state = 0;
	uint8_t current_state; // unsigned char와 동일함 == unsigned int 8bit  // unsigned char current_state
	
	current_state = BUTTON_PIN & (1 << BUTTON3); // Button1의 값을 읽는다. , 읽었을 때 (0x10)
 18c:	80 b3       	in	r24, 0x10	; 16
 18e:	80 74       	andi	r24, 0x40	; 64
	
	if(prev_state == 0 && current_state != 0) // 버튼이 처음 눌려진 상태
 190:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__data_end>
 194:	91 11       	cpse	r25, r1
 196:	11 c0       	rjmp	.+34     	; 0x1ba <get_BUTTON3+0x2e>
 198:	88 23       	and	r24, r24
 19a:	79 f0       	breq	.+30     	; 0x1ba <get_BUTTON3+0x2e>
 19c:	2f ef       	ldi	r18, 0xFF	; 255
 19e:	8d ee       	ldi	r24, 0xED	; 237
 1a0:	92 e0       	ldi	r25, 0x02	; 2
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <get_BUTTON3+0x16>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <get_BUTTON3+0x20>
 1ac:	00 00       	nop
	{
		_delay_ms(60);	// 노이즈가 지나가기를 기다림
		prev_state = 1; // 처음 눌러진 상태가 아니다.
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		return 0;		// 아직은 진짜로 눌러진 상태가 아니라 0을 return
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	08 95       	ret
		
	}
	else if(prev_state == 1 && current_state == 0) // 버튼이 눌렸다 떼어진 상태
 1ba:	91 30       	cpi	r25, 0x01	; 1
 1bc:	81 f4       	brne	.+32     	; 0x1de <get_BUTTON3+0x52>
 1be:	81 11       	cpse	r24, r1
 1c0:	11 c0       	rjmp	.+34     	; 0x1e4 <get_BUTTON3+0x58>
	{
		prev_state = 0;
 1c2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 1c6:	2f ef       	ldi	r18, 0xFF	; 255
 1c8:	86 e7       	ldi	r24, 0x76	; 118
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <get_BUTTON3+0x40>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <get_BUTTON3+0x4a>
 1d6:	00 00       	nop
		_delay_ms(30);	// 노이즈가 지나가기를 기다림
		return 1; // 완전히 눌렸다 떼어진 상태로 인정
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	08 95       	ret
	}
	return 0; // 아직 완전히 sw 을 눌렀다 떼어지지 않은 상태
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	08 95       	ret
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
}
 1e8:	08 95       	ret

000001ea <set_fnd_data>:
uint16_t sec_data;
//uint32_t digit_position=0;  // 출력할 자리수

void set_fnd_data(uint16_t data)
{
	fnd_data = data; 
 1ea:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <fnd_data+0x1>
 1ee:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <fnd_data>
 1f2:	08 95       	ret

000001f4 <get_fnd_data>:

uint16_t get_fnd_data(void)
{
	return fnd_data; 
	
}
 1f4:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <fnd_data>
 1f8:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <fnd_data+0x1>
 1fc:	08 95       	ret

000001fe <display_fnd>:

//extern uint8_t digit_position;		 // main에 전역 변수로 선언한 경우 이 내용을 추가한다. 
void display_fnd(void)
{
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
 206:	2a 97       	sbiw	r28, 0x0a	; 10
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	f8 94       	cli
 20c:	de bf       	out	0x3e, r29	; 62
 20e:	0f be       	out	0x3f, r0	; 63
 210:	cd bf       	out	0x3d, r28	; 61
	// uint8_t
	#if 1
	unsigned char fnd_font[] = {0xc0, 0xf9, 0xa4,0xb0, 0x99,0x92, 0x82, 0xd8, 0x80, 0x98};   // common애노우드
 212:	8a e0       	ldi	r24, 0x0A	; 10
 214:	e0 e0       	ldi	r30, 0x00	; 0
 216:	f1 e0       	ldi	r31, 0x01	; 1
 218:	de 01       	movw	r26, r28
 21a:	11 96       	adiw	r26, 0x01	; 1
 21c:	01 90       	ld	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	8a 95       	dec	r24
 222:	e1 f7       	brne	.-8      	; 0x21c <display_fnd+0x1e>
	unsigned char fnd_font[] = {~0xc0, ~0xf9, ~0xa4,~0xb0, ~0x99,~0x92, ~0x82, ~0xd8, ~0x80, ~0x98};   // common 캐소우드
	#endif
	
	static uint16_t digit_position = 0; // static 을 선언하면 지역 변수라도 함수 호출 뒤의 값을 그대로 유지 
	
	uint16_t data = get_fnd_data(); 
 224:	e7 df       	rcall	.-50     	; 0x1f4 <get_fnd_data>
 226:	ac 01       	movw	r20, r24

	switch(digit_position)
 228:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <digit_position.1621>
 22c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <digit_position.1621+0x1>
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	91 05       	cpc	r25, r1
 234:	61 f1       	breq	.+88     	; 0x28e <display_fnd+0x90>
 236:	40 f0       	brcs	.+16     	; 0x248 <display_fnd+0x4a>
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	91 05       	cpc	r25, r1
 23c:	09 f4       	brne	.+2      	; 0x240 <display_fnd+0x42>
 23e:	53 c0       	rjmp	.+166    	; 0x2e6 <display_fnd+0xe8>
 240:	03 97       	sbiw	r24, 0x03	; 3
 242:	09 f4       	brne	.+2      	; 0x246 <display_fnd+0x48>
 244:	7e c0       	rjmp	.+252    	; 0x342 <display_fnd+0x144>
 246:	aa c0       	rjmp	.+340    	; 0x39c <display_fnd+0x19e>
	{
		case 0:   // 1단위
		#if 1
		FND_DIGHT_PORT = 0b10000000;  // 에노우드
 248:	80 e8       	ldi	r24, 0x80	; 128
 24a:	88 bb       	out	0x18, r24	; 24
		#else
		FND_DIGHT_PORT = ~0b10000000;  // 캐소우드
		#endif
		FND_DATA_PORT = fnd_font[data %10];  // 0~9 123456789 101112
 24c:	9a 01       	movw	r18, r20
 24e:	ad ec       	ldi	r26, 0xCD	; 205
 250:	bc ec       	ldi	r27, 0xCC	; 204
 252:	a5 d2       	rcall	.+1354   	; 0x79e <__umulhisi3>
 254:	96 95       	lsr	r25
 256:	87 95       	ror	r24
 258:	96 95       	lsr	r25
 25a:	87 95       	ror	r24
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	9c 01       	movw	r18, r24
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	82 0f       	add	r24, r18
 274:	93 1f       	adc	r25, r19
 276:	9a 01       	movw	r18, r20
 278:	28 1b       	sub	r18, r24
 27a:	39 0b       	sbc	r19, r25
 27c:	e1 e0       	ldi	r30, 0x01	; 1
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	ec 0f       	add	r30, r28
 282:	fd 1f       	adc	r31, r29
 284:	e2 0f       	add	r30, r18
 286:	f3 1f       	adc	r31, r19
 288:	80 81       	ld	r24, Z
 28a:	85 bb       	out	0x15, r24	; 21
		break;
 28c:	87 c0       	rjmp	.+270    	; 0x39c <display_fnd+0x19e>
		
		case 1:   // 10단위
		#if 1
		FND_DIGHT_PORT = 0b01000000;  // 에노우드
 28e:	80 e4       	ldi	r24, 0x40	; 64
 290:	88 bb       	out	0x18, r24	; 24
		#else
		FND_DIGHT_PORT = ~0b01000000;   // 캐소우드
		#endif
		FND_DATA_PORT = fnd_font[data /10%10];
 292:	9a 01       	movw	r18, r20
 294:	ad ec       	ldi	r26, 0xCD	; 205
 296:	bc ec       	ldi	r27, 0xCC	; 204
 298:	82 d2       	rcall	.+1284   	; 0x79e <__umulhisi3>
 29a:	ac 01       	movw	r20, r24
 29c:	56 95       	lsr	r21
 29e:	47 95       	ror	r20
 2a0:	56 95       	lsr	r21
 2a2:	47 95       	ror	r20
 2a4:	56 95       	lsr	r21
 2a6:	47 95       	ror	r20
 2a8:	9a 01       	movw	r18, r20
 2aa:	79 d2       	rcall	.+1266   	; 0x79e <__umulhisi3>
 2ac:	96 95       	lsr	r25
 2ae:	87 95       	ror	r24
 2b0:	96 95       	lsr	r25
 2b2:	87 95       	ror	r24
 2b4:	96 95       	lsr	r25
 2b6:	87 95       	ror	r24
 2b8:	9c 01       	movw	r18, r24
 2ba:	22 0f       	add	r18, r18
 2bc:	33 1f       	adc	r19, r19
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	82 0f       	add	r24, r18
 2cc:	93 1f       	adc	r25, r19
 2ce:	9a 01       	movw	r18, r20
 2d0:	28 1b       	sub	r18, r24
 2d2:	39 0b       	sbc	r19, r25
 2d4:	e1 e0       	ldi	r30, 0x01	; 1
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	ec 0f       	add	r30, r28
 2da:	fd 1f       	adc	r31, r29
 2dc:	e2 0f       	add	r30, r18
 2de:	f3 1f       	adc	r31, r19
 2e0:	80 81       	ld	r24, Z
 2e2:	85 bb       	out	0x15, r24	; 21
		break;
 2e4:	5b c0       	rjmp	.+182    	; 0x39c <display_fnd+0x19e>
		
		case 2:   // 100단위   분
		#if 1
		FND_DIGHT_PORT = 0b00100000;  // 에노우드
 2e6:	80 e2       	ldi	r24, 0x20	; 32
 2e8:	88 bb       	out	0x18, r24	; 24
		#else
		FND_DIGHT_PORT = ~0b00100000;  // 캐소우드
		#endif
		FND_DATA_PORT = fnd_font[data /100%10];
 2ea:	9a 01       	movw	r18, r20
 2ec:	36 95       	lsr	r19
 2ee:	27 95       	ror	r18
 2f0:	36 95       	lsr	r19
 2f2:	27 95       	ror	r18
 2f4:	ab e7       	ldi	r26, 0x7B	; 123
 2f6:	b4 e1       	ldi	r27, 0x14	; 20
 2f8:	52 d2       	rcall	.+1188   	; 0x79e <__umulhisi3>
 2fa:	ac 01       	movw	r20, r24
 2fc:	56 95       	lsr	r21
 2fe:	47 95       	ror	r20
 300:	9a 01       	movw	r18, r20
 302:	ad ec       	ldi	r26, 0xCD	; 205
 304:	bc ec       	ldi	r27, 0xCC	; 204
 306:	4b d2       	rcall	.+1174   	; 0x79e <__umulhisi3>
 308:	96 95       	lsr	r25
 30a:	87 95       	ror	r24
 30c:	96 95       	lsr	r25
 30e:	87 95       	ror	r24
 310:	96 95       	lsr	r25
 312:	87 95       	ror	r24
 314:	9c 01       	movw	r18, r24
 316:	22 0f       	add	r18, r18
 318:	33 1f       	adc	r19, r19
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	82 0f       	add	r24, r18
 328:	93 1f       	adc	r25, r19
 32a:	9a 01       	movw	r18, r20
 32c:	28 1b       	sub	r18, r24
 32e:	39 0b       	sbc	r19, r25
 330:	e1 e0       	ldi	r30, 0x01	; 1
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	ec 0f       	add	r30, r28
 336:	fd 1f       	adc	r31, r29
 338:	e2 0f       	add	r30, r18
 33a:	f3 1f       	adc	r31, r19
 33c:	80 81       	ld	r24, Z
 33e:	85 bb       	out	0x15, r24	; 21
		break;
 340:	2d c0       	rjmp	.+90     	; 0x39c <display_fnd+0x19e>
		
		case 3:   // 1000
		#if 1
		FND_DIGHT_PORT = 0b00010000;  // 에노우드
 342:	80 e1       	ldi	r24, 0x10	; 16
 344:	88 bb       	out	0x18, r24	; 24
		#else
		FND_DIGHT_PORT = ~0b00010000;  // 캐소우드
		#endif
		FND_DATA_PORT = fnd_font[data /1000%6];
 346:	9a 01       	movw	r18, r20
 348:	36 95       	lsr	r19
 34a:	27 95       	ror	r18
 34c:	36 95       	lsr	r19
 34e:	27 95       	ror	r18
 350:	36 95       	lsr	r19
 352:	27 95       	ror	r18
 354:	a5 ec       	ldi	r26, 0xC5	; 197
 356:	b0 e2       	ldi	r27, 0x20	; 32
 358:	22 d2       	rcall	.+1092   	; 0x79e <__umulhisi3>
 35a:	ac 01       	movw	r20, r24
 35c:	52 95       	swap	r21
 35e:	42 95       	swap	r20
 360:	4f 70       	andi	r20, 0x0F	; 15
 362:	45 27       	eor	r20, r21
 364:	5f 70       	andi	r21, 0x0F	; 15
 366:	45 27       	eor	r20, r21
 368:	9a 01       	movw	r18, r20
 36a:	ab ea       	ldi	r26, 0xAB	; 171
 36c:	ba ea       	ldi	r27, 0xAA	; 170
 36e:	17 d2       	rcall	.+1070   	; 0x79e <__umulhisi3>
 370:	96 95       	lsr	r25
 372:	87 95       	ror	r24
 374:	96 95       	lsr	r25
 376:	87 95       	ror	r24
 378:	9c 01       	movw	r18, r24
 37a:	22 0f       	add	r18, r18
 37c:	33 1f       	adc	r19, r19
 37e:	82 0f       	add	r24, r18
 380:	93 1f       	adc	r25, r19
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	9a 01       	movw	r18, r20
 388:	28 1b       	sub	r18, r24
 38a:	39 0b       	sbc	r19, r25
 38c:	e1 e0       	ldi	r30, 0x01	; 1
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	ec 0f       	add	r30, r28
 392:	fd 1f       	adc	r31, r29
 394:	e2 0f       	add	r30, r18
 396:	f3 1f       	adc	r31, r19
 398:	80 81       	ld	r24, Z
 39a:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_position++;   // 다음 표시할 자리수
 39c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <digit_position.1621>
 3a0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <digit_position.1621+0x1>
 3a4:	01 96       	adiw	r24, 0x01	; 1
	digit_position %= 4;  // digit_position = digit_position % 4
 3a6:	83 70       	andi	r24, 0x03	; 3
 3a8:	99 27       	eor	r25, r25
 3aa:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <digit_position.1621+0x1>
 3ae:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <digit_position.1621>
}
 3b2:	2a 96       	adiw	r28, 0x0a	; 10
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	f8 94       	cli
 3b8:	de bf       	out	0x3e, r29	; 62
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	cd bf       	out	0x3d, r28	; 61
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <init_fnd>:
void init_fnd(void)
{
	FND_DATA_DDR = 0xff;
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	84 bb       	out	0x14, r24	; 20
	FND_DIGHT_DDR |= 0xf0;   // 4567만 1로 3210은 그대로 유지
 3c8:	87 b3       	in	r24, 0x17	; 23
 3ca:	80 6f       	ori	r24, 0xF0	; 240
 3cc:	87 bb       	out	0x17, r24	; 23
	#if 0
	FND_DATA_PORT = ~0x00;   // common 애노우드 FND를 all off
	#else
	FND_DATA_PORT = 0x00;   // 0xff common 케소우드 FND를 all off
 3ce:	15 ba       	out	0x15, r1	; 21
 3d0:	08 95       	ret

000003d2 <__vector_16>:
// 3. 8 bit Timer OV : 4us * 256 = 1.024ms
// 256개의 pulse 를 count 하면 이곳으로 온다
//

ISR(TIMER0_OVF_vect) // 인터럽트 루틴을 길게 짤 수록 output delay가 증가하여 원하는 시간에 출력이 나오지 않음 
{
 3d2:	1f 92       	push	r1
 3d4:	0f 92       	push	r0
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	0f 92       	push	r0
 3da:	11 24       	eor	r1, r1
 3dc:	0b b6       	in	r0, 0x3b	; 59
 3de:	0f 92       	push	r0
 3e0:	2f 93       	push	r18
 3e2:	3f 93       	push	r19
 3e4:	4f 93       	push	r20
 3e6:	5f 93       	push	r21
 3e8:	6f 93       	push	r22
 3ea:	7f 93       	push	r23
 3ec:	8f 93       	push	r24
 3ee:	9f 93       	push	r25
 3f0:	af 93       	push	r26
 3f2:	bf 93       	push	r27
 3f4:	ef 93       	push	r30
 3f6:	ff 93       	push	r31
	TCNT0 = 6; // TCNT를 6~256 == > 정확히 1ms 를 유지하기 위해 
 3f8:	86 e0       	ldi	r24, 0x06	; 6
 3fa:	82 bf       	out	0x32, r24	; 50
			   // TINT 0 OVF INT 
	ms_count++;
 3fc:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <ms_count>
 400:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <ms_count+0x1>
 404:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <ms_count+0x2>
 408:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <ms_count+0x3>
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	a1 1d       	adc	r26, r1
 410:	b1 1d       	adc	r27, r1
 412:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <ms_count>
 416:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <ms_count+0x1>
 41a:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <ms_count+0x2>
 41e:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <ms_count+0x3>
	if (ms_count >= 1000)   // 1000ms ==> 1sec
 422:	88 3e       	cpi	r24, 0xE8	; 232
 424:	93 40       	sbci	r25, 0x03	; 3
 426:	a1 05       	cpc	r26, r1
 428:	b1 05       	cpc	r27, r1
 42a:	e0 f0       	brcs	.+56     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
	{
		ms_count=0;
 42c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <ms_count>
 430:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <ms_count+0x1>
 434:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <ms_count+0x2>
 438:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <ms_count+0x3>
		sec_count++;    // sec counter 증가
 43c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sec_count>
 440:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <sec_count+0x1>
 444:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <sec_count+0x2>
 448:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <sec_count+0x3>
 44c:	01 96       	adiw	r24, 0x01	; 1
 44e:	a1 1d       	adc	r26, r1
 450:	b1 1d       	adc	r27, r1
 452:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sec_count>
 456:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <sec_count+0x1>
 45a:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <sec_count+0x2>
 45e:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <sec_count+0x3>
		inc_time_sec(); // 1초에 한번 씩 call 
 462:	87 d1       	rcall	.+782    	; 0x772 <inc_time_sec>
	}
	if (ms_count%4 == 0)  //4ms 마다 fnd를 display
 464:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <ms_count>
 468:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <ms_count+0x1>
 46c:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <ms_count+0x2>
 470:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <ms_count+0x3>
 474:	83 70       	andi	r24, 0x03	; 3
 476:	99 27       	eor	r25, r25
 478:	aa 27       	eor	r26, r26
 47a:	bb 27       	eor	r27, r27
 47c:	89 2b       	or	r24, r25
 47e:	8a 2b       	or	r24, r26
 480:	8b 2b       	or	r24, r27
		display_fnd();
 482:	09 f4       	brne	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 484:	bc de       	rcall	.-648    	; 0x1fe <display_fnd>
	if(stopwatch_state == RUN)
 486:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <stopwatch_state>
 48a:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <stopwatch_state+0x1>
 48e:	01 97       	sbiw	r24, 0x01	; 1
		inc_stopwatch_clock();
 490:	09 f4       	brne	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 492:	d6 d0       	rcall	.+428    	; 0x640 <inc_stopwatch_clock>
		
	if(get_BUTTON3())
 494:	7b de       	rcall	.-778    	; 0x18c <get_BUTTON3>
 496:	89 2b       	or	r24, r25
 498:	51 f0       	breq	.+20     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 49a:	ea e2       	ldi	r30, 0x2A	; 42
	{
		time_clock.sec = 0;
 49c:	f1 e0       	ldi	r31, 0x01	; 1
 49e:	12 82       	std	Z+2, r1	; 0x02
 4a0:	11 82       	std	Z+1, r1	; 0x01
		time_clock.min = 0;
 4a2:	10 82       	st	Z, r1
		time_clock.hour = 0;
 4a4:	e2 e6       	ldi	r30, 0x62	; 98
		
		PORTF &= ~0x06;
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	89 7f       	andi	r24, 0xF9	; 249
 4ac:	80 83       	st	Z, r24
 4ae:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <count12>
	}
	
	
	count12++;
 4b2:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <count12+0x1>
 4b6:	01 96       	adiw	r24, 0x01	; 1
 4b8:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <count12+0x1>
 4bc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <count12>
 4c0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <count12>
	if(count12 >=500)// 0.512sec : 512ms 오버플로우 500회 이상일 때 조건문 실행
 4c4:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <count12+0x1>
 4c8:	84 3f       	cpi	r24, 0xF4	; 244
 4ca:	91 40       	sbci	r25, 0x01	; 1
 4cc:	1c f1       	brlt	.+70     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 4ce:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <count12+0x1>
	{
		count12 = 0;			// counter initial
 4d2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <count12>
 4d6:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <state>
		state = !state;		// reverse led state
 4da:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <state+0x1>
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	23 2b       	or	r18, r19
 4e4:	11 f0       	breq	.+4      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <state+0x1>
 4ee:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <state>
 4f2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <state>
		if(state)
 4f6:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <state+0x1>
 4fa:	89 2b       	or	r24, r25
 4fc:	31 f0       	breq	.+12     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 4fe:	e2 e6       	ldi	r30, 0x62	; 98
		{
			PORTF |= 0x01;	// LED ON 해당하는 값만 ON시키기 위해 OR연산자 사용
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	81 60       	ori	r24, 0x01	; 1
 506:	80 83       	st	Z, r24
 508:	05 c0       	rjmp	.+10     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 50a:	e2 e6       	ldi	r30, 0x62	; 98
		}
		else
		{
			PORTF &= ~0x01;	// LED OFF 해당하는 PIN만 OFF시키기 위해 AND연산자 사용
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	8e 7f       	andi	r24, 0xFE	; 254
 512:	80 83       	st	Z, r24
		}
		
	}
	
	if(get_BUTTON1())
 514:	dd dd       	rcall	.-1094   	; 0xd0 <get_BUTTON1>
 516:	89 2b       	or	r24, r25
 518:	29 f1       	breq	.+74     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 51a:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <state1>
	{
		
		state1 = !state1;		// reverse led state
 51e:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <state1+0x1>
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	23 2b       	or	r18, r19
 528:	11 f0       	breq	.+4      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <state1+0x1>
 532:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <state1>
 536:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <state1>
		if(state1)
 53a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <state1+0x1>
 53e:	89 2b       	or	r24, r25
 540:	49 f0       	breq	.+18     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 542:	e2 e6       	ldi	r30, 0x62	; 98
		{
			PORTF |= 0x04;
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	84 60       	ori	r24, 0x04	; 4
 54a:	80 83       	st	Z, r24
 54c:	80 81       	ld	r24, Z
			PORTF &= ~0x02;	// LED ON 해당하는 값만 ON시키기 위해 OR연산자 사용
 54e:	8d 7f       	andi	r24, 0xFD	; 253
 550:	80 83       	st	Z, r24
 552:	08 c0       	rjmp	.+16     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 554:	e2 e6       	ldi	r30, 0x62	; 98
		}
		else
		{
			PORTF |= 0x02;
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	80 81       	ld	r24, Z
 55a:	82 60       	ori	r24, 0x02	; 2
 55c:	80 83       	st	Z, r24
 55e:	80 81       	ld	r24, Z
			PORTF &= ~0x04;	// LED OFF 해당하는 PIN만 OFF시키기 위해 AND연산자 사용
 560:	8b 7f       	andi	r24, 0xFB	; 251
 562:	80 83       	st	Z, r24
 564:	ff 91       	pop	r31
	}
	
	
	
		
}
 566:	ef 91       	pop	r30
 568:	bf 91       	pop	r27
 56a:	af 91       	pop	r26
 56c:	9f 91       	pop	r25
 56e:	8f 91       	pop	r24
 570:	7f 91       	pop	r23
 572:	6f 91       	pop	r22
 574:	5f 91       	pop	r21
 576:	4f 91       	pop	r20
 578:	3f 91       	pop	r19
 57a:	2f 91       	pop	r18
 57c:	0f 90       	pop	r0
 57e:	0b be       	out	0x3b, r0	; 59
 580:	0f 90       	pop	r0
 582:	0f be       	out	0x3f, r0	; 63
 584:	0f 90       	pop	r0
 586:	1f 90       	pop	r1
 588:	18 95       	reti

0000058a <init_timer0>:
 58a:	86 e0       	ldi	r24, 0x06	; 6
	}
}

void init_timer0()
{
	TCNT0 = 6; 
 58c:	82 bf       	out	0x32, r24	; 50
	
	DDRF = 0x01 + 0x02 + 0x04;
 58e:	87 e0       	ldi	r24, 0x07	; 7
 590:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
	PORTF |= 0x02;
 594:	e2 e6       	ldi	r30, 0x62	; 98
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
 59a:	82 60       	ori	r24, 0x02	; 2
 59c:	80 83       	st	Z, r24
	
	TCCR0 |= (1 << CS02) | (0 << CS01) | (0 << CS00);  //  분주비를 64로 설정
 59e:	83 b7       	in	r24, 0x33	; 51
 5a0:	84 60       	ori	r24, 0x04	; 4
 5a2:	83 bf       	out	0x33, r24	; 51
	
	TIMSK |= (1 << TOIE0);
 5a4:	87 b7       	in	r24, 0x37	; 55
 5a6:	81 60       	ori	r24, 0x01	; 1
 5a8:	87 bf       	out	0x37, r24	; 55
	
	sei();			 // global interrupt 활성화 
 5aa:	78 94       	sei
 5ac:	08 95       	ret

000005ae <main>:
int mode = WATCH;
 


int main(void)
{
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	00 d0       	rcall	.+0      	; 0x5b4 <main+0x6>
 5b4:	1f 92       	push	r1
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62
	TIME myTIME; // 시계를 구동 
	
	init_fnd();
 5ba:	04 df       	rcall	.-504    	; 0x3c4 <init_fnd>
	init_BUTTON();
 5bc:	85 dd       	rcall	.-1270   	; 0xc8 <init_BUTTON>
	init_timer0();
 5be:	e5 df       	rcall	.-54     	; 0x58a <init_timer0>
 5c0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <mode+0x1>
	
	mode = WATCH; // 시계모드로 시작 
 5c4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <mode>
 5c8:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <stopwatch_state+0x1>
	stopwatch_state = STOP; 
 5cc:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <stopwatch_state>
 5d0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mode>
	
	while (1)
	{
		switch(mode)
 5d4:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <mode+0x1>
 5d8:	00 97       	sbiw	r24, 0x00	; 0
 5da:	19 f0       	breq	.+6      	; 0x5e2 <main+0x34>
 5dc:	01 97       	sbiw	r24, 0x01	; 1
 5de:	b9 f0       	breq	.+46     	; 0x60e <main+0x60>
 5e0:	f7 cf       	rjmp	.-18     	; 0x5d0 <main+0x22>
		{
			case WATCH : 
			get_time_clock(&myTIME);
 5e2:	ce 01       	movw	r24, r28
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	ba d0       	rcall	.+372    	; 0x75c <get_time_clock>
 5e8:	2a 81       	ldd	r18, Y+2	; 0x02
			set_fnd_data(myTIME.min*100 + myTIME.sec);
 5ea:	8b 81       	ldd	r24, Y+3	; 0x03
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	34 e6       	ldi	r19, 0x64	; 100
 5f0:	23 9f       	mul	r18, r19
 5f2:	80 0d       	add	r24, r0
 5f4:	91 1d       	adc	r25, r1
 5f6:	11 24       	eor	r1, r1
 5f8:	f8 dd       	rcall	.-1040   	; 0x1ea <set_fnd_data>
			if(get_BUTTON1())
 5fa:	6a dd       	rcall	.-1324   	; 0xd0 <get_BUTTON1>
 5fc:	89 2b       	or	r24, r25
 5fe:	41 f3       	breq	.-48     	; 0x5d0 <main+0x22>
 600:	81 e0       	ldi	r24, 0x01	; 1
			{
				mode = STOPWATCH; 
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <mode+0x1>
 608:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mode>
 60c:	e1 cf       	rjmp	.-62     	; 0x5d0 <main+0x22>
 60e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <stopwatch_state>
			}
			break;
			
			case STOPWATCH :
			switch (stopwatch_state)
 612:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <stopwatch_state+0x1>
 616:	81 30       	cpi	r24, 0x01	; 1
 618:	91 05       	cpc	r25, r1
 61a:	39 f0       	breq	.+14     	; 0x62a <main+0x7c>
 61c:	82 30       	cpi	r24, 0x02	; 2
 61e:	91 05       	cpc	r25, r1
 620:	31 f0       	breq	.+12     	; 0x62e <main+0x80>
 622:	89 2b       	or	r24, r25
			{
				case STOP :
				stopwatch_stop(); 
 624:	29 f4       	brne	.+10     	; 0x630 <main+0x82>
 626:	64 d0       	rcall	.+200    	; 0x6f0 <stopwatch_stop>
				break;
 628:	03 c0       	rjmp	.+6      	; 0x630 <main+0x82>
				case RUN :
				stopwatch_run();
 62a:	55 d0       	rcall	.+170    	; 0x6d6 <stopwatch_run>
 62c:	01 c0       	rjmp	.+2      	; 0x630 <main+0x82>
				break;
 62e:	78 d0       	rcall	.+240    	; 0x720 <stopwatch_reset>
				case RESET :
				
				stopwatch_reset();
 630:	4f dd       	rcall	.-1378   	; 0xd0 <get_BUTTON1>
 632:	89 2b       	or	r24, r25
				break;

			}
			if(get_BUTTON1())
 634:	69 f2       	breq	.-102    	; 0x5d0 <main+0x22>
 636:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <mode+0x1>
 63a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <mode>
			{
				
				mode = WATCH;
 63e:	c8 cf       	rjmp	.-112    	; 0x5d0 <main+0x22>

00000640 <inc_stopwatch_clock>:


// 1초에 한 번씩 Call을 한다.
void inc_stopwatch_clock(void)
{	
	count++; 
 640:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <count>
 644:	8f 5f       	subi	r24, 0xFF	; 255
 646:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <count>
	if(count >= 100 )
 64a:	84 36       	cpi	r24, 0x64	; 100
 64c:	78 f1       	brcs	.+94     	; 0x6ac <inc_stopwatch_clock+0x6c>
	{
		count = 0; 
 64e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <count>
		
		stopwatch_sec++;
 652:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <stopwatch_sec>
 656:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <stopwatch_sec+0x1>
 65a:	01 96       	adiw	r24, 0x01	; 1
 65c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <stopwatch_sec+0x1>
 660:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <stopwatch_sec>
		if(stopwatch_sec >= 60)
 664:	cc 97       	sbiw	r24, 0x3c	; 60
 666:	14 f1       	brlt	.+68     	; 0x6ac <inc_stopwatch_clock+0x6c>
		{
			stopwatch_sec = 0; // 다음 초를 위해 CLEAR
 668:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <stopwatch_sec+0x1>
 66c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <stopwatch_sec>
			stopwatch_min++;
 670:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <stopwatch_min>
 674:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <stopwatch_min+0x1>
 678:	01 96       	adiw	r24, 0x01	; 1
 67a:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <stopwatch_min+0x1>
 67e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <stopwatch_min>
			
			if(stopwatch_min >= 60)
 682:	cc 97       	sbiw	r24, 0x3c	; 60
 684:	9c f0       	brlt	.+38     	; 0x6ac <inc_stopwatch_clock+0x6c>
			{
				stopwatch_min = 0;
 686:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <stopwatch_min+0x1>
 68a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <stopwatch_min>
				stopwatch_hour++;
 68e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <stopwatch_hour>
 692:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <stopwatch_hour+0x1>
 696:	01 96       	adiw	r24, 0x01	; 1
 698:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <stopwatch_hour+0x1>
 69c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <stopwatch_hour>
				
				if(stopwatch_hour >=24)
 6a0:	48 97       	sbiw	r24, 0x18	; 24
 6a2:	24 f0       	brlt	.+8      	; 0x6ac <inc_stopwatch_clock+0x6c>
				{
					stopwatch_hour = 0;
 6a4:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <stopwatch_hour+0x1>
 6a8:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <stopwatch_hour>
					
				}
			}
		}
	}
	 stopwatchclock = (stopwatch_sec + stopwatch_min * 100 ); // 총 몇인지 나옴 
 6ac:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <stopwatch_min>
 6b0:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <stopwatch_min+0x1>
 6b4:	44 e6       	ldi	r20, 0x64	; 100
 6b6:	48 9f       	mul	r20, r24
 6b8:	90 01       	movw	r18, r0
 6ba:	49 9f       	mul	r20, r25
 6bc:	30 0d       	add	r19, r0
 6be:	11 24       	eor	r1, r1
 6c0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <stopwatch_sec>
 6c4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <stopwatch_sec+0x1>
 6c8:	82 0f       	add	r24, r18
 6ca:	93 1f       	adc	r25, r19
 6cc:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <stopwatchclock+0x1>
 6d0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <stopwatchclock>
 6d4:	08 95       	ret

000006d6 <stopwatch_run>:


 
void stopwatch_run()
{
	set_fnd_data(stopwatchclock); // FND에 출력할 data가 넘어간다. 
 6d6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <stopwatchclock>
 6da:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <stopwatchclock+0x1>
 6de:	85 dd       	rcall	.-1270   	; 0x1ea <set_fnd_data>
	
	if (get_BUTTON2())
 6e0:	26 dd       	rcall	.-1460   	; 0x12e <get_BUTTON2>
 6e2:	89 2b       	or	r24, r25
 6e4:	21 f0       	breq	.+8      	; 0x6ee <stopwatch_run+0x18>
 6e6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <stopwatch_state+0x1>
	{
		stopwatch_state = STOP; 
 6ea:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <stopwatch_state>
 6ee:	08 95       	ret

000006f0 <stopwatch_stop>:
 6f0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <stopwatchclock>
	}
}

void stopwatch_stop()
{
	set_fnd_data(stopwatchclock); // FND에 출력할 data가 넘어간다.
 6f4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <stopwatchclock+0x1>
 6f8:	78 dd       	rcall	.-1296   	; 0x1ea <set_fnd_data>
	
	if (get_BUTTON2())
 6fa:	19 dd       	rcall	.-1486   	; 0x12e <get_BUTTON2>
 6fc:	89 2b       	or	r24, r25
 6fe:	31 f0       	breq	.+12     	; 0x70c <stopwatch_stop+0x1c>
 700:	81 e0       	ldi	r24, 0x01	; 1
	{
		stopwatch_state = RUN; 
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <stopwatch_state+0x1>
 708:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <stopwatch_state>
		
	}
	if (get_BUTTON3())
 70c:	3f dd       	rcall	.-1410   	; 0x18c <get_BUTTON3>
 70e:	89 2b       	or	r24, r25
 710:	31 f0       	breq	.+12     	; 0x71e <stopwatch_stop+0x2e>
 712:	82 e0       	ldi	r24, 0x02	; 2
	{
		stopwatch_state = RESET; 
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <stopwatch_state+0x1>
 71a:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <stopwatch_state>
 71e:	08 95       	ret

00000720 <stopwatch_reset>:
 720:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <stopwatchclock+0x1>
	}
}

void stopwatch_reset()
{
	stopwatchclock = 0; 
 724:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stopwatchclock>
	stopwatch_state = 0;
 728:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <stopwatch_state+0x1>
 72c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <stopwatch_state>
	stopwatch_hour = 0;
 730:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <stopwatch_hour+0x1>
 734:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <stopwatch_hour>
	stopwatch_min = 0;
 738:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <stopwatch_min+0x1>
 73c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <stopwatch_min>
	stopwatch_sec = 0;
 740:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <stopwatch_sec+0x1>
 744:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <stopwatch_sec>
	count = 0;
 748:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <count>
	
	set_fnd_data(stopwatchclock);
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	4c dd       	rcall	.-1384   	; 0x1ea <set_fnd_data>
	stopwatch_state = STOP;
 752:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <stopwatch_state+0x1>
 756:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <stopwatch_state>
 75a:	08 95       	ret

0000075c <get_time_clock>:
	 *time=time_clock;			// call by ref 
	
}
void set_time_clock(TIME time) // *time 은 TIME의 주소를 갖는다.
{
	time_clock = time;		   // call by value
 75c:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <time_clock>
 760:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <time_clock+0x1>
 764:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <time_clock+0x2>
 768:	fc 01       	movw	r30, r24
 76a:	20 83       	st	Z, r18
 76c:	31 83       	std	Z+1, r19	; 0x01
 76e:	42 83       	std	Z+2, r20	; 0x02
 770:	08 95       	ret

00000772 <inc_time_sec>:
	
}
// 1초에 한 번씩 Call을 한다. 
void inc_time_sec(void)
{
	time_clock.sec++;
 772:	ea e2       	ldi	r30, 0x2A	; 42
 774:	f1 e0       	ldi	r31, 0x01	; 1
 776:	82 81       	ldd	r24, Z+2	; 0x02
 778:	8f 5f       	subi	r24, 0xFF	; 255
 77a:	82 83       	std	Z+2, r24	; 0x02
	if(time_clock.sec >= 60)
 77c:	8c 33       	cpi	r24, 0x3C	; 60
 77e:	70 f0       	brcs	.+28     	; 0x79c <inc_time_sec+0x2a>
	{
		time_clock.sec = 0; // 다음 초를 위해 CLEAR
 780:	12 82       	std	Z+2, r1	; 0x02
		time_clock.min++; 
 782:	81 81       	ldd	r24, Z+1	; 0x01
 784:	8f 5f       	subi	r24, 0xFF	; 255
 786:	81 83       	std	Z+1, r24	; 0x01
		
		if(time_clock.min >= 60)
 788:	8c 33       	cpi	r24, 0x3C	; 60
 78a:	40 f0       	brcs	.+16     	; 0x79c <inc_time_sec+0x2a>
		{
			time_clock.min = 0;
 78c:	11 82       	std	Z+1, r1	; 0x01
			time_clock.hour++; 
 78e:	80 81       	ld	r24, Z
 790:	8f 5f       	subi	r24, 0xFF	; 255
 792:	80 83       	st	Z, r24
			
			if(time_clock.hour >=24)
 794:	88 31       	cpi	r24, 0x18	; 24
 796:	10 f0       	brcs	.+4      	; 0x79c <inc_time_sec+0x2a>
			{
				time_clock.hour = 0;
 798:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <time_clock>
 79c:	08 95       	ret

0000079e <__umulhisi3>:
 79e:	a2 9f       	mul	r26, r18
 7a0:	b0 01       	movw	r22, r0
 7a2:	b3 9f       	mul	r27, r19
 7a4:	c0 01       	movw	r24, r0
 7a6:	a3 9f       	mul	r26, r19
 7a8:	70 0d       	add	r23, r0
 7aa:	81 1d       	adc	r24, r1
 7ac:	11 24       	eor	r1, r1
 7ae:	91 1d       	adc	r25, r1
 7b0:	b2 9f       	mul	r27, r18
 7b2:	70 0d       	add	r23, r0
 7b4:	81 1d       	adc	r24, r1
 7b6:	11 24       	eor	r1, r1
 7b8:	91 1d       	adc	r25, r1
 7ba:	08 95       	ret

000007bc <_exit>:
 7bc:	f8 94       	cli

000007be <__stop_program>:
 7be:	ff cf       	rjmp	.-2      	; 0x7be <__stop_program>
